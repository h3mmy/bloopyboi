// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/bwmarrin/discordgo"
	"github.com/h3mmy/bloopyboi/bot/internal/ent/discordmessage"
)

// DiscordMessage is the model entity for the DiscordMessage schema.
type DiscordMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Raw holds the value of the "raw" field.
	Raw discordgo.Message `json:"raw,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DiscordMessage) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case discordmessage.FieldRaw:
			values[i] = new([]byte)
		case discordmessage.FieldID:
			values[i] = new(sql.NullString)
		case discordmessage.FieldCreateTime, discordmessage.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DiscordMessage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DiscordMessage fields.
func (dm *DiscordMessage) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discordmessage.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				dm.ID = value.String
			}
		case discordmessage.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				dm.CreateTime = value.Time
			}
		case discordmessage.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				dm.UpdateTime = value.Time
			}
		case discordmessage.FieldRaw:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field raw", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dm.Raw); err != nil {
					return fmt.Errorf("unmarshal field raw: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DiscordMessage.
// Note that you need to call DiscordMessage.Unwrap() before calling this method if this DiscordMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (dm *DiscordMessage) Update() *DiscordMessageUpdateOne {
	return (&DiscordMessageClient{config: dm.config}).UpdateOne(dm)
}

// Unwrap unwraps the DiscordMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dm *DiscordMessage) Unwrap() *DiscordMessage {
	_tx, ok := dm.config.driver.(*txDriver)
	if !ok {
		panic("ent: DiscordMessage is not a transactional entity")
	}
	dm.config.driver = _tx.drv
	return dm
}

// String implements the fmt.Stringer.
func (dm *DiscordMessage) String() string {
	var builder strings.Builder
	builder.WriteString("DiscordMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dm.ID))
	builder.WriteString("create_time=")
	builder.WriteString(dm.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(dm.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("raw=")
	builder.WriteString(fmt.Sprintf("%v", dm.Raw))
	builder.WriteByte(')')
	return builder.String()
}

// DiscordMessages is a parsable slice of DiscordMessage.
type DiscordMessages []*DiscordMessage

func (dm DiscordMessages) config(cfg config) {
	for _i := range dm {
		dm[_i].config = cfg
	}
}
