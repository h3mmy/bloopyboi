// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/h3mmy/bloopyboi/bot/internal/ent/mediarequest"
	"gitlab.com/h3mmy/bloopyboi/bot/internal/ent/user"
)

// MediaRequestCreate is the builder for creating a MediaRequest entity.
type MediaRequestCreate struct {
	config
	mutation *MediaRequestMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (mrc *MediaRequestCreate) SetStatus(s string) *MediaRequestCreate {
	mrc.mutation.SetStatus(s)
	return mrc
}

// SetMediaType sets the "mediaType" field.
func (mrc *MediaRequestCreate) SetMediaType(mt mediarequest.MediaType) *MediaRequestCreate {
	mrc.mutation.SetMediaType(mt)
	return mrc
}

// SetRequestId sets the "requestId" field.
func (mrc *MediaRequestCreate) SetRequestId(s string) *MediaRequestCreate {
	mrc.mutation.SetRequestId(s)
	return mrc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mrc *MediaRequestCreate) SetUserID(id int) *MediaRequestCreate {
	mrc.mutation.SetUserID(id)
	return mrc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (mrc *MediaRequestCreate) SetNillableUserID(id *int) *MediaRequestCreate {
	if id != nil {
		mrc = mrc.SetUserID(*id)
	}
	return mrc
}

// SetUser sets the "user" edge to the User entity.
func (mrc *MediaRequestCreate) SetUser(u *User) *MediaRequestCreate {
	return mrc.SetUserID(u.ID)
}

// Mutation returns the MediaRequestMutation object of the builder.
func (mrc *MediaRequestCreate) Mutation() *MediaRequestMutation {
	return mrc.mutation
}

// Save creates the MediaRequest in the database.
func (mrc *MediaRequestCreate) Save(ctx context.Context) (*MediaRequest, error) {
	var (
		err  error
		node *MediaRequest
	)
	if len(mrc.hooks) == 0 {
		if err = mrc.check(); err != nil {
			return nil, err
		}
		node, err = mrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MediaRequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mrc.check(); err != nil {
				return nil, err
			}
			mrc.mutation = mutation
			if node, err = mrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mrc.hooks) - 1; i >= 0; i-- {
			if mrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mrc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mrc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MediaRequest)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MediaRequestMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mrc *MediaRequestCreate) SaveX(ctx context.Context) *MediaRequest {
	v, err := mrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrc *MediaRequestCreate) Exec(ctx context.Context) error {
	_, err := mrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrc *MediaRequestCreate) ExecX(ctx context.Context) {
	if err := mrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mrc *MediaRequestCreate) check() error {
	if _, ok := mrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "MediaRequest.status"`)}
	}
	if _, ok := mrc.mutation.MediaType(); !ok {
		return &ValidationError{Name: "mediaType", err: errors.New(`ent: missing required field "MediaRequest.mediaType"`)}
	}
	if v, ok := mrc.mutation.MediaType(); ok {
		if err := mediarequest.MediaTypeValidator(v); err != nil {
			return &ValidationError{Name: "mediaType", err: fmt.Errorf(`ent: validator failed for field "MediaRequest.mediaType": %w`, err)}
		}
	}
	if _, ok := mrc.mutation.RequestId(); !ok {
		return &ValidationError{Name: "requestId", err: errors.New(`ent: missing required field "MediaRequest.requestId"`)}
	}
	return nil
}

func (mrc *MediaRequestCreate) sqlSave(ctx context.Context) (*MediaRequest, error) {
	_node, _spec := mrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mrc *MediaRequestCreate) createSpec() (*MediaRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &MediaRequest{config: mrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mediarequest.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mediarequest.FieldID,
			},
		}
	)
	if value, ok := mrc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediarequest.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := mrc.mutation.MediaType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mediarequest.FieldMediaType,
		})
		_node.MediaType = value
	}
	if value, ok := mrc.mutation.RequestId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediarequest.FieldRequestId,
		})
		_node.RequestId = value
	}
	if nodes := mrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mediarequest.UserTable,
			Columns: []string{mediarequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_media_request = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MediaRequestCreateBulk is the builder for creating many MediaRequest entities in bulk.
type MediaRequestCreateBulk struct {
	config
	builders []*MediaRequestCreate
}

// Save creates the MediaRequest entities in the database.
func (mrcb *MediaRequestCreateBulk) Save(ctx context.Context) ([]*MediaRequest, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mrcb.builders))
	nodes := make([]*MediaRequest, len(mrcb.builders))
	mutators := make([]Mutator, len(mrcb.builders))
	for i := range mrcb.builders {
		func(i int, root context.Context) {
			builder := mrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MediaRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mrcb *MediaRequestCreateBulk) SaveX(ctx context.Context) []*MediaRequest {
	v, err := mrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrcb *MediaRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := mrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrcb *MediaRequestCreateBulk) ExecX(ctx context.Context) {
	if err := mrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
