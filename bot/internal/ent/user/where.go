// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"gitlab.com/h3mmy/bloopyboi/bot/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// BloopyId applies equality check predicate on the "bloopyId" field. It's identical to BloopyIdEQ.
func BloopyId(v uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBloopyId), v))
	})
}

// Discordid applies equality check predicate on the "discordid" field. It's identical to DiscordidEQ.
func Discordid(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordid), v))
	})
}

// Plexid applies equality check predicate on the "Plexid" field. It's identical to PlexidEQ.
func Plexid(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlexid), v))
	})
}

// Bloopnetid applies equality check predicate on the "bloopnetid" field. It's identical to BloopnetidEQ.
func Bloopnetid(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBloopnetid), v))
	})
}

// Authentikpkid applies equality check predicate on the "authentikpkid" field. It's identical to AuthentikpkidEQ.
func Authentikpkid(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthentikpkid), v))
	})
}

// BloopyIdEQ applies the EQ predicate on the "bloopyId" field.
func BloopyIdEQ(v uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBloopyId), v))
	})
}

// BloopyIdNEQ applies the NEQ predicate on the "bloopyId" field.
func BloopyIdNEQ(v uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBloopyId), v))
	})
}

// BloopyIdIn applies the In predicate on the "bloopyId" field.
func BloopyIdIn(vs ...uuid.UUID) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBloopyId), v...))
	})
}

// BloopyIdNotIn applies the NotIn predicate on the "bloopyId" field.
func BloopyIdNotIn(vs ...uuid.UUID) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBloopyId), v...))
	})
}

// BloopyIdGT applies the GT predicate on the "bloopyId" field.
func BloopyIdGT(v uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBloopyId), v))
	})
}

// BloopyIdGTE applies the GTE predicate on the "bloopyId" field.
func BloopyIdGTE(v uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBloopyId), v))
	})
}

// BloopyIdLT applies the LT predicate on the "bloopyId" field.
func BloopyIdLT(v uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBloopyId), v))
	})
}

// BloopyIdLTE applies the LTE predicate on the "bloopyId" field.
func BloopyIdLTE(v uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBloopyId), v))
	})
}

// DiscordidEQ applies the EQ predicate on the "discordid" field.
func DiscordidEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordid), v))
	})
}

// DiscordidNEQ applies the NEQ predicate on the "discordid" field.
func DiscordidNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscordid), v))
	})
}

// DiscordidIn applies the In predicate on the "discordid" field.
func DiscordidIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDiscordid), v...))
	})
}

// DiscordidNotIn applies the NotIn predicate on the "discordid" field.
func DiscordidNotIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDiscordid), v...))
	})
}

// DiscordidGT applies the GT predicate on the "discordid" field.
func DiscordidGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscordid), v))
	})
}

// DiscordidGTE applies the GTE predicate on the "discordid" field.
func DiscordidGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscordid), v))
	})
}

// DiscordidLT applies the LT predicate on the "discordid" field.
func DiscordidLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscordid), v))
	})
}

// DiscordidLTE applies the LTE predicate on the "discordid" field.
func DiscordidLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscordid), v))
	})
}

// DiscordidContains applies the Contains predicate on the "discordid" field.
func DiscordidContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiscordid), v))
	})
}

// DiscordidHasPrefix applies the HasPrefix predicate on the "discordid" field.
func DiscordidHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiscordid), v))
	})
}

// DiscordidHasSuffix applies the HasSuffix predicate on the "discordid" field.
func DiscordidHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiscordid), v))
	})
}

// DiscordidEqualFold applies the EqualFold predicate on the "discordid" field.
func DiscordidEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiscordid), v))
	})
}

// DiscordidContainsFold applies the ContainsFold predicate on the "discordid" field.
func DiscordidContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiscordid), v))
	})
}

// PlexidEQ applies the EQ predicate on the "Plexid" field.
func PlexidEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlexid), v))
	})
}

// PlexidNEQ applies the NEQ predicate on the "Plexid" field.
func PlexidNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlexid), v))
	})
}

// PlexidIn applies the In predicate on the "Plexid" field.
func PlexidIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlexid), v...))
	})
}

// PlexidNotIn applies the NotIn predicate on the "Plexid" field.
func PlexidNotIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlexid), v...))
	})
}

// PlexidGT applies the GT predicate on the "Plexid" field.
func PlexidGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlexid), v))
	})
}

// PlexidGTE applies the GTE predicate on the "Plexid" field.
func PlexidGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlexid), v))
	})
}

// PlexidLT applies the LT predicate on the "Plexid" field.
func PlexidLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlexid), v))
	})
}

// PlexidLTE applies the LTE predicate on the "Plexid" field.
func PlexidLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlexid), v))
	})
}

// PlexidContains applies the Contains predicate on the "Plexid" field.
func PlexidContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlexid), v))
	})
}

// PlexidHasPrefix applies the HasPrefix predicate on the "Plexid" field.
func PlexidHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlexid), v))
	})
}

// PlexidHasSuffix applies the HasSuffix predicate on the "Plexid" field.
func PlexidHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlexid), v))
	})
}

// PlexidEqualFold applies the EqualFold predicate on the "Plexid" field.
func PlexidEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlexid), v))
	})
}

// PlexidContainsFold applies the ContainsFold predicate on the "Plexid" field.
func PlexidContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlexid), v))
	})
}

// BloopnetidEQ applies the EQ predicate on the "bloopnetid" field.
func BloopnetidEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBloopnetid), v))
	})
}

// BloopnetidNEQ applies the NEQ predicate on the "bloopnetid" field.
func BloopnetidNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBloopnetid), v))
	})
}

// BloopnetidIn applies the In predicate on the "bloopnetid" field.
func BloopnetidIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBloopnetid), v...))
	})
}

// BloopnetidNotIn applies the NotIn predicate on the "bloopnetid" field.
func BloopnetidNotIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBloopnetid), v...))
	})
}

// BloopnetidGT applies the GT predicate on the "bloopnetid" field.
func BloopnetidGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBloopnetid), v))
	})
}

// BloopnetidGTE applies the GTE predicate on the "bloopnetid" field.
func BloopnetidGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBloopnetid), v))
	})
}

// BloopnetidLT applies the LT predicate on the "bloopnetid" field.
func BloopnetidLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBloopnetid), v))
	})
}

// BloopnetidLTE applies the LTE predicate on the "bloopnetid" field.
func BloopnetidLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBloopnetid), v))
	})
}

// BloopnetidContains applies the Contains predicate on the "bloopnetid" field.
func BloopnetidContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBloopnetid), v))
	})
}

// BloopnetidHasPrefix applies the HasPrefix predicate on the "bloopnetid" field.
func BloopnetidHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBloopnetid), v))
	})
}

// BloopnetidHasSuffix applies the HasSuffix predicate on the "bloopnetid" field.
func BloopnetidHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBloopnetid), v))
	})
}

// BloopnetidEqualFold applies the EqualFold predicate on the "bloopnetid" field.
func BloopnetidEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBloopnetid), v))
	})
}

// BloopnetidContainsFold applies the ContainsFold predicate on the "bloopnetid" field.
func BloopnetidContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBloopnetid), v))
	})
}

// AuthentikpkidEQ applies the EQ predicate on the "authentikpkid" field.
func AuthentikpkidEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthentikpkid), v))
	})
}

// AuthentikpkidNEQ applies the NEQ predicate on the "authentikpkid" field.
func AuthentikpkidNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAuthentikpkid), v))
	})
}

// AuthentikpkidIn applies the In predicate on the "authentikpkid" field.
func AuthentikpkidIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAuthentikpkid), v...))
	})
}

// AuthentikpkidNotIn applies the NotIn predicate on the "authentikpkid" field.
func AuthentikpkidNotIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAuthentikpkid), v...))
	})
}

// AuthentikpkidGT applies the GT predicate on the "authentikpkid" field.
func AuthentikpkidGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAuthentikpkid), v))
	})
}

// AuthentikpkidGTE applies the GTE predicate on the "authentikpkid" field.
func AuthentikpkidGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAuthentikpkid), v))
	})
}

// AuthentikpkidLT applies the LT predicate on the "authentikpkid" field.
func AuthentikpkidLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAuthentikpkid), v))
	})
}

// AuthentikpkidLTE applies the LTE predicate on the "authentikpkid" field.
func AuthentikpkidLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAuthentikpkid), v))
	})
}

// AuthentikpkidContains applies the Contains predicate on the "authentikpkid" field.
func AuthentikpkidContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAuthentikpkid), v))
	})
}

// AuthentikpkidHasPrefix applies the HasPrefix predicate on the "authentikpkid" field.
func AuthentikpkidHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAuthentikpkid), v))
	})
}

// AuthentikpkidHasSuffix applies the HasSuffix predicate on the "authentikpkid" field.
func AuthentikpkidHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAuthentikpkid), v))
	})
}

// AuthentikpkidEqualFold applies the EqualFold predicate on the "authentikpkid" field.
func AuthentikpkidEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAuthentikpkid), v))
	})
}

// AuthentikpkidContainsFold applies the ContainsFold predicate on the "authentikpkid" field.
func AuthentikpkidContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAuthentikpkid), v))
	})
}

// HasGroups applies the HasEdge predicate on the "groups" edge.
func HasGroups() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, GroupsTable, GroupsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupsWith applies the HasEdge predicate on the "groups" edge with a given conditions (other predicates).
func HasGroupsWith(preds ...predicate.Group) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, GroupsTable, GroupsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMediaRequest applies the HasEdge predicate on the "mediaRequest" edge.
func HasMediaRequest() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MediaRequestTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MediaRequestTable, MediaRequestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaRequestWith applies the HasEdge predicate on the "mediaRequest" edge with a given conditions (other predicates).
func HasMediaRequestWith(preds ...predicate.MediaRequest) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MediaRequestInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MediaRequestTable, MediaRequestColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
