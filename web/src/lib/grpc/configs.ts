/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.3
 * source: configs.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace config {
    export class DiscordConfigurationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[5], [6], [7], [8]];
        constructor(data?: any[] | ({
            app_name?: string;
            app_client_id?: string;
            app_client_secret?: string;
            app_token?: string;
        } & (({
            app_public_key?: string;
        }) | ({
            tos_url?: string;
        }) | ({
            privacy_url?: string;
        }) | ({
            avatar_uri?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("app_name" in data && data.app_name != undefined) {
                    this.app_name = data.app_name;
                }
                if ("app_client_id" in data && data.app_client_id != undefined) {
                    this.app_client_id = data.app_client_id;
                }
                if ("app_client_secret" in data && data.app_client_secret != undefined) {
                    this.app_client_secret = data.app_client_secret;
                }
                if ("app_token" in data && data.app_token != undefined) {
                    this.app_token = data.app_token;
                }
                if ("app_public_key" in data && data.app_public_key != undefined) {
                    this.app_public_key = data.app_public_key;
                }
                if ("tos_url" in data && data.tos_url != undefined) {
                    this.tos_url = data.tos_url;
                }
                if ("privacy_url" in data && data.privacy_url != undefined) {
                    this.privacy_url = data.privacy_url;
                }
                if ("avatar_uri" in data && data.avatar_uri != undefined) {
                    this.avatar_uri = data.avatar_uri;
                }
            }
        }
        get app_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set app_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get app_client_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set app_client_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get app_client_secret() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set app_client_secret(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get app_token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set app_token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get app_public_key() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set app_public_key(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_app_public_key() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get tos_url() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set tos_url(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[1], value);
        }
        get has_tos_url() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get privacy_url() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set privacy_url(value: string) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[2], value);
        }
        get has_privacy_url() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get avatar_uri() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set avatar_uri(value: string) {
            pb_1.Message.setOneofField(this, 8, this.#one_of_decls[3], value);
        }
        get has_avatar_uri() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get _app_public_key() {
            const cases: {
                [index: number]: "none" | "app_public_key";
            } = {
                0: "none",
                5: "app_public_key"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _tos_url() {
            const cases: {
                [index: number]: "none" | "tos_url";
            } = {
                0: "none",
                6: "tos_url"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _privacy_url() {
            const cases: {
                [index: number]: "none" | "privacy_url";
            } = {
                0: "none",
                7: "privacy_url"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        get _avatar_uri() {
            const cases: {
                [index: number]: "none" | "avatar_uri";
            } = {
                0: "none",
                8: "avatar_uri"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        static fromObject(data: {
            app_name?: string;
            app_client_id?: string;
            app_client_secret?: string;
            app_token?: string;
            app_public_key?: string;
            tos_url?: string;
            privacy_url?: string;
            avatar_uri?: string;
        }): DiscordConfigurationRequest {
            const message = new DiscordConfigurationRequest({});
            if (data.app_name != null) {
                message.app_name = data.app_name;
            }
            if (data.app_client_id != null) {
                message.app_client_id = data.app_client_id;
            }
            if (data.app_client_secret != null) {
                message.app_client_secret = data.app_client_secret;
            }
            if (data.app_token != null) {
                message.app_token = data.app_token;
            }
            if (data.app_public_key != null) {
                message.app_public_key = data.app_public_key;
            }
            if (data.tos_url != null) {
                message.tos_url = data.tos_url;
            }
            if (data.privacy_url != null) {
                message.privacy_url = data.privacy_url;
            }
            if (data.avatar_uri != null) {
                message.avatar_uri = data.avatar_uri;
            }
            return message;
        }
        toObject() {
            const data: {
                app_name?: string;
                app_client_id?: string;
                app_client_secret?: string;
                app_token?: string;
                app_public_key?: string;
                tos_url?: string;
                privacy_url?: string;
                avatar_uri?: string;
            } = {};
            if (this.app_name != null) {
                data.app_name = this.app_name;
            }
            if (this.app_client_id != null) {
                data.app_client_id = this.app_client_id;
            }
            if (this.app_client_secret != null) {
                data.app_client_secret = this.app_client_secret;
            }
            if (this.app_token != null) {
                data.app_token = this.app_token;
            }
            if (this.app_public_key != null) {
                data.app_public_key = this.app_public_key;
            }
            if (this.tos_url != null) {
                data.tos_url = this.tos_url;
            }
            if (this.privacy_url != null) {
                data.privacy_url = this.privacy_url;
            }
            if (this.avatar_uri != null) {
                data.avatar_uri = this.avatar_uri;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.app_name.length)
                writer.writeString(1, this.app_name);
            if (this.app_client_id.length)
                writer.writeString(2, this.app_client_id);
            if (this.app_client_secret.length)
                writer.writeString(3, this.app_client_secret);
            if (this.app_token.length)
                writer.writeString(4, this.app_token);
            if (this.has_app_public_key)
                writer.writeString(5, this.app_public_key);
            if (this.has_tos_url)
                writer.writeString(6, this.tos_url);
            if (this.has_privacy_url)
                writer.writeString(7, this.privacy_url);
            if (this.has_avatar_uri)
                writer.writeString(8, this.avatar_uri);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscordConfigurationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscordConfigurationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.app_name = reader.readString();
                        break;
                    case 2:
                        message.app_client_id = reader.readString();
                        break;
                    case 3:
                        message.app_client_secret = reader.readString();
                        break;
                    case 4:
                        message.app_token = reader.readString();
                        break;
                    case 5:
                        message.app_public_key = reader.readString();
                        break;
                    case 6:
                        message.tos_url = reader.readString();
                        break;
                    case 7:
                        message.privacy_url = reader.readString();
                        break;
                    case 8:
                        message.avatar_uri = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscordConfigurationRequest {
            return DiscordConfigurationRequest.deserialize(bytes);
        }
    }
    export class DiscordRole extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            role_id?: number;
        }) | ({
            role_name?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("role_id" in data && data.role_id != undefined) {
                    this.role_id = data.role_id;
                }
                if ("role_name" in data && data.role_name != undefined) {
                    this.role_name = data.role_name;
                }
            }
        }
        get role_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set role_id(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_role_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get role_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set role_name(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_role_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _role_id() {
            const cases: {
                [index: number]: "none" | "role_id";
            } = {
                0: "none",
                1: "role_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _role_name() {
            const cases: {
                [index: number]: "none" | "role_name";
            } = {
                0: "none",
                2: "role_name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            role_id?: number;
            role_name?: string;
        }): DiscordRole {
            const message = new DiscordRole({});
            if (data.role_id != null) {
                message.role_id = data.role_id;
            }
            if (data.role_name != null) {
                message.role_name = data.role_name;
            }
            return message;
        }
        toObject() {
            const data: {
                role_id?: number;
                role_name?: string;
            } = {};
            if (this.role_id != null) {
                data.role_id = this.role_id;
            }
            if (this.role_name != null) {
                data.role_name = this.role_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_role_id)
                writer.writeInt64(1, this.role_id);
            if (this.has_role_name)
                writer.writeString(2, this.role_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscordRole {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscordRole();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.role_id = reader.readInt64();
                        break;
                    case 2:
                        message.role_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscordRole {
            return DiscordRole.deserialize(bytes);
        }
    }
    export class DiscordChannel extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            channel_id?: number;
        }) | ({
            channel_name?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("channel_name" in data && data.channel_name != undefined) {
                    this.channel_name = data.channel_name;
                }
            }
        }
        get channel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set channel_id(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_channel_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get channel_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set channel_name(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_channel_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _channel_id() {
            const cases: {
                [index: number]: "none" | "channel_id";
            } = {
                0: "none",
                1: "channel_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _channel_name() {
            const cases: {
                [index: number]: "none" | "channel_name";
            } = {
                0: "none",
                2: "channel_name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            channel_id?: number;
            channel_name?: string;
        }): DiscordChannel {
            const message = new DiscordChannel({});
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.channel_name != null) {
                message.channel_name = data.channel_name;
            }
            return message;
        }
        toObject() {
            const data: {
                channel_id?: number;
                channel_name?: string;
            } = {};
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.channel_name != null) {
                data.channel_name = this.channel_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_channel_id)
                writer.writeInt64(1, this.channel_id);
            if (this.has_channel_name)
                writer.writeString(2, this.channel_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscordChannel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscordChannel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.channel_id = reader.readInt64();
                        break;
                    case 2:
                        message.channel_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscordChannel {
            return DiscordChannel.deserialize(bytes);
        }
    }
    export class DiscordGuildCommandConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            guild_id?: string;
            command_name?: string;
            allowed_role_ids?: DiscordRole[];
            allowed_channels?: DiscordChannel[];
        } & (({
            command_enabled?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("guild_id" in data && data.guild_id != undefined) {
                    this.guild_id = data.guild_id;
                }
                if ("command_name" in data && data.command_name != undefined) {
                    this.command_name = data.command_name;
                }
                if ("command_enabled" in data && data.command_enabled != undefined) {
                    this.command_enabled = data.command_enabled;
                }
                if ("allowed_role_ids" in data && data.allowed_role_ids != undefined) {
                    this.allowed_role_ids = data.allowed_role_ids;
                }
                if ("allowed_channels" in data && data.allowed_channels != undefined) {
                    this.allowed_channels = data.allowed_channels;
                }
            }
        }
        get guild_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set guild_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get command_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set command_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get command_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set command_enabled(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_command_enabled() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get allowed_role_ids() {
            return pb_1.Message.getRepeatedWrapperField(this, DiscordRole, 4) as DiscordRole[];
        }
        set allowed_role_ids(value: DiscordRole[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get allowed_channels() {
            return pb_1.Message.getRepeatedWrapperField(this, DiscordChannel, 5) as DiscordChannel[];
        }
        set allowed_channels(value: DiscordChannel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get _command_enabled() {
            const cases: {
                [index: number]: "none" | "command_enabled";
            } = {
                0: "none",
                3: "command_enabled"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            guild_id?: string;
            command_name?: string;
            command_enabled?: string;
            allowed_role_ids?: ReturnType<typeof DiscordRole.prototype.toObject>[];
            allowed_channels?: ReturnType<typeof DiscordChannel.prototype.toObject>[];
        }): DiscordGuildCommandConfigRequest {
            const message = new DiscordGuildCommandConfigRequest({});
            if (data.guild_id != null) {
                message.guild_id = data.guild_id;
            }
            if (data.command_name != null) {
                message.command_name = data.command_name;
            }
            if (data.command_enabled != null) {
                message.command_enabled = data.command_enabled;
            }
            if (data.allowed_role_ids != null) {
                message.allowed_role_ids = data.allowed_role_ids.map(item => DiscordRole.fromObject(item));
            }
            if (data.allowed_channels != null) {
                message.allowed_channels = data.allowed_channels.map(item => DiscordChannel.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                guild_id?: string;
                command_name?: string;
                command_enabled?: string;
                allowed_role_ids?: ReturnType<typeof DiscordRole.prototype.toObject>[];
                allowed_channels?: ReturnType<typeof DiscordChannel.prototype.toObject>[];
            } = {};
            if (this.guild_id != null) {
                data.guild_id = this.guild_id;
            }
            if (this.command_name != null) {
                data.command_name = this.command_name;
            }
            if (this.command_enabled != null) {
                data.command_enabled = this.command_enabled;
            }
            if (this.allowed_role_ids != null) {
                data.allowed_role_ids = this.allowed_role_ids.map((item: DiscordRole) => item.toObject());
            }
            if (this.allowed_channels != null) {
                data.allowed_channels = this.allowed_channels.map((item: DiscordChannel) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.guild_id.length)
                writer.writeString(1, this.guild_id);
            if (this.command_name.length)
                writer.writeString(2, this.command_name);
            if (this.has_command_enabled)
                writer.writeString(3, this.command_enabled);
            if (this.allowed_role_ids.length)
                writer.writeRepeatedMessage(4, this.allowed_role_ids, (item: DiscordRole) => item.serialize(writer));
            if (this.allowed_channels.length)
                writer.writeRepeatedMessage(5, this.allowed_channels, (item: DiscordChannel) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscordGuildCommandConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscordGuildCommandConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.guild_id = reader.readString();
                        break;
                    case 2:
                        message.command_name = reader.readString();
                        break;
                    case 3:
                        message.command_enabled = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.allowed_role_ids, () => pb_1.Message.addToRepeatedWrapperField(message, 4, DiscordRole.deserialize(reader), DiscordRole));
                        break;
                    case 5:
                        reader.readMessage(message.allowed_channels, () => pb_1.Message.addToRepeatedWrapperField(message, 5, DiscordChannel.deserialize(reader), DiscordChannel));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscordGuildCommandConfigRequest {
            return DiscordGuildCommandConfigRequest.deserialize(bytes);
        }
    }
    export class LoggingConfigurationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            level?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
            }
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set level(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            level?: string;
        }): LoggingConfigurationRequest {
            const message = new LoggingConfigurationRequest({});
            if (data.level != null) {
                message.level = data.level;
            }
            return message;
        }
        toObject() {
            const data: {
                level?: string;
            } = {};
            if (this.level != null) {
                data.level = this.level;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.level.length)
                writer.writeString(1, this.level);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoggingConfigurationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoggingConfigurationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.level = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoggingConfigurationRequest {
            return LoggingConfigurationRequest.deserialize(bytes);
        }
    }
}
