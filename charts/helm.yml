# -- TODO
.helm:
  image:
    name: alpine/helm:latest
    entrypoint: [""]
  variables:
    CHART_NAME: bloopyboi
    REPO_NAME: bloopyboi-charts
    HELM_REPO_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/stable/charts"
  basic_publish_script:
    - helm repo add --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $REPO_NAME $HELM_REPO_URL
    - helm package $CHART_NAME
    - helm push ${CHART_NAME}.tgz $REPO_NAME
  all_charts:
    before_script:
      - set -eo pipefail
      # Activate werf
      - type trdl && . $(trdl use werf 1.2 stable)
      - type werf && source $(werf ci-env GitLab --as-file)
      - |
        # Update the available Helm repo via werf
        werf helm repo update
        # Look for all the files with chart descriptions and use them to build dependencies
        find . -type f -regex '.*/\(Chart.ya?ml\|requirements.ya?ml\)' -exec \
          sh -c 'werf helm dependency build $(dirname "{}") --skip-refresh' \;

  default:
    before_script:
    - set -eo pipefail
    - type trdl && . $(trdl use werf 1.2 stable)
    - type werf && source $(werf ci-env GitLab --as-file)

  .base_werf_publish_charts:
    stage: publish-charts
    script: |
      werf helm repo add --force-update --username $MAIN_REPO_PULL --password $MAIN_REPO_PULL_SECRET $MAIN_REPO_NAME $MAIN_HELM_URL
      werf helm repo update
      werf helm dependency update .helm/
      find .helm/charts -mindepth 1 -maxdepth 1 -type f -name '*.tgz' -exec sh -c 'basename "$0"' '{}' \; | while read package; do
        CHART_NAME=$(echo $package | sed -e 's/-[0-9]\.[0-9]\.[0-9]\.tgz$//g')
        CHART_VERSION=$(echo $package | sed -e 's/^[a-zA-Z-].*-//g' | sed -e 's/.tgz$//g')
        CHART_EXISTS=$(werf helm search repo $REPO_NAME | { egrep "$REPO_NAME/$CHART_NAME\s" || true; } | { egrep "$CHART_VERSION\s" || true; } | wc -l)
        if [ $CHART_EXISTS = 0 ]; then
          curl -sSl --post301 --form "chart=@.helm/charts/$package" --user "$REPO_PUSH:$REPO_PUSH_SECRET" "$REPO_URL"
        else
          echo "Chart package $package already exists in Helm repo! Skip!"
        fi
      done
      werf helm repo add --username $REPO_PULL --password $REPO_PULL_SECRET $REPO_NAME $HELM_URL
      werf helm repo update
      echo "Configuring the local PC."
      echo "REPO_URL: $REPO_URL"
      echo "werf helm repo add --username $REPO_PULL --password $REPO_PULL_SECRET $REPO_NAME $HELM_URL"
    rules:
      - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
        when: on_success
        allow_failure: true

  werf_publish_charts:
    extends:
      - .base_werf_publish_charts
    tags:
      - werf
