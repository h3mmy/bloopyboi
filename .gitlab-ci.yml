.helm:
  image:
    name: alpine/helm:latest
    entrypoint: [""]
  variables:
    CHART_NAME: bloopyboi
    REPO_NAME: bloopyboi-charts
    HELM_REPO_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/stable/charts"
  basic_publish_script:
    - helm repo add --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $REPO_NAME $HELM_REPO_URL
    - helm package $CHART_NAME
    - helm push ${CHART_NAME}.tgz $REPO_NAME

.changes:
  gopkg: &gopkg_changes
    - bot/*
    - main.go
    - VERSION
    - go.mod
    - go.sum
    - Dockerfile
    - makefile
  helm: &helm_changes
    - charts/*

.docker:
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

stages:
  - lint
  - build
  - push
  - prepare
  - release
  - publish_charts
  - deploy

docker_build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - !reference [.docker, before_script]
  script:
    # Doesn't fail if latest image not found
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    # Builds the project
    - >
      docker build
      --pull
      --cache-from "$CI_REGISTRY_IMAGE:latest"
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --label "org.opencontainers.image.license=Apache-2.0"
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
      changes: *gopkg_changes

# Tags only the $CI_DEFAULT_BRANCH as latest
push_latest:
  image: docker:latest
  services:
    - docker:dind
  variables:
    # Disable fresh pull of source
    GIT_STRATEGY: none
  stage: push
  before_script:
    - - !reference [.docker, before_script]
  only:
    - tags
    - main@h3mmy/bloopyboi
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest

push_tag:
  image: docker:latest
  services:
    - docker:dind
  variables:
    GIT_STRATEGY: none
  stage: push
  only:
    - tags
  before_script:
    - - !reference [.docker, before_script]
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

prepare_release:
  stage: prepare
  needs:
    - job: docker_build
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - echo "EXTRA_DESCRIPTION=blahblah" >> variables.env
    - echo "TAG=v$(cat VERSION)" >> variables.env
  artifacts:
    reports:
      dotenv: variables.env

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prepare_release
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed or merged to the default branch
    - if: $CI_DEPLOY_FREEZE == null
  script:
    - echo "running release_job for $TAG"
  release:
    name: 'Release $TAG'
    description: 'Created using the release-cli $EXTRA_DESCRIPTION'  # $EXTRA_DESCRIPTION and the $TAG
    tag_name: '$TAG'                                                 # variables must be defined elsewhere
    ref: '$CI_COMMIT_SHA'                                            # in the pipeline. For example, in the
    milestones:                                                      # prepare_job
      - $CI_MERGE_REQUEST_MILESTONE
    # Disable released_at to use current time
    # released_at: $CI_COMMIT_TIMESTAMP
    # assets:
    #   links:
    #     - name: 'asset1'
    #       url: 'https://example.com/assets/1'
    #     - name: 'asset2'
    #       url: 'https://example.com/assets/2'
    #       filepath: '/pretty/url/1' # optional
    #       link_type: 'other' # optional

deploy_neutrino:
  stage: deploy
  environment:
    name: neutrino
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_DEPLOY_FREEZE == null
  script:
    - echo "Deploying to Neutrino. Not really though. It can deploy itself."

helm_lint:
  stage: lint
  image: !reference [.helm, image]
  variables: !reference [.helm, variables]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes: *helm_changes
  script:
    - helm lint charts/${CHART_NAME}

helm_publish:
  stage: publish_charts
  needs:
    - helm_lint
  image: !reference [.helm, image]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes: *helm_changes
  variables: !reference [.helm, variables]
  script: !reference [.helm, basic_publish_script]
