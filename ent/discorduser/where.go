// Code generated by ent, DO NOT EDIT.

package discorduser

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldLTE(FieldID, id))
}

// Discordid applies equality check predicate on the "discordid" field. It's identical to DiscordidEQ.
func Discordid(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldEQ(FieldDiscordid, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldEQ(FieldUsername, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldEQ(FieldEmail, v))
}

// Discriminator applies equality check predicate on the "discriminator" field. It's identical to DiscriminatorEQ.
func Discriminator(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldEQ(FieldDiscriminator, v))
}

// DiscordidEQ applies the EQ predicate on the "discordid" field.
func DiscordidEQ(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldEQ(FieldDiscordid, v))
}

// DiscordidNEQ applies the NEQ predicate on the "discordid" field.
func DiscordidNEQ(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldNEQ(FieldDiscordid, v))
}

// DiscordidIn applies the In predicate on the "discordid" field.
func DiscordidIn(vs ...string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldIn(FieldDiscordid, vs...))
}

// DiscordidNotIn applies the NotIn predicate on the "discordid" field.
func DiscordidNotIn(vs ...string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldNotIn(FieldDiscordid, vs...))
}

// DiscordidGT applies the GT predicate on the "discordid" field.
func DiscordidGT(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldGT(FieldDiscordid, v))
}

// DiscordidGTE applies the GTE predicate on the "discordid" field.
func DiscordidGTE(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldGTE(FieldDiscordid, v))
}

// DiscordidLT applies the LT predicate on the "discordid" field.
func DiscordidLT(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldLT(FieldDiscordid, v))
}

// DiscordidLTE applies the LTE predicate on the "discordid" field.
func DiscordidLTE(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldLTE(FieldDiscordid, v))
}

// DiscordidContains applies the Contains predicate on the "discordid" field.
func DiscordidContains(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldContains(FieldDiscordid, v))
}

// DiscordidHasPrefix applies the HasPrefix predicate on the "discordid" field.
func DiscordidHasPrefix(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldHasPrefix(FieldDiscordid, v))
}

// DiscordidHasSuffix applies the HasSuffix predicate on the "discordid" field.
func DiscordidHasSuffix(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldHasSuffix(FieldDiscordid, v))
}

// DiscordidEqualFold applies the EqualFold predicate on the "discordid" field.
func DiscordidEqualFold(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldEqualFold(FieldDiscordid, v))
}

// DiscordidContainsFold applies the ContainsFold predicate on the "discordid" field.
func DiscordidContainsFold(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldContainsFold(FieldDiscordid, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldContainsFold(FieldUsername, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldContainsFold(FieldEmail, v))
}

// DiscriminatorEQ applies the EQ predicate on the "discriminator" field.
func DiscriminatorEQ(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldEQ(FieldDiscriminator, v))
}

// DiscriminatorNEQ applies the NEQ predicate on the "discriminator" field.
func DiscriminatorNEQ(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldNEQ(FieldDiscriminator, v))
}

// DiscriminatorIn applies the In predicate on the "discriminator" field.
func DiscriminatorIn(vs ...string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldIn(FieldDiscriminator, vs...))
}

// DiscriminatorNotIn applies the NotIn predicate on the "discriminator" field.
func DiscriminatorNotIn(vs ...string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldNotIn(FieldDiscriminator, vs...))
}

// DiscriminatorGT applies the GT predicate on the "discriminator" field.
func DiscriminatorGT(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldGT(FieldDiscriminator, v))
}

// DiscriminatorGTE applies the GTE predicate on the "discriminator" field.
func DiscriminatorGTE(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldGTE(FieldDiscriminator, v))
}

// DiscriminatorLT applies the LT predicate on the "discriminator" field.
func DiscriminatorLT(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldLT(FieldDiscriminator, v))
}

// DiscriminatorLTE applies the LTE predicate on the "discriminator" field.
func DiscriminatorLTE(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldLTE(FieldDiscriminator, v))
}

// DiscriminatorContains applies the Contains predicate on the "discriminator" field.
func DiscriminatorContains(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldContains(FieldDiscriminator, v))
}

// DiscriminatorHasPrefix applies the HasPrefix predicate on the "discriminator" field.
func DiscriminatorHasPrefix(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldHasPrefix(FieldDiscriminator, v))
}

// DiscriminatorHasSuffix applies the HasSuffix predicate on the "discriminator" field.
func DiscriminatorHasSuffix(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldHasSuffix(FieldDiscriminator, v))
}

// DiscriminatorIsNil applies the IsNil predicate on the "discriminator" field.
func DiscriminatorIsNil() predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldIsNull(FieldDiscriminator))
}

// DiscriminatorNotNil applies the NotNil predicate on the "discriminator" field.
func DiscriminatorNotNil() predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldNotNull(FieldDiscriminator))
}

// DiscriminatorEqualFold applies the EqualFold predicate on the "discriminator" field.
func DiscriminatorEqualFold(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldEqualFold(FieldDiscriminator, v))
}

// DiscriminatorContainsFold applies the ContainsFold predicate on the "discriminator" field.
func DiscriminatorContainsFold(v string) predicate.DiscordUser {
	return predicate.DiscordUser(sql.FieldContainsFold(FieldDiscriminator, v))
}

// HasGuilds applies the HasEdge predicate on the "guilds" edge.
func HasGuilds() predicate.DiscordUser {
	return predicate.DiscordUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, GuildsTable, GuildsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuildsWith applies the HasEdge predicate on the "guilds" edge with a given conditions (other predicates).
func HasGuildsWith(preds ...predicate.DiscordGuild) predicate.DiscordUser {
	return predicate.DiscordUser(func(s *sql.Selector) {
		step := newGuildsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDiscordMessages applies the HasEdge predicate on the "discord_messages" edge.
func HasDiscordMessages() predicate.DiscordUser {
	return predicate.DiscordUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DiscordMessagesTable, DiscordMessagesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiscordMessagesWith applies the HasEdge predicate on the "discord_messages" edge with a given conditions (other predicates).
func HasDiscordMessagesWith(preds ...predicate.DiscordMessage) predicate.DiscordUser {
	return predicate.DiscordUser(func(s *sql.Selector) {
		step := newDiscordMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMediaRequests applies the HasEdge predicate on the "media_requests" edge.
func HasMediaRequests() predicate.DiscordUser {
	return predicate.DiscordUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MediaRequestsTable, MediaRequestsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaRequestsWith applies the HasEdge predicate on the "media_requests" edge with a given conditions (other predicates).
func HasMediaRequestsWith(preds ...predicate.MediaRequest) predicate.DiscordUser {
	return predicate.DiscordUser(func(s *sql.Selector) {
		step := newMediaRequestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DiscordUser) predicate.DiscordUser {
	return predicate.DiscordUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DiscordUser) predicate.DiscordUser {
	return predicate.DiscordUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DiscordUser) predicate.DiscordUser {
	return predicate.DiscordUser(sql.NotPredicates(p))
}
