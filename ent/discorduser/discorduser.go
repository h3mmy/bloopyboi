// Code generated by ent, DO NOT EDIT.

package discorduser

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the discorduser type in the database.
	Label = "discord_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDiscordid holds the string denoting the discordid field in the database.
	FieldDiscordid = "discordid"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldDiscriminator holds the string denoting the discriminator field in the database.
	FieldDiscriminator = "discriminator"
	// EdgeGuilds holds the string denoting the guilds edge name in mutations.
	EdgeGuilds = "guilds"
	// EdgeDiscordMessages holds the string denoting the discord_messages edge name in mutations.
	EdgeDiscordMessages = "discord_messages"
	// EdgeMediaRequests holds the string denoting the media_requests edge name in mutations.
	EdgeMediaRequests = "media_requests"
	// EdgeMessageReactions holds the string denoting the message_reactions edge name in mutations.
	EdgeMessageReactions = "message_reactions"
	// Table holds the table name of the discorduser in the database.
	Table = "discord_users"
	// GuildsTable is the table that holds the guilds relation/edge. The primary key declared below.
	GuildsTable = "discord_guild_members"
	// GuildsInverseTable is the table name for the DiscordGuild entity.
	// It exists in this package in order to avoid circular dependency with the "discordguild" package.
	GuildsInverseTable = "discord_guilds"
	// DiscordMessagesTable is the table that holds the discord_messages relation/edge.
	DiscordMessagesTable = "discord_messages"
	// DiscordMessagesInverseTable is the table name for the DiscordMessage entity.
	// It exists in this package in order to avoid circular dependency with the "discordmessage" package.
	DiscordMessagesInverseTable = "discord_messages"
	// DiscordMessagesColumn is the table column denoting the discord_messages relation/edge.
	DiscordMessagesColumn = "discord_user_discord_messages"
	// MediaRequestsTable is the table that holds the media_requests relation/edge. The primary key declared below.
	MediaRequestsTable = "discord_user_media_requests"
	// MediaRequestsInverseTable is the table name for the MediaRequest entity.
	// It exists in this package in order to avoid circular dependency with the "mediarequest" package.
	MediaRequestsInverseTable = "media_requests"
	// MessageReactionsTable is the table that holds the message_reactions relation/edge.
	MessageReactionsTable = "discord_message_reactions"
	// MessageReactionsInverseTable is the table name for the DiscordMessageReaction entity.
	// It exists in this package in order to avoid circular dependency with the "discordmessagereaction" package.
	MessageReactionsInverseTable = "discord_message_reactions"
	// MessageReactionsColumn is the table column denoting the message_reactions relation/edge.
	MessageReactionsColumn = "discord_user_message_reactions"
)

// Columns holds all SQL columns for discorduser fields.
var Columns = []string{
	FieldID,
	FieldDiscordid,
	FieldUsername,
	FieldEmail,
	FieldDiscriminator,
}

var (
	// GuildsPrimaryKey and GuildsColumn2 are the table columns denoting the
	// primary key for the guilds relation (M2M).
	GuildsPrimaryKey = []string{"discord_guild_id", "discord_user_id"}
	// MediaRequestsPrimaryKey and MediaRequestsColumn2 are the table columns denoting the
	// primary key for the media_requests relation (M2M).
	MediaRequestsPrimaryKey = []string{"discord_user_id", "media_request_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the DiscordUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDiscordid orders the results by the discordid field.
func ByDiscordid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscordid, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByDiscriminator orders the results by the discriminator field.
func ByDiscriminator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscriminator, opts...).ToFunc()
}

// ByGuildsCount orders the results by guilds count.
func ByGuildsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGuildsStep(), opts...)
	}
}

// ByGuilds orders the results by guilds terms.
func ByGuilds(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGuildsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDiscordMessagesCount orders the results by discord_messages count.
func ByDiscordMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDiscordMessagesStep(), opts...)
	}
}

// ByDiscordMessages orders the results by discord_messages terms.
func ByDiscordMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDiscordMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMediaRequestsCount orders the results by media_requests count.
func ByMediaRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMediaRequestsStep(), opts...)
	}
}

// ByMediaRequests orders the results by media_requests terms.
func ByMediaRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMediaRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMessageReactionsCount orders the results by message_reactions count.
func ByMessageReactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessageReactionsStep(), opts...)
	}
}

// ByMessageReactions orders the results by message_reactions terms.
func ByMessageReactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessageReactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGuildsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GuildsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, GuildsTable, GuildsPrimaryKey...),
	)
}
func newDiscordMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DiscordMessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DiscordMessagesTable, DiscordMessagesColumn),
	)
}
func newMediaRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MediaRequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, MediaRequestsTable, MediaRequestsPrimaryKey...),
	)
}
func newMessageReactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessageReactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MessageReactionsTable, MessageReactionsColumn),
	)
}
