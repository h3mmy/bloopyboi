// Code generated by ent, DO NOT EDIT.

package discordchannel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the discordchannel type in the database.
	Label = "discord_channel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldDiscordid holds the string denoting the discordid field in the database.
	FieldDiscordid = "discordid"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldNsfw holds the string denoting the nsfw field in the database.
	FieldNsfw = "nsfw"
	// FieldFlags holds the string denoting the flags field in the database.
	FieldFlags = "flags"
	// EdgeDiscordGuild holds the string denoting the discord_guild edge name in mutations.
	EdgeDiscordGuild = "discord_guild"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// Table holds the table name of the discordchannel in the database.
	Table = "discord_channels"
	// DiscordGuildTable is the table that holds the discord_guild relation/edge. The primary key declared below.
	DiscordGuildTable = "discord_guild_guild_channels"
	// DiscordGuildInverseTable is the table name for the DiscordGuild entity.
	// It exists in this package in order to avoid circular dependency with the "discordguild" package.
	DiscordGuildInverseTable = "discord_guilds"
	// MessagesTable is the table that holds the messages relation/edge.
	MessagesTable = "discord_messages"
	// MessagesInverseTable is the table name for the DiscordMessage entity.
	// It exists in this package in order to avoid circular dependency with the "discordmessage" package.
	MessagesInverseTable = "discord_messages"
	// MessagesColumn is the table column denoting the messages relation/edge.
	MessagesColumn = "discord_channel_messages"
)

// Columns holds all SQL columns for discordchannel fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldDiscordid,
	FieldName,
	FieldType,
	FieldNsfw,
	FieldFlags,
}

var (
	// DiscordGuildPrimaryKey and DiscordGuildColumn2 are the table columns denoting the
	// primary key for the discord_guild relation (M2M).
	DiscordGuildPrimaryKey = []string{"discord_guild_id", "discord_channel_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultNsfw holds the default value on creation for the "nsfw" field.
	DefaultNsfw bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the DiscordChannel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByDiscordid orders the results by the discordid field.
func ByDiscordid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscordid, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByNsfw orders the results by the nsfw field.
func ByNsfw(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNsfw, opts...).ToFunc()
}

// ByFlags orders the results by the flags field.
func ByFlags(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlags, opts...).ToFunc()
}

// ByDiscordGuildCount orders the results by discord_guild count.
func ByDiscordGuildCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDiscordGuildStep(), opts...)
	}
}

// ByDiscordGuild orders the results by discord_guild terms.
func ByDiscordGuild(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDiscordGuildStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMessagesCount orders the results by messages count.
func ByMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessagesStep(), opts...)
	}
}

// ByMessages orders the results by messages terms.
func ByMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDiscordGuildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DiscordGuildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DiscordGuildTable, DiscordGuildPrimaryKey...),
	)
}
func newMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MessagesTable, MessagesColumn),
	)
}
