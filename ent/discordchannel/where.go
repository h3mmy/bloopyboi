// Code generated by ent, DO NOT EDIT.

package discordchannel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/predicate"
	"github.com/h3mmy/bloopyboi/internal/discord"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEQ(FieldUpdateTime, v))
}

// Discordid applies equality check predicate on the "discordid" field. It's identical to DiscordidEQ.
func Discordid(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEQ(FieldDiscordid, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v discord.ChannelType) predicate.DiscordChannel {
	vc := int(v)
	return predicate.DiscordChannel(sql.FieldEQ(FieldType, vc))
}

// Nsfw applies equality check predicate on the "nsfw" field. It's identical to NsfwEQ.
func Nsfw(v bool) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEQ(FieldNsfw, v))
}

// Flags applies equality check predicate on the "flags" field. It's identical to FlagsEQ.
func Flags(v int) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEQ(FieldFlags, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldLTE(FieldUpdateTime, v))
}

// DiscordidEQ applies the EQ predicate on the "discordid" field.
func DiscordidEQ(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEQ(FieldDiscordid, v))
}

// DiscordidNEQ applies the NEQ predicate on the "discordid" field.
func DiscordidNEQ(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldNEQ(FieldDiscordid, v))
}

// DiscordidIn applies the In predicate on the "discordid" field.
func DiscordidIn(vs ...string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldIn(FieldDiscordid, vs...))
}

// DiscordidNotIn applies the NotIn predicate on the "discordid" field.
func DiscordidNotIn(vs ...string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldNotIn(FieldDiscordid, vs...))
}

// DiscordidGT applies the GT predicate on the "discordid" field.
func DiscordidGT(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldGT(FieldDiscordid, v))
}

// DiscordidGTE applies the GTE predicate on the "discordid" field.
func DiscordidGTE(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldGTE(FieldDiscordid, v))
}

// DiscordidLT applies the LT predicate on the "discordid" field.
func DiscordidLT(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldLT(FieldDiscordid, v))
}

// DiscordidLTE applies the LTE predicate on the "discordid" field.
func DiscordidLTE(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldLTE(FieldDiscordid, v))
}

// DiscordidContains applies the Contains predicate on the "discordid" field.
func DiscordidContains(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldContains(FieldDiscordid, v))
}

// DiscordidHasPrefix applies the HasPrefix predicate on the "discordid" field.
func DiscordidHasPrefix(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldHasPrefix(FieldDiscordid, v))
}

// DiscordidHasSuffix applies the HasSuffix predicate on the "discordid" field.
func DiscordidHasSuffix(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldHasSuffix(FieldDiscordid, v))
}

// DiscordidEqualFold applies the EqualFold predicate on the "discordid" field.
func DiscordidEqualFold(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEqualFold(FieldDiscordid, v))
}

// DiscordidContainsFold applies the ContainsFold predicate on the "discordid" field.
func DiscordidContainsFold(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldContainsFold(FieldDiscordid, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v discord.ChannelType) predicate.DiscordChannel {
	vc := int(v)
	return predicate.DiscordChannel(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v discord.ChannelType) predicate.DiscordChannel {
	vc := int(v)
	return predicate.DiscordChannel(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...discord.ChannelType) predicate.DiscordChannel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.DiscordChannel(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...discord.ChannelType) predicate.DiscordChannel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.DiscordChannel(sql.FieldNotIn(FieldType, v...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v discord.ChannelType) predicate.DiscordChannel {
	vc := int(v)
	return predicate.DiscordChannel(sql.FieldGT(FieldType, vc))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v discord.ChannelType) predicate.DiscordChannel {
	vc := int(v)
	return predicate.DiscordChannel(sql.FieldGTE(FieldType, vc))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v discord.ChannelType) predicate.DiscordChannel {
	vc := int(v)
	return predicate.DiscordChannel(sql.FieldLT(FieldType, vc))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v discord.ChannelType) predicate.DiscordChannel {
	vc := int(v)
	return predicate.DiscordChannel(sql.FieldLTE(FieldType, vc))
}

// NsfwEQ applies the EQ predicate on the "nsfw" field.
func NsfwEQ(v bool) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEQ(FieldNsfw, v))
}

// NsfwNEQ applies the NEQ predicate on the "nsfw" field.
func NsfwNEQ(v bool) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldNEQ(FieldNsfw, v))
}

// FlagsEQ applies the EQ predicate on the "flags" field.
func FlagsEQ(v int) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldEQ(FieldFlags, v))
}

// FlagsNEQ applies the NEQ predicate on the "flags" field.
func FlagsNEQ(v int) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldNEQ(FieldFlags, v))
}

// FlagsIn applies the In predicate on the "flags" field.
func FlagsIn(vs ...int) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldIn(FieldFlags, vs...))
}

// FlagsNotIn applies the NotIn predicate on the "flags" field.
func FlagsNotIn(vs ...int) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldNotIn(FieldFlags, vs...))
}

// FlagsGT applies the GT predicate on the "flags" field.
func FlagsGT(v int) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldGT(FieldFlags, v))
}

// FlagsGTE applies the GTE predicate on the "flags" field.
func FlagsGTE(v int) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldGTE(FieldFlags, v))
}

// FlagsLT applies the LT predicate on the "flags" field.
func FlagsLT(v int) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldLT(FieldFlags, v))
}

// FlagsLTE applies the LTE predicate on the "flags" field.
func FlagsLTE(v int) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldLTE(FieldFlags, v))
}

// FlagsIsNil applies the IsNil predicate on the "flags" field.
func FlagsIsNil() predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldIsNull(FieldFlags))
}

// FlagsNotNil applies the NotNil predicate on the "flags" field.
func FlagsNotNil() predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.FieldNotNull(FieldFlags))
}

// HasDiscordGuild applies the HasEdge predicate on the "discord_guild" edge.
func HasDiscordGuild() predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DiscordGuildTable, DiscordGuildPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiscordGuildWith applies the HasEdge predicate on the "discord_guild" edge with a given conditions (other predicates).
func HasDiscordGuildWith(preds ...predicate.DiscordGuild) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		step := newDiscordGuildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessages applies the HasEdge predicate on the "messages" edge.
func HasMessages() predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessagesTable, MessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessagesWith applies the HasEdge predicate on the "messages" edge with a given conditions (other predicates).
func HasMessagesWith(preds ...predicate.DiscordMessage) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		step := newMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DiscordChannel) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DiscordChannel) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DiscordChannel) predicate.DiscordChannel {
	return predicate.DiscordChannel(sql.NotPredicates(p))
}
