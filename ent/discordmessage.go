// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bwmarrin/discordgo"
	"github.com/h3mmy/bloopyboi/ent/discordmessage"
)

// DiscordMessage is the model entity for the DiscordMessage schema.
type DiscordMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Raw holds the value of the "raw" field.
	Raw discordgo.Message `json:"raw,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiscordMessageQuery when eager-loading is set.
	Edges        DiscordMessageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DiscordMessageEdges holds the relations/edges for other nodes in the graph.
type DiscordMessageEdges struct {
	// Author holds the value of the author edge.
	Author []*DiscordUser `json:"author,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	namedAuthor map[string][]*DiscordUser
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading.
func (e DiscordMessageEdges) AuthorOrErr() ([]*DiscordUser, error) {
	if e.loadedTypes[0] {
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DiscordMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case discordmessage.FieldRaw:
			values[i] = new([]byte)
		case discordmessage.FieldID:
			values[i] = new(sql.NullString)
		case discordmessage.FieldCreateTime, discordmessage.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DiscordMessage fields.
func (dm *DiscordMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discordmessage.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				dm.ID = value.String
			}
		case discordmessage.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				dm.CreateTime = value.Time
			}
		case discordmessage.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				dm.UpdateTime = value.Time
			}
		case discordmessage.FieldRaw:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field raw", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dm.Raw); err != nil {
					return fmt.Errorf("unmarshal field raw: %w", err)
				}
			}
		default:
			dm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DiscordMessage.
// This includes values selected through modifiers, order, etc.
func (dm *DiscordMessage) Value(name string) (ent.Value, error) {
	return dm.selectValues.Get(name)
}

// QueryAuthor queries the "author" edge of the DiscordMessage entity.
func (dm *DiscordMessage) QueryAuthor() *DiscordUserQuery {
	return NewDiscordMessageClient(dm.config).QueryAuthor(dm)
}

// Update returns a builder for updating this DiscordMessage.
// Note that you need to call DiscordMessage.Unwrap() before calling this method if this DiscordMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (dm *DiscordMessage) Update() *DiscordMessageUpdateOne {
	return NewDiscordMessageClient(dm.config).UpdateOne(dm)
}

// Unwrap unwraps the DiscordMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dm *DiscordMessage) Unwrap() *DiscordMessage {
	_tx, ok := dm.config.driver.(*txDriver)
	if !ok {
		panic("ent: DiscordMessage is not a transactional entity")
	}
	dm.config.driver = _tx.drv
	return dm
}

// String implements the fmt.Stringer.
func (dm *DiscordMessage) String() string {
	var builder strings.Builder
	builder.WriteString("DiscordMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dm.ID))
	builder.WriteString("create_time=")
	builder.WriteString(dm.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(dm.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("raw=")
	builder.WriteString(fmt.Sprintf("%v", dm.Raw))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAuthor returns the Author named value or an error if the edge was not
// loaded in eager-loading with this name.
func (dm *DiscordMessage) NamedAuthor(name string) ([]*DiscordUser, error) {
	if dm.Edges.namedAuthor == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := dm.Edges.namedAuthor[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (dm *DiscordMessage) appendNamedAuthor(name string, edges ...*DiscordUser) {
	if dm.Edges.namedAuthor == nil {
		dm.Edges.namedAuthor = make(map[string][]*DiscordUser)
	}
	if len(edges) == 0 {
		dm.Edges.namedAuthor[name] = []*DiscordUser{}
	} else {
		dm.Edges.namedAuthor[name] = append(dm.Edges.namedAuthor[name], edges...)
	}
}

// DiscordMessages is a parsable slice of DiscordMessage.
type DiscordMessages []*DiscordMessage
