// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/discordguild"
	"github.com/h3mmy/bloopyboi/ent/discordmessage"
	"github.com/h3mmy/bloopyboi/ent/discordmessagereaction"
	"github.com/h3mmy/bloopyboi/ent/discorduser"
	"github.com/h3mmy/bloopyboi/ent/mediarequest"
	"github.com/h3mmy/bloopyboi/ent/predicate"
)

// DiscordUserQuery is the builder for querying DiscordUser entities.
type DiscordUserQuery struct {
	config
	ctx                       *QueryContext
	order                     []discorduser.OrderOption
	inters                    []Interceptor
	predicates                []predicate.DiscordUser
	withGuilds                *DiscordGuildQuery
	withDiscordMessages       *DiscordMessageQuery
	withMediaRequests         *MediaRequestQuery
	withMessageReactions      *DiscordMessageReactionQuery
	modifiers                 []func(*sql.Selector)
	withNamedGuilds           map[string]*DiscordGuildQuery
	withNamedDiscordMessages  map[string]*DiscordMessageQuery
	withNamedMediaRequests    map[string]*MediaRequestQuery
	withNamedMessageReactions map[string]*DiscordMessageReactionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DiscordUserQuery builder.
func (duq *DiscordUserQuery) Where(ps ...predicate.DiscordUser) *DiscordUserQuery {
	duq.predicates = append(duq.predicates, ps...)
	return duq
}

// Limit the number of records to be returned by this query.
func (duq *DiscordUserQuery) Limit(limit int) *DiscordUserQuery {
	duq.ctx.Limit = &limit
	return duq
}

// Offset to start from.
func (duq *DiscordUserQuery) Offset(offset int) *DiscordUserQuery {
	duq.ctx.Offset = &offset
	return duq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (duq *DiscordUserQuery) Unique(unique bool) *DiscordUserQuery {
	duq.ctx.Unique = &unique
	return duq
}

// Order specifies how the records should be ordered.
func (duq *DiscordUserQuery) Order(o ...discorduser.OrderOption) *DiscordUserQuery {
	duq.order = append(duq.order, o...)
	return duq
}

// QueryGuilds chains the current query on the "guilds" edge.
func (duq *DiscordUserQuery) QueryGuilds() *DiscordGuildQuery {
	query := (&DiscordGuildClient{config: duq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := duq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := duq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discorduser.Table, discorduser.FieldID, selector),
			sqlgraph.To(discordguild.Table, discordguild.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, discorduser.GuildsTable, discorduser.GuildsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(duq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDiscordMessages chains the current query on the "discord_messages" edge.
func (duq *DiscordUserQuery) QueryDiscordMessages() *DiscordMessageQuery {
	query := (&DiscordMessageClient{config: duq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := duq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := duq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discorduser.Table, discorduser.FieldID, selector),
			sqlgraph.To(discordmessage.Table, discordmessage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, discorduser.DiscordMessagesTable, discorduser.DiscordMessagesColumn),
		)
		fromU = sqlgraph.SetNeighbors(duq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMediaRequests chains the current query on the "media_requests" edge.
func (duq *DiscordUserQuery) QueryMediaRequests() *MediaRequestQuery {
	query := (&MediaRequestClient{config: duq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := duq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := duq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discorduser.Table, discorduser.FieldID, selector),
			sqlgraph.To(mediarequest.Table, mediarequest.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, discorduser.MediaRequestsTable, discorduser.MediaRequestsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(duq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMessageReactions chains the current query on the "message_reactions" edge.
func (duq *DiscordUserQuery) QueryMessageReactions() *DiscordMessageReactionQuery {
	query := (&DiscordMessageReactionClient{config: duq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := duq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := duq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discorduser.Table, discorduser.FieldID, selector),
			sqlgraph.To(discordmessagereaction.Table, discordmessagereaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, discorduser.MessageReactionsTable, discorduser.MessageReactionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(duq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DiscordUser entity from the query.
// Returns a *NotFoundError when no DiscordUser was found.
func (duq *DiscordUserQuery) First(ctx context.Context) (*DiscordUser, error) {
	nodes, err := duq.Limit(1).All(setContextOp(ctx, duq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{discorduser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (duq *DiscordUserQuery) FirstX(ctx context.Context) *DiscordUser {
	node, err := duq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DiscordUser ID from the query.
// Returns a *NotFoundError when no DiscordUser ID was found.
func (duq *DiscordUserQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = duq.Limit(1).IDs(setContextOp(ctx, duq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{discorduser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (duq *DiscordUserQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := duq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DiscordUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DiscordUser entity is found.
// Returns a *NotFoundError when no DiscordUser entities are found.
func (duq *DiscordUserQuery) Only(ctx context.Context) (*DiscordUser, error) {
	nodes, err := duq.Limit(2).All(setContextOp(ctx, duq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{discorduser.Label}
	default:
		return nil, &NotSingularError{discorduser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (duq *DiscordUserQuery) OnlyX(ctx context.Context) *DiscordUser {
	node, err := duq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DiscordUser ID in the query.
// Returns a *NotSingularError when more than one DiscordUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (duq *DiscordUserQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = duq.Limit(2).IDs(setContextOp(ctx, duq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{discorduser.Label}
	default:
		err = &NotSingularError{discorduser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (duq *DiscordUserQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := duq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DiscordUsers.
func (duq *DiscordUserQuery) All(ctx context.Context) ([]*DiscordUser, error) {
	ctx = setContextOp(ctx, duq.ctx, "All")
	if err := duq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DiscordUser, *DiscordUserQuery]()
	return withInterceptors[[]*DiscordUser](ctx, duq, qr, duq.inters)
}

// AllX is like All, but panics if an error occurs.
func (duq *DiscordUserQuery) AllX(ctx context.Context) []*DiscordUser {
	nodes, err := duq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DiscordUser IDs.
func (duq *DiscordUserQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if duq.ctx.Unique == nil && duq.path != nil {
		duq.Unique(true)
	}
	ctx = setContextOp(ctx, duq.ctx, "IDs")
	if err = duq.Select(discorduser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (duq *DiscordUserQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := duq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (duq *DiscordUserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, duq.ctx, "Count")
	if err := duq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, duq, querierCount[*DiscordUserQuery](), duq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (duq *DiscordUserQuery) CountX(ctx context.Context) int {
	count, err := duq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (duq *DiscordUserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, duq.ctx, "Exist")
	switch _, err := duq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (duq *DiscordUserQuery) ExistX(ctx context.Context) bool {
	exist, err := duq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DiscordUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (duq *DiscordUserQuery) Clone() *DiscordUserQuery {
	if duq == nil {
		return nil
	}
	return &DiscordUserQuery{
		config:               duq.config,
		ctx:                  duq.ctx.Clone(),
		order:                append([]discorduser.OrderOption{}, duq.order...),
		inters:               append([]Interceptor{}, duq.inters...),
		predicates:           append([]predicate.DiscordUser{}, duq.predicates...),
		withGuilds:           duq.withGuilds.Clone(),
		withDiscordMessages:  duq.withDiscordMessages.Clone(),
		withMediaRequests:    duq.withMediaRequests.Clone(),
		withMessageReactions: duq.withMessageReactions.Clone(),
		// clone intermediate query.
		sql:  duq.sql.Clone(),
		path: duq.path,
	}
}

// WithGuilds tells the query-builder to eager-load the nodes that are connected to
// the "guilds" edge. The optional arguments are used to configure the query builder of the edge.
func (duq *DiscordUserQuery) WithGuilds(opts ...func(*DiscordGuildQuery)) *DiscordUserQuery {
	query := (&DiscordGuildClient{config: duq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	duq.withGuilds = query
	return duq
}

// WithDiscordMessages tells the query-builder to eager-load the nodes that are connected to
// the "discord_messages" edge. The optional arguments are used to configure the query builder of the edge.
func (duq *DiscordUserQuery) WithDiscordMessages(opts ...func(*DiscordMessageQuery)) *DiscordUserQuery {
	query := (&DiscordMessageClient{config: duq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	duq.withDiscordMessages = query
	return duq
}

// WithMediaRequests tells the query-builder to eager-load the nodes that are connected to
// the "media_requests" edge. The optional arguments are used to configure the query builder of the edge.
func (duq *DiscordUserQuery) WithMediaRequests(opts ...func(*MediaRequestQuery)) *DiscordUserQuery {
	query := (&MediaRequestClient{config: duq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	duq.withMediaRequests = query
	return duq
}

// WithMessageReactions tells the query-builder to eager-load the nodes that are connected to
// the "message_reactions" edge. The optional arguments are used to configure the query builder of the edge.
func (duq *DiscordUserQuery) WithMessageReactions(opts ...func(*DiscordMessageReactionQuery)) *DiscordUserQuery {
	query := (&DiscordMessageReactionClient{config: duq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	duq.withMessageReactions = query
	return duq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Discordid string `json:"discordid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DiscordUser.Query().
//		GroupBy(discorduser.FieldDiscordid).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (duq *DiscordUserQuery) GroupBy(field string, fields ...string) *DiscordUserGroupBy {
	duq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DiscordUserGroupBy{build: duq}
	grbuild.flds = &duq.ctx.Fields
	grbuild.label = discorduser.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Discordid string `json:"discordid,omitempty"`
//	}
//
//	client.DiscordUser.Query().
//		Select(discorduser.FieldDiscordid).
//		Scan(ctx, &v)
func (duq *DiscordUserQuery) Select(fields ...string) *DiscordUserSelect {
	duq.ctx.Fields = append(duq.ctx.Fields, fields...)
	sbuild := &DiscordUserSelect{DiscordUserQuery: duq}
	sbuild.label = discorduser.Label
	sbuild.flds, sbuild.scan = &duq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DiscordUserSelect configured with the given aggregations.
func (duq *DiscordUserQuery) Aggregate(fns ...AggregateFunc) *DiscordUserSelect {
	return duq.Select().Aggregate(fns...)
}

func (duq *DiscordUserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range duq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, duq); err != nil {
				return err
			}
		}
	}
	for _, f := range duq.ctx.Fields {
		if !discorduser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if duq.path != nil {
		prev, err := duq.path(ctx)
		if err != nil {
			return err
		}
		duq.sql = prev
	}
	return nil
}

func (duq *DiscordUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DiscordUser, error) {
	var (
		nodes       = []*DiscordUser{}
		_spec       = duq.querySpec()
		loadedTypes = [4]bool{
			duq.withGuilds != nil,
			duq.withDiscordMessages != nil,
			duq.withMediaRequests != nil,
			duq.withMessageReactions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DiscordUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DiscordUser{config: duq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(duq.modifiers) > 0 {
		_spec.Modifiers = duq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, duq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := duq.withGuilds; query != nil {
		if err := duq.loadGuilds(ctx, query, nodes,
			func(n *DiscordUser) { n.Edges.Guilds = []*DiscordGuild{} },
			func(n *DiscordUser, e *DiscordGuild) { n.Edges.Guilds = append(n.Edges.Guilds, e) }); err != nil {
			return nil, err
		}
	}
	if query := duq.withDiscordMessages; query != nil {
		if err := duq.loadDiscordMessages(ctx, query, nodes,
			func(n *DiscordUser) { n.Edges.DiscordMessages = []*DiscordMessage{} },
			func(n *DiscordUser, e *DiscordMessage) { n.Edges.DiscordMessages = append(n.Edges.DiscordMessages, e) }); err != nil {
			return nil, err
		}
	}
	if query := duq.withMediaRequests; query != nil {
		if err := duq.loadMediaRequests(ctx, query, nodes,
			func(n *DiscordUser) { n.Edges.MediaRequests = []*MediaRequest{} },
			func(n *DiscordUser, e *MediaRequest) { n.Edges.MediaRequests = append(n.Edges.MediaRequests, e) }); err != nil {
			return nil, err
		}
	}
	if query := duq.withMessageReactions; query != nil {
		if err := duq.loadMessageReactions(ctx, query, nodes,
			func(n *DiscordUser) { n.Edges.MessageReactions = []*DiscordMessageReaction{} },
			func(n *DiscordUser, e *DiscordMessageReaction) {
				n.Edges.MessageReactions = append(n.Edges.MessageReactions, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range duq.withNamedGuilds {
		if err := duq.loadGuilds(ctx, query, nodes,
			func(n *DiscordUser) { n.appendNamedGuilds(name) },
			func(n *DiscordUser, e *DiscordGuild) { n.appendNamedGuilds(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range duq.withNamedDiscordMessages {
		if err := duq.loadDiscordMessages(ctx, query, nodes,
			func(n *DiscordUser) { n.appendNamedDiscordMessages(name) },
			func(n *DiscordUser, e *DiscordMessage) { n.appendNamedDiscordMessages(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range duq.withNamedMediaRequests {
		if err := duq.loadMediaRequests(ctx, query, nodes,
			func(n *DiscordUser) { n.appendNamedMediaRequests(name) },
			func(n *DiscordUser, e *MediaRequest) { n.appendNamedMediaRequests(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range duq.withNamedMessageReactions {
		if err := duq.loadMessageReactions(ctx, query, nodes,
			func(n *DiscordUser) { n.appendNamedMessageReactions(name) },
			func(n *DiscordUser, e *DiscordMessageReaction) { n.appendNamedMessageReactions(name, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (duq *DiscordUserQuery) loadGuilds(ctx context.Context, query *DiscordGuildQuery, nodes []*DiscordUser, init func(*DiscordUser), assign func(*DiscordUser, *DiscordGuild)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*DiscordUser)
	nids := make(map[uuid.UUID]map[*DiscordUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(discorduser.GuildsTable)
		s.Join(joinT).On(s.C(discordguild.FieldID), joinT.C(discorduser.GuildsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(discorduser.GuildsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(discorduser.GuildsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*DiscordUser]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DiscordGuild](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "guilds" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (duq *DiscordUserQuery) loadDiscordMessages(ctx context.Context, query *DiscordMessageQuery, nodes []*DiscordUser, init func(*DiscordUser), assign func(*DiscordUser, *DiscordMessage)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*DiscordUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DiscordMessage(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(discorduser.DiscordMessagesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.discord_user_discord_messages
		if fk == nil {
			return fmt.Errorf(`foreign-key "discord_user_discord_messages" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "discord_user_discord_messages" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (duq *DiscordUserQuery) loadMediaRequests(ctx context.Context, query *MediaRequestQuery, nodes []*DiscordUser, init func(*DiscordUser), assign func(*DiscordUser, *MediaRequest)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*DiscordUser)
	nids := make(map[uuid.UUID]map[*DiscordUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(discorduser.MediaRequestsTable)
		s.Join(joinT).On(s.C(mediarequest.FieldID), joinT.C(discorduser.MediaRequestsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(discorduser.MediaRequestsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(discorduser.MediaRequestsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*DiscordUser]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*MediaRequest](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "media_requests" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (duq *DiscordUserQuery) loadMessageReactions(ctx context.Context, query *DiscordMessageReactionQuery, nodes []*DiscordUser, init func(*DiscordUser), assign func(*DiscordUser, *DiscordMessageReaction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*DiscordUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DiscordMessageReaction(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(discorduser.MessageReactionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.discord_user_message_reactions
		if fk == nil {
			return fmt.Errorf(`foreign-key "discord_user_message_reactions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "discord_user_message_reactions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (duq *DiscordUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := duq.querySpec()
	if len(duq.modifiers) > 0 {
		_spec.Modifiers = duq.modifiers
	}
	_spec.Node.Columns = duq.ctx.Fields
	if len(duq.ctx.Fields) > 0 {
		_spec.Unique = duq.ctx.Unique != nil && *duq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, duq.driver, _spec)
}

func (duq *DiscordUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(discorduser.Table, discorduser.Columns, sqlgraph.NewFieldSpec(discorduser.FieldID, field.TypeUUID))
	_spec.From = duq.sql
	if unique := duq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if duq.path != nil {
		_spec.Unique = true
	}
	if fields := duq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discorduser.FieldID)
		for i := range fields {
			if fields[i] != discorduser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := duq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := duq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := duq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := duq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (duq *DiscordUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(duq.driver.Dialect())
	t1 := builder.Table(discorduser.Table)
	columns := duq.ctx.Fields
	if len(columns) == 0 {
		columns = discorduser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if duq.sql != nil {
		selector = duq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if duq.ctx.Unique != nil && *duq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range duq.modifiers {
		m(selector)
	}
	for _, p := range duq.predicates {
		p(selector)
	}
	for _, p := range duq.order {
		p(selector)
	}
	if offset := duq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := duq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (duq *DiscordUserQuery) ForUpdate(opts ...sql.LockOption) *DiscordUserQuery {
	if duq.driver.Dialect() == dialect.Postgres {
		duq.Unique(false)
	}
	duq.modifiers = append(duq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return duq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (duq *DiscordUserQuery) ForShare(opts ...sql.LockOption) *DiscordUserQuery {
	if duq.driver.Dialect() == dialect.Postgres {
		duq.Unique(false)
	}
	duq.modifiers = append(duq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return duq
}

// WithNamedGuilds tells the query-builder to eager-load the nodes that are connected to the "guilds"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (duq *DiscordUserQuery) WithNamedGuilds(name string, opts ...func(*DiscordGuildQuery)) *DiscordUserQuery {
	query := (&DiscordGuildClient{config: duq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if duq.withNamedGuilds == nil {
		duq.withNamedGuilds = make(map[string]*DiscordGuildQuery)
	}
	duq.withNamedGuilds[name] = query
	return duq
}

// WithNamedDiscordMessages tells the query-builder to eager-load the nodes that are connected to the "discord_messages"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (duq *DiscordUserQuery) WithNamedDiscordMessages(name string, opts ...func(*DiscordMessageQuery)) *DiscordUserQuery {
	query := (&DiscordMessageClient{config: duq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if duq.withNamedDiscordMessages == nil {
		duq.withNamedDiscordMessages = make(map[string]*DiscordMessageQuery)
	}
	duq.withNamedDiscordMessages[name] = query
	return duq
}

// WithNamedMediaRequests tells the query-builder to eager-load the nodes that are connected to the "media_requests"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (duq *DiscordUserQuery) WithNamedMediaRequests(name string, opts ...func(*MediaRequestQuery)) *DiscordUserQuery {
	query := (&MediaRequestClient{config: duq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if duq.withNamedMediaRequests == nil {
		duq.withNamedMediaRequests = make(map[string]*MediaRequestQuery)
	}
	duq.withNamedMediaRequests[name] = query
	return duq
}

// WithNamedMessageReactions tells the query-builder to eager-load the nodes that are connected to the "message_reactions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (duq *DiscordUserQuery) WithNamedMessageReactions(name string, opts ...func(*DiscordMessageReactionQuery)) *DiscordUserQuery {
	query := (&DiscordMessageReactionClient{config: duq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if duq.withNamedMessageReactions == nil {
		duq.withNamedMessageReactions = make(map[string]*DiscordMessageReactionQuery)
	}
	duq.withNamedMessageReactions[name] = query
	return duq
}

// DiscordUserGroupBy is the group-by builder for DiscordUser entities.
type DiscordUserGroupBy struct {
	selector
	build *DiscordUserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dugb *DiscordUserGroupBy) Aggregate(fns ...AggregateFunc) *DiscordUserGroupBy {
	dugb.fns = append(dugb.fns, fns...)
	return dugb
}

// Scan applies the selector query and scans the result into the given value.
func (dugb *DiscordUserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dugb.build.ctx, "GroupBy")
	if err := dugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DiscordUserQuery, *DiscordUserGroupBy](ctx, dugb.build, dugb, dugb.build.inters, v)
}

func (dugb *DiscordUserGroupBy) sqlScan(ctx context.Context, root *DiscordUserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dugb.fns))
	for _, fn := range dugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dugb.flds)+len(dugb.fns))
		for _, f := range *dugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DiscordUserSelect is the builder for selecting fields of DiscordUser entities.
type DiscordUserSelect struct {
	*DiscordUserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dus *DiscordUserSelect) Aggregate(fns ...AggregateFunc) *DiscordUserSelect {
	dus.fns = append(dus.fns, fns...)
	return dus
}

// Scan applies the selector query and scans the result into the given value.
func (dus *DiscordUserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dus.ctx, "Select")
	if err := dus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DiscordUserQuery, *DiscordUserSelect](ctx, dus.DiscordUserQuery, dus, dus.inters, v)
}

func (dus *DiscordUserSelect) sqlScan(ctx context.Context, root *DiscordUserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dus.fns))
	for _, fn := range dus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
