// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bwmarrin/discordgo"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/discordmessage"
	"github.com/h3mmy/bloopyboi/ent/discordmessagereaction"
	"github.com/h3mmy/bloopyboi/ent/discorduser"
	"github.com/h3mmy/bloopyboi/ent/predicate"
)

// DiscordMessageReactionUpdate is the builder for updating DiscordMessageReaction entities.
type DiscordMessageReactionUpdate struct {
	config
	hooks    []Hook
	mutation *DiscordMessageReactionMutation
}

// Where appends a list predicates to the DiscordMessageReactionUpdate builder.
func (dmru *DiscordMessageReactionUpdate) Where(ps ...predicate.DiscordMessageReaction) *DiscordMessageReactionUpdate {
	dmru.mutation.Where(ps...)
	return dmru
}

// SetUpdateTime sets the "update_time" field.
func (dmru *DiscordMessageReactionUpdate) SetUpdateTime(t time.Time) *DiscordMessageReactionUpdate {
	dmru.mutation.SetUpdateTime(t)
	return dmru
}

// SetEmojiAPIName sets the "emoji_api_name" field.
func (dmru *DiscordMessageReactionUpdate) SetEmojiAPIName(s string) *DiscordMessageReactionUpdate {
	dmru.mutation.SetEmojiAPIName(s)
	return dmru
}

// SetNillableEmojiAPIName sets the "emoji_api_name" field if the given value is not nil.
func (dmru *DiscordMessageReactionUpdate) SetNillableEmojiAPIName(s *string) *DiscordMessageReactionUpdate {
	if s != nil {
		dmru.SetEmojiAPIName(*s)
	}
	return dmru
}

// SetRemoved sets the "removed" field.
func (dmru *DiscordMessageReactionUpdate) SetRemoved(b bool) *DiscordMessageReactionUpdate {
	dmru.mutation.SetRemoved(b)
	return dmru
}

// SetNillableRemoved sets the "removed" field if the given value is not nil.
func (dmru *DiscordMessageReactionUpdate) SetNillableRemoved(b *bool) *DiscordMessageReactionUpdate {
	if b != nil {
		dmru.SetRemoved(*b)
	}
	return dmru
}

// SetRaw sets the "raw" field.
func (dmru *DiscordMessageReactionUpdate) SetRaw(dr discordgo.MessageReaction) *DiscordMessageReactionUpdate {
	dmru.mutation.SetRaw(dr)
	return dmru
}

// SetNillableRaw sets the "raw" field if the given value is not nil.
func (dmru *DiscordMessageReactionUpdate) SetNillableRaw(dr *discordgo.MessageReaction) *DiscordMessageReactionUpdate {
	if dr != nil {
		dmru.SetRaw(*dr)
	}
	return dmru
}

// SetDiscordMessageID sets the "discord_message" edge to the DiscordMessage entity by ID.
func (dmru *DiscordMessageReactionUpdate) SetDiscordMessageID(id uuid.UUID) *DiscordMessageReactionUpdate {
	dmru.mutation.SetDiscordMessageID(id)
	return dmru
}

// SetDiscordMessage sets the "discord_message" edge to the DiscordMessage entity.
func (dmru *DiscordMessageReactionUpdate) SetDiscordMessage(d *DiscordMessage) *DiscordMessageReactionUpdate {
	return dmru.SetDiscordMessageID(d.ID)
}

// SetAuthorID sets the "author" edge to the DiscordUser entity by ID.
func (dmru *DiscordMessageReactionUpdate) SetAuthorID(id uuid.UUID) *DiscordMessageReactionUpdate {
	dmru.mutation.SetAuthorID(id)
	return dmru
}

// SetAuthor sets the "author" edge to the DiscordUser entity.
func (dmru *DiscordMessageReactionUpdate) SetAuthor(d *DiscordUser) *DiscordMessageReactionUpdate {
	return dmru.SetAuthorID(d.ID)
}

// Mutation returns the DiscordMessageReactionMutation object of the builder.
func (dmru *DiscordMessageReactionUpdate) Mutation() *DiscordMessageReactionMutation {
	return dmru.mutation
}

// ClearDiscordMessage clears the "discord_message" edge to the DiscordMessage entity.
func (dmru *DiscordMessageReactionUpdate) ClearDiscordMessage() *DiscordMessageReactionUpdate {
	dmru.mutation.ClearDiscordMessage()
	return dmru
}

// ClearAuthor clears the "author" edge to the DiscordUser entity.
func (dmru *DiscordMessageReactionUpdate) ClearAuthor() *DiscordMessageReactionUpdate {
	dmru.mutation.ClearAuthor()
	return dmru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dmru *DiscordMessageReactionUpdate) Save(ctx context.Context) (int, error) {
	dmru.defaults()
	return withHooks(ctx, dmru.sqlSave, dmru.mutation, dmru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dmru *DiscordMessageReactionUpdate) SaveX(ctx context.Context) int {
	affected, err := dmru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dmru *DiscordMessageReactionUpdate) Exec(ctx context.Context) error {
	_, err := dmru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmru *DiscordMessageReactionUpdate) ExecX(ctx context.Context) {
	if err := dmru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dmru *DiscordMessageReactionUpdate) defaults() {
	if _, ok := dmru.mutation.UpdateTime(); !ok {
		v := discordmessagereaction.UpdateDefaultUpdateTime()
		dmru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dmru *DiscordMessageReactionUpdate) check() error {
	if _, ok := dmru.mutation.DiscordMessageID(); dmru.mutation.DiscordMessageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DiscordMessageReaction.discord_message"`)
	}
	if _, ok := dmru.mutation.AuthorID(); dmru.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DiscordMessageReaction.author"`)
	}
	return nil
}

func (dmru *DiscordMessageReactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dmru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(discordmessagereaction.Table, discordmessagereaction.Columns, sqlgraph.NewFieldSpec(discordmessagereaction.FieldID, field.TypeUUID))
	if ps := dmru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmru.mutation.UpdateTime(); ok {
		_spec.SetField(discordmessagereaction.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dmru.mutation.EmojiAPIName(); ok {
		_spec.SetField(discordmessagereaction.FieldEmojiAPIName, field.TypeString, value)
	}
	if value, ok := dmru.mutation.Removed(); ok {
		_spec.SetField(discordmessagereaction.FieldRemoved, field.TypeBool, value)
	}
	if value, ok := dmru.mutation.Raw(); ok {
		_spec.SetField(discordmessagereaction.FieldRaw, field.TypeJSON, value)
	}
	if dmru.mutation.DiscordMessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordmessagereaction.DiscordMessageTable,
			Columns: []string{discordmessagereaction.DiscordMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordmessage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmru.mutation.DiscordMessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordmessagereaction.DiscordMessageTable,
			Columns: []string{discordmessagereaction.DiscordMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dmru.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordmessagereaction.AuthorTable,
			Columns: []string{discordmessagereaction.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discorduser.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmru.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordmessagereaction.AuthorTable,
			Columns: []string{discordmessagereaction.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discorduser.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dmru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discordmessagereaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dmru.mutation.done = true
	return n, nil
}

// DiscordMessageReactionUpdateOne is the builder for updating a single DiscordMessageReaction entity.
type DiscordMessageReactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscordMessageReactionMutation
}

// SetUpdateTime sets the "update_time" field.
func (dmruo *DiscordMessageReactionUpdateOne) SetUpdateTime(t time.Time) *DiscordMessageReactionUpdateOne {
	dmruo.mutation.SetUpdateTime(t)
	return dmruo
}

// SetEmojiAPIName sets the "emoji_api_name" field.
func (dmruo *DiscordMessageReactionUpdateOne) SetEmojiAPIName(s string) *DiscordMessageReactionUpdateOne {
	dmruo.mutation.SetEmojiAPIName(s)
	return dmruo
}

// SetNillableEmojiAPIName sets the "emoji_api_name" field if the given value is not nil.
func (dmruo *DiscordMessageReactionUpdateOne) SetNillableEmojiAPIName(s *string) *DiscordMessageReactionUpdateOne {
	if s != nil {
		dmruo.SetEmojiAPIName(*s)
	}
	return dmruo
}

// SetRemoved sets the "removed" field.
func (dmruo *DiscordMessageReactionUpdateOne) SetRemoved(b bool) *DiscordMessageReactionUpdateOne {
	dmruo.mutation.SetRemoved(b)
	return dmruo
}

// SetNillableRemoved sets the "removed" field if the given value is not nil.
func (dmruo *DiscordMessageReactionUpdateOne) SetNillableRemoved(b *bool) *DiscordMessageReactionUpdateOne {
	if b != nil {
		dmruo.SetRemoved(*b)
	}
	return dmruo
}

// SetRaw sets the "raw" field.
func (dmruo *DiscordMessageReactionUpdateOne) SetRaw(dr discordgo.MessageReaction) *DiscordMessageReactionUpdateOne {
	dmruo.mutation.SetRaw(dr)
	return dmruo
}

// SetNillableRaw sets the "raw" field if the given value is not nil.
func (dmruo *DiscordMessageReactionUpdateOne) SetNillableRaw(dr *discordgo.MessageReaction) *DiscordMessageReactionUpdateOne {
	if dr != nil {
		dmruo.SetRaw(*dr)
	}
	return dmruo
}

// SetDiscordMessageID sets the "discord_message" edge to the DiscordMessage entity by ID.
func (dmruo *DiscordMessageReactionUpdateOne) SetDiscordMessageID(id uuid.UUID) *DiscordMessageReactionUpdateOne {
	dmruo.mutation.SetDiscordMessageID(id)
	return dmruo
}

// SetDiscordMessage sets the "discord_message" edge to the DiscordMessage entity.
func (dmruo *DiscordMessageReactionUpdateOne) SetDiscordMessage(d *DiscordMessage) *DiscordMessageReactionUpdateOne {
	return dmruo.SetDiscordMessageID(d.ID)
}

// SetAuthorID sets the "author" edge to the DiscordUser entity by ID.
func (dmruo *DiscordMessageReactionUpdateOne) SetAuthorID(id uuid.UUID) *DiscordMessageReactionUpdateOne {
	dmruo.mutation.SetAuthorID(id)
	return dmruo
}

// SetAuthor sets the "author" edge to the DiscordUser entity.
func (dmruo *DiscordMessageReactionUpdateOne) SetAuthor(d *DiscordUser) *DiscordMessageReactionUpdateOne {
	return dmruo.SetAuthorID(d.ID)
}

// Mutation returns the DiscordMessageReactionMutation object of the builder.
func (dmruo *DiscordMessageReactionUpdateOne) Mutation() *DiscordMessageReactionMutation {
	return dmruo.mutation
}

// ClearDiscordMessage clears the "discord_message" edge to the DiscordMessage entity.
func (dmruo *DiscordMessageReactionUpdateOne) ClearDiscordMessage() *DiscordMessageReactionUpdateOne {
	dmruo.mutation.ClearDiscordMessage()
	return dmruo
}

// ClearAuthor clears the "author" edge to the DiscordUser entity.
func (dmruo *DiscordMessageReactionUpdateOne) ClearAuthor() *DiscordMessageReactionUpdateOne {
	dmruo.mutation.ClearAuthor()
	return dmruo
}

// Where appends a list predicates to the DiscordMessageReactionUpdate builder.
func (dmruo *DiscordMessageReactionUpdateOne) Where(ps ...predicate.DiscordMessageReaction) *DiscordMessageReactionUpdateOne {
	dmruo.mutation.Where(ps...)
	return dmruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dmruo *DiscordMessageReactionUpdateOne) Select(field string, fields ...string) *DiscordMessageReactionUpdateOne {
	dmruo.fields = append([]string{field}, fields...)
	return dmruo
}

// Save executes the query and returns the updated DiscordMessageReaction entity.
func (dmruo *DiscordMessageReactionUpdateOne) Save(ctx context.Context) (*DiscordMessageReaction, error) {
	dmruo.defaults()
	return withHooks(ctx, dmruo.sqlSave, dmruo.mutation, dmruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dmruo *DiscordMessageReactionUpdateOne) SaveX(ctx context.Context) *DiscordMessageReaction {
	node, err := dmruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dmruo *DiscordMessageReactionUpdateOne) Exec(ctx context.Context) error {
	_, err := dmruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmruo *DiscordMessageReactionUpdateOne) ExecX(ctx context.Context) {
	if err := dmruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dmruo *DiscordMessageReactionUpdateOne) defaults() {
	if _, ok := dmruo.mutation.UpdateTime(); !ok {
		v := discordmessagereaction.UpdateDefaultUpdateTime()
		dmruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dmruo *DiscordMessageReactionUpdateOne) check() error {
	if _, ok := dmruo.mutation.DiscordMessageID(); dmruo.mutation.DiscordMessageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DiscordMessageReaction.discord_message"`)
	}
	if _, ok := dmruo.mutation.AuthorID(); dmruo.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DiscordMessageReaction.author"`)
	}
	return nil
}

func (dmruo *DiscordMessageReactionUpdateOne) sqlSave(ctx context.Context) (_node *DiscordMessageReaction, err error) {
	if err := dmruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(discordmessagereaction.Table, discordmessagereaction.Columns, sqlgraph.NewFieldSpec(discordmessagereaction.FieldID, field.TypeUUID))
	id, ok := dmruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DiscordMessageReaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dmruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discordmessagereaction.FieldID)
		for _, f := range fields {
			if !discordmessagereaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != discordmessagereaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dmruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmruo.mutation.UpdateTime(); ok {
		_spec.SetField(discordmessagereaction.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dmruo.mutation.EmojiAPIName(); ok {
		_spec.SetField(discordmessagereaction.FieldEmojiAPIName, field.TypeString, value)
	}
	if value, ok := dmruo.mutation.Removed(); ok {
		_spec.SetField(discordmessagereaction.FieldRemoved, field.TypeBool, value)
	}
	if value, ok := dmruo.mutation.Raw(); ok {
		_spec.SetField(discordmessagereaction.FieldRaw, field.TypeJSON, value)
	}
	if dmruo.mutation.DiscordMessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordmessagereaction.DiscordMessageTable,
			Columns: []string{discordmessagereaction.DiscordMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordmessage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmruo.mutation.DiscordMessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordmessagereaction.DiscordMessageTable,
			Columns: []string{discordmessagereaction.DiscordMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dmruo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordmessagereaction.AuthorTable,
			Columns: []string{discordmessagereaction.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discorduser.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmruo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordmessagereaction.AuthorTable,
			Columns: []string{discordmessagereaction.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discorduser.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DiscordMessageReaction{config: dmruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dmruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discordmessagereaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dmruo.mutation.done = true
	return _node, nil
}
