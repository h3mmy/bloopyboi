// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/discordchannel"
	"github.com/h3mmy/bloopyboi/ent/discordguild"
	"github.com/h3mmy/bloopyboi/ent/discordmessage"
	"github.com/h3mmy/bloopyboi/ent/predicate"
	"github.com/h3mmy/bloopyboi/internal/discord"
)

// DiscordChannelUpdate is the builder for updating DiscordChannel entities.
type DiscordChannelUpdate struct {
	config
	hooks    []Hook
	mutation *DiscordChannelMutation
}

// Where appends a list predicates to the DiscordChannelUpdate builder.
func (dcu *DiscordChannelUpdate) Where(ps ...predicate.DiscordChannel) *DiscordChannelUpdate {
	dcu.mutation.Where(ps...)
	return dcu
}

// SetUpdateTime sets the "update_time" field.
func (dcu *DiscordChannelUpdate) SetUpdateTime(t time.Time) *DiscordChannelUpdate {
	dcu.mutation.SetUpdateTime(t)
	return dcu
}

// SetDiscordid sets the "discordid" field.
func (dcu *DiscordChannelUpdate) SetDiscordid(s string) *DiscordChannelUpdate {
	dcu.mutation.SetDiscordid(s)
	return dcu
}

// SetNillableDiscordid sets the "discordid" field if the given value is not nil.
func (dcu *DiscordChannelUpdate) SetNillableDiscordid(s *string) *DiscordChannelUpdate {
	if s != nil {
		dcu.SetDiscordid(*s)
	}
	return dcu
}

// SetName sets the "name" field.
func (dcu *DiscordChannelUpdate) SetName(s string) *DiscordChannelUpdate {
	dcu.mutation.SetName(s)
	return dcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dcu *DiscordChannelUpdate) SetNillableName(s *string) *DiscordChannelUpdate {
	if s != nil {
		dcu.SetName(*s)
	}
	return dcu
}

// SetType sets the "type" field.
func (dcu *DiscordChannelUpdate) SetType(dt discord.ChannelType) *DiscordChannelUpdate {
	dcu.mutation.ResetType()
	dcu.mutation.SetType(dt)
	return dcu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (dcu *DiscordChannelUpdate) SetNillableType(dt *discord.ChannelType) *DiscordChannelUpdate {
	if dt != nil {
		dcu.SetType(*dt)
	}
	return dcu
}

// AddType adds dt to the "type" field.
func (dcu *DiscordChannelUpdate) AddType(dt discord.ChannelType) *DiscordChannelUpdate {
	dcu.mutation.AddType(dt)
	return dcu
}

// SetNsfw sets the "nsfw" field.
func (dcu *DiscordChannelUpdate) SetNsfw(b bool) *DiscordChannelUpdate {
	dcu.mutation.SetNsfw(b)
	return dcu
}

// SetNillableNsfw sets the "nsfw" field if the given value is not nil.
func (dcu *DiscordChannelUpdate) SetNillableNsfw(b *bool) *DiscordChannelUpdate {
	if b != nil {
		dcu.SetNsfw(*b)
	}
	return dcu
}

// SetFlags sets the "flags" field.
func (dcu *DiscordChannelUpdate) SetFlags(i int) *DiscordChannelUpdate {
	dcu.mutation.ResetFlags()
	dcu.mutation.SetFlags(i)
	return dcu
}

// SetNillableFlags sets the "flags" field if the given value is not nil.
func (dcu *DiscordChannelUpdate) SetNillableFlags(i *int) *DiscordChannelUpdate {
	if i != nil {
		dcu.SetFlags(*i)
	}
	return dcu
}

// AddFlags adds i to the "flags" field.
func (dcu *DiscordChannelUpdate) AddFlags(i int) *DiscordChannelUpdate {
	dcu.mutation.AddFlags(i)
	return dcu
}

// ClearFlags clears the value of the "flags" field.
func (dcu *DiscordChannelUpdate) ClearFlags() *DiscordChannelUpdate {
	dcu.mutation.ClearFlags()
	return dcu
}

// AddDiscordGuildIDs adds the "discord_guild" edge to the DiscordGuild entity by IDs.
func (dcu *DiscordChannelUpdate) AddDiscordGuildIDs(ids ...uuid.UUID) *DiscordChannelUpdate {
	dcu.mutation.AddDiscordGuildIDs(ids...)
	return dcu
}

// AddDiscordGuild adds the "discord_guild" edges to the DiscordGuild entity.
func (dcu *DiscordChannelUpdate) AddDiscordGuild(d ...*DiscordGuild) *DiscordChannelUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcu.AddDiscordGuildIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the DiscordMessage entity by IDs.
func (dcu *DiscordChannelUpdate) AddMessageIDs(ids ...uuid.UUID) *DiscordChannelUpdate {
	dcu.mutation.AddMessageIDs(ids...)
	return dcu
}

// AddMessages adds the "messages" edges to the DiscordMessage entity.
func (dcu *DiscordChannelUpdate) AddMessages(d ...*DiscordMessage) *DiscordChannelUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcu.AddMessageIDs(ids...)
}

// Mutation returns the DiscordChannelMutation object of the builder.
func (dcu *DiscordChannelUpdate) Mutation() *DiscordChannelMutation {
	return dcu.mutation
}

// ClearDiscordGuild clears all "discord_guild" edges to the DiscordGuild entity.
func (dcu *DiscordChannelUpdate) ClearDiscordGuild() *DiscordChannelUpdate {
	dcu.mutation.ClearDiscordGuild()
	return dcu
}

// RemoveDiscordGuildIDs removes the "discord_guild" edge to DiscordGuild entities by IDs.
func (dcu *DiscordChannelUpdate) RemoveDiscordGuildIDs(ids ...uuid.UUID) *DiscordChannelUpdate {
	dcu.mutation.RemoveDiscordGuildIDs(ids...)
	return dcu
}

// RemoveDiscordGuild removes "discord_guild" edges to DiscordGuild entities.
func (dcu *DiscordChannelUpdate) RemoveDiscordGuild(d ...*DiscordGuild) *DiscordChannelUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcu.RemoveDiscordGuildIDs(ids...)
}

// ClearMessages clears all "messages" edges to the DiscordMessage entity.
func (dcu *DiscordChannelUpdate) ClearMessages() *DiscordChannelUpdate {
	dcu.mutation.ClearMessages()
	return dcu
}

// RemoveMessageIDs removes the "messages" edge to DiscordMessage entities by IDs.
func (dcu *DiscordChannelUpdate) RemoveMessageIDs(ids ...uuid.UUID) *DiscordChannelUpdate {
	dcu.mutation.RemoveMessageIDs(ids...)
	return dcu
}

// RemoveMessages removes "messages" edges to DiscordMessage entities.
func (dcu *DiscordChannelUpdate) RemoveMessages(d ...*DiscordMessage) *DiscordChannelUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcu.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DiscordChannelUpdate) Save(ctx context.Context) (int, error) {
	dcu.defaults()
	return withHooks(ctx, dcu.sqlSave, dcu.mutation, dcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DiscordChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DiscordChannelUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DiscordChannelUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcu *DiscordChannelUpdate) defaults() {
	if _, ok := dcu.mutation.UpdateTime(); !ok {
		v := discordchannel.UpdateDefaultUpdateTime()
		dcu.mutation.SetUpdateTime(v)
	}
}

func (dcu *DiscordChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(discordchannel.Table, discordchannel.Columns, sqlgraph.NewFieldSpec(discordchannel.FieldID, field.TypeUUID))
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.UpdateTime(); ok {
		_spec.SetField(discordchannel.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dcu.mutation.Discordid(); ok {
		_spec.SetField(discordchannel.FieldDiscordid, field.TypeString, value)
	}
	if value, ok := dcu.mutation.Name(); ok {
		_spec.SetField(discordchannel.FieldName, field.TypeString, value)
	}
	if value, ok := dcu.mutation.GetType(); ok {
		_spec.SetField(discordchannel.FieldType, field.TypeInt, value)
	}
	if value, ok := dcu.mutation.AddedType(); ok {
		_spec.AddField(discordchannel.FieldType, field.TypeInt, value)
	}
	if value, ok := dcu.mutation.Nsfw(); ok {
		_spec.SetField(discordchannel.FieldNsfw, field.TypeBool, value)
	}
	if value, ok := dcu.mutation.Flags(); ok {
		_spec.SetField(discordchannel.FieldFlags, field.TypeInt, value)
	}
	if value, ok := dcu.mutation.AddedFlags(); ok {
		_spec.AddField(discordchannel.FieldFlags, field.TypeInt, value)
	}
	if dcu.mutation.FlagsCleared() {
		_spec.ClearField(discordchannel.FieldFlags, field.TypeInt)
	}
	if dcu.mutation.DiscordGuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discordchannel.DiscordGuildTable,
			Columns: discordchannel.DiscordGuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordguild.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.RemovedDiscordGuildIDs(); len(nodes) > 0 && !dcu.mutation.DiscordGuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discordchannel.DiscordGuildTable,
			Columns: discordchannel.DiscordGuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordguild.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.DiscordGuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discordchannel.DiscordGuildTable,
			Columns: discordchannel.DiscordGuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordguild.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordchannel.MessagesTable,
			Columns: []string{discordchannel.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordmessage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !dcu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordchannel.MessagesTable,
			Columns: []string{discordchannel.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordchannel.MessagesTable,
			Columns: []string{discordchannel.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discordchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcu.mutation.done = true
	return n, nil
}

// DiscordChannelUpdateOne is the builder for updating a single DiscordChannel entity.
type DiscordChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscordChannelMutation
}

// SetUpdateTime sets the "update_time" field.
func (dcuo *DiscordChannelUpdateOne) SetUpdateTime(t time.Time) *DiscordChannelUpdateOne {
	dcuo.mutation.SetUpdateTime(t)
	return dcuo
}

// SetDiscordid sets the "discordid" field.
func (dcuo *DiscordChannelUpdateOne) SetDiscordid(s string) *DiscordChannelUpdateOne {
	dcuo.mutation.SetDiscordid(s)
	return dcuo
}

// SetNillableDiscordid sets the "discordid" field if the given value is not nil.
func (dcuo *DiscordChannelUpdateOne) SetNillableDiscordid(s *string) *DiscordChannelUpdateOne {
	if s != nil {
		dcuo.SetDiscordid(*s)
	}
	return dcuo
}

// SetName sets the "name" field.
func (dcuo *DiscordChannelUpdateOne) SetName(s string) *DiscordChannelUpdateOne {
	dcuo.mutation.SetName(s)
	return dcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dcuo *DiscordChannelUpdateOne) SetNillableName(s *string) *DiscordChannelUpdateOne {
	if s != nil {
		dcuo.SetName(*s)
	}
	return dcuo
}

// SetType sets the "type" field.
func (dcuo *DiscordChannelUpdateOne) SetType(dt discord.ChannelType) *DiscordChannelUpdateOne {
	dcuo.mutation.ResetType()
	dcuo.mutation.SetType(dt)
	return dcuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (dcuo *DiscordChannelUpdateOne) SetNillableType(dt *discord.ChannelType) *DiscordChannelUpdateOne {
	if dt != nil {
		dcuo.SetType(*dt)
	}
	return dcuo
}

// AddType adds dt to the "type" field.
func (dcuo *DiscordChannelUpdateOne) AddType(dt discord.ChannelType) *DiscordChannelUpdateOne {
	dcuo.mutation.AddType(dt)
	return dcuo
}

// SetNsfw sets the "nsfw" field.
func (dcuo *DiscordChannelUpdateOne) SetNsfw(b bool) *DiscordChannelUpdateOne {
	dcuo.mutation.SetNsfw(b)
	return dcuo
}

// SetNillableNsfw sets the "nsfw" field if the given value is not nil.
func (dcuo *DiscordChannelUpdateOne) SetNillableNsfw(b *bool) *DiscordChannelUpdateOne {
	if b != nil {
		dcuo.SetNsfw(*b)
	}
	return dcuo
}

// SetFlags sets the "flags" field.
func (dcuo *DiscordChannelUpdateOne) SetFlags(i int) *DiscordChannelUpdateOne {
	dcuo.mutation.ResetFlags()
	dcuo.mutation.SetFlags(i)
	return dcuo
}

// SetNillableFlags sets the "flags" field if the given value is not nil.
func (dcuo *DiscordChannelUpdateOne) SetNillableFlags(i *int) *DiscordChannelUpdateOne {
	if i != nil {
		dcuo.SetFlags(*i)
	}
	return dcuo
}

// AddFlags adds i to the "flags" field.
func (dcuo *DiscordChannelUpdateOne) AddFlags(i int) *DiscordChannelUpdateOne {
	dcuo.mutation.AddFlags(i)
	return dcuo
}

// ClearFlags clears the value of the "flags" field.
func (dcuo *DiscordChannelUpdateOne) ClearFlags() *DiscordChannelUpdateOne {
	dcuo.mutation.ClearFlags()
	return dcuo
}

// AddDiscordGuildIDs adds the "discord_guild" edge to the DiscordGuild entity by IDs.
func (dcuo *DiscordChannelUpdateOne) AddDiscordGuildIDs(ids ...uuid.UUID) *DiscordChannelUpdateOne {
	dcuo.mutation.AddDiscordGuildIDs(ids...)
	return dcuo
}

// AddDiscordGuild adds the "discord_guild" edges to the DiscordGuild entity.
func (dcuo *DiscordChannelUpdateOne) AddDiscordGuild(d ...*DiscordGuild) *DiscordChannelUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcuo.AddDiscordGuildIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the DiscordMessage entity by IDs.
func (dcuo *DiscordChannelUpdateOne) AddMessageIDs(ids ...uuid.UUID) *DiscordChannelUpdateOne {
	dcuo.mutation.AddMessageIDs(ids...)
	return dcuo
}

// AddMessages adds the "messages" edges to the DiscordMessage entity.
func (dcuo *DiscordChannelUpdateOne) AddMessages(d ...*DiscordMessage) *DiscordChannelUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcuo.AddMessageIDs(ids...)
}

// Mutation returns the DiscordChannelMutation object of the builder.
func (dcuo *DiscordChannelUpdateOne) Mutation() *DiscordChannelMutation {
	return dcuo.mutation
}

// ClearDiscordGuild clears all "discord_guild" edges to the DiscordGuild entity.
func (dcuo *DiscordChannelUpdateOne) ClearDiscordGuild() *DiscordChannelUpdateOne {
	dcuo.mutation.ClearDiscordGuild()
	return dcuo
}

// RemoveDiscordGuildIDs removes the "discord_guild" edge to DiscordGuild entities by IDs.
func (dcuo *DiscordChannelUpdateOne) RemoveDiscordGuildIDs(ids ...uuid.UUID) *DiscordChannelUpdateOne {
	dcuo.mutation.RemoveDiscordGuildIDs(ids...)
	return dcuo
}

// RemoveDiscordGuild removes "discord_guild" edges to DiscordGuild entities.
func (dcuo *DiscordChannelUpdateOne) RemoveDiscordGuild(d ...*DiscordGuild) *DiscordChannelUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcuo.RemoveDiscordGuildIDs(ids...)
}

// ClearMessages clears all "messages" edges to the DiscordMessage entity.
func (dcuo *DiscordChannelUpdateOne) ClearMessages() *DiscordChannelUpdateOne {
	dcuo.mutation.ClearMessages()
	return dcuo
}

// RemoveMessageIDs removes the "messages" edge to DiscordMessage entities by IDs.
func (dcuo *DiscordChannelUpdateOne) RemoveMessageIDs(ids ...uuid.UUID) *DiscordChannelUpdateOne {
	dcuo.mutation.RemoveMessageIDs(ids...)
	return dcuo
}

// RemoveMessages removes "messages" edges to DiscordMessage entities.
func (dcuo *DiscordChannelUpdateOne) RemoveMessages(d ...*DiscordMessage) *DiscordChannelUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcuo.RemoveMessageIDs(ids...)
}

// Where appends a list predicates to the DiscordChannelUpdate builder.
func (dcuo *DiscordChannelUpdateOne) Where(ps ...predicate.DiscordChannel) *DiscordChannelUpdateOne {
	dcuo.mutation.Where(ps...)
	return dcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DiscordChannelUpdateOne) Select(field string, fields ...string) *DiscordChannelUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DiscordChannel entity.
func (dcuo *DiscordChannelUpdateOne) Save(ctx context.Context) (*DiscordChannel, error) {
	dcuo.defaults()
	return withHooks(ctx, dcuo.sqlSave, dcuo.mutation, dcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DiscordChannelUpdateOne) SaveX(ctx context.Context) *DiscordChannel {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DiscordChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DiscordChannelUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcuo *DiscordChannelUpdateOne) defaults() {
	if _, ok := dcuo.mutation.UpdateTime(); !ok {
		v := discordchannel.UpdateDefaultUpdateTime()
		dcuo.mutation.SetUpdateTime(v)
	}
}

func (dcuo *DiscordChannelUpdateOne) sqlSave(ctx context.Context) (_node *DiscordChannel, err error) {
	_spec := sqlgraph.NewUpdateSpec(discordchannel.Table, discordchannel.Columns, sqlgraph.NewFieldSpec(discordchannel.FieldID, field.TypeUUID))
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DiscordChannel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discordchannel.FieldID)
		for _, f := range fields {
			if !discordchannel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != discordchannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcuo.mutation.UpdateTime(); ok {
		_spec.SetField(discordchannel.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dcuo.mutation.Discordid(); ok {
		_spec.SetField(discordchannel.FieldDiscordid, field.TypeString, value)
	}
	if value, ok := dcuo.mutation.Name(); ok {
		_spec.SetField(discordchannel.FieldName, field.TypeString, value)
	}
	if value, ok := dcuo.mutation.GetType(); ok {
		_spec.SetField(discordchannel.FieldType, field.TypeInt, value)
	}
	if value, ok := dcuo.mutation.AddedType(); ok {
		_spec.AddField(discordchannel.FieldType, field.TypeInt, value)
	}
	if value, ok := dcuo.mutation.Nsfw(); ok {
		_spec.SetField(discordchannel.FieldNsfw, field.TypeBool, value)
	}
	if value, ok := dcuo.mutation.Flags(); ok {
		_spec.SetField(discordchannel.FieldFlags, field.TypeInt, value)
	}
	if value, ok := dcuo.mutation.AddedFlags(); ok {
		_spec.AddField(discordchannel.FieldFlags, field.TypeInt, value)
	}
	if dcuo.mutation.FlagsCleared() {
		_spec.ClearField(discordchannel.FieldFlags, field.TypeInt)
	}
	if dcuo.mutation.DiscordGuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discordchannel.DiscordGuildTable,
			Columns: discordchannel.DiscordGuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordguild.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.RemovedDiscordGuildIDs(); len(nodes) > 0 && !dcuo.mutation.DiscordGuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discordchannel.DiscordGuildTable,
			Columns: discordchannel.DiscordGuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordguild.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.DiscordGuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discordchannel.DiscordGuildTable,
			Columns: discordchannel.DiscordGuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordguild.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordchannel.MessagesTable,
			Columns: []string{discordchannel.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordmessage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !dcuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordchannel.MessagesTable,
			Columns: []string{discordchannel.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordchannel.MessagesTable,
			Columns: []string{discordchannel.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DiscordChannel{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discordchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcuo.mutation.done = true
	return _node, nil
}
