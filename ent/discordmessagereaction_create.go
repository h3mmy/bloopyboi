// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bwmarrin/discordgo"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/discordmessage"
	"github.com/h3mmy/bloopyboi/ent/discordmessagereaction"
	"github.com/h3mmy/bloopyboi/ent/discorduser"
)

// DiscordMessageReactionCreate is the builder for creating a DiscordMessageReaction entity.
type DiscordMessageReactionCreate struct {
	config
	mutation *DiscordMessageReactionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (dmrc *DiscordMessageReactionCreate) SetCreateTime(t time.Time) *DiscordMessageReactionCreate {
	dmrc.mutation.SetCreateTime(t)
	return dmrc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dmrc *DiscordMessageReactionCreate) SetNillableCreateTime(t *time.Time) *DiscordMessageReactionCreate {
	if t != nil {
		dmrc.SetCreateTime(*t)
	}
	return dmrc
}

// SetUpdateTime sets the "update_time" field.
func (dmrc *DiscordMessageReactionCreate) SetUpdateTime(t time.Time) *DiscordMessageReactionCreate {
	dmrc.mutation.SetUpdateTime(t)
	return dmrc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (dmrc *DiscordMessageReactionCreate) SetNillableUpdateTime(t *time.Time) *DiscordMessageReactionCreate {
	if t != nil {
		dmrc.SetUpdateTime(*t)
	}
	return dmrc
}

// SetEmojiAPIName sets the "emoji_api_name" field.
func (dmrc *DiscordMessageReactionCreate) SetEmojiAPIName(s string) *DiscordMessageReactionCreate {
	dmrc.mutation.SetEmojiAPIName(s)
	return dmrc
}

// SetRemoved sets the "removed" field.
func (dmrc *DiscordMessageReactionCreate) SetRemoved(b bool) *DiscordMessageReactionCreate {
	dmrc.mutation.SetRemoved(b)
	return dmrc
}

// SetNillableRemoved sets the "removed" field if the given value is not nil.
func (dmrc *DiscordMessageReactionCreate) SetNillableRemoved(b *bool) *DiscordMessageReactionCreate {
	if b != nil {
		dmrc.SetRemoved(*b)
	}
	return dmrc
}

// SetRaw sets the "raw" field.
func (dmrc *DiscordMessageReactionCreate) SetRaw(dr discordgo.MessageReaction) *DiscordMessageReactionCreate {
	dmrc.mutation.SetRaw(dr)
	return dmrc
}

// SetID sets the "id" field.
func (dmrc *DiscordMessageReactionCreate) SetID(u uuid.UUID) *DiscordMessageReactionCreate {
	dmrc.mutation.SetID(u)
	return dmrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dmrc *DiscordMessageReactionCreate) SetNillableID(u *uuid.UUID) *DiscordMessageReactionCreate {
	if u != nil {
		dmrc.SetID(*u)
	}
	return dmrc
}

// SetDiscordMessageID sets the "discord_message" edge to the DiscordMessage entity by ID.
func (dmrc *DiscordMessageReactionCreate) SetDiscordMessageID(id uuid.UUID) *DiscordMessageReactionCreate {
	dmrc.mutation.SetDiscordMessageID(id)
	return dmrc
}

// SetNillableDiscordMessageID sets the "discord_message" edge to the DiscordMessage entity by ID if the given value is not nil.
func (dmrc *DiscordMessageReactionCreate) SetNillableDiscordMessageID(id *uuid.UUID) *DiscordMessageReactionCreate {
	if id != nil {
		dmrc = dmrc.SetDiscordMessageID(*id)
	}
	return dmrc
}

// SetDiscordMessage sets the "discord_message" edge to the DiscordMessage entity.
func (dmrc *DiscordMessageReactionCreate) SetDiscordMessage(d *DiscordMessage) *DiscordMessageReactionCreate {
	return dmrc.SetDiscordMessageID(d.ID)
}

// SetAuthorID sets the "author" edge to the DiscordUser entity by ID.
func (dmrc *DiscordMessageReactionCreate) SetAuthorID(id uuid.UUID) *DiscordMessageReactionCreate {
	dmrc.mutation.SetAuthorID(id)
	return dmrc
}

// SetNillableAuthorID sets the "author" edge to the DiscordUser entity by ID if the given value is not nil.
func (dmrc *DiscordMessageReactionCreate) SetNillableAuthorID(id *uuid.UUID) *DiscordMessageReactionCreate {
	if id != nil {
		dmrc = dmrc.SetAuthorID(*id)
	}
	return dmrc
}

// SetAuthor sets the "author" edge to the DiscordUser entity.
func (dmrc *DiscordMessageReactionCreate) SetAuthor(d *DiscordUser) *DiscordMessageReactionCreate {
	return dmrc.SetAuthorID(d.ID)
}

// Mutation returns the DiscordMessageReactionMutation object of the builder.
func (dmrc *DiscordMessageReactionCreate) Mutation() *DiscordMessageReactionMutation {
	return dmrc.mutation
}

// Save creates the DiscordMessageReaction in the database.
func (dmrc *DiscordMessageReactionCreate) Save(ctx context.Context) (*DiscordMessageReaction, error) {
	dmrc.defaults()
	return withHooks(ctx, dmrc.sqlSave, dmrc.mutation, dmrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dmrc *DiscordMessageReactionCreate) SaveX(ctx context.Context) *DiscordMessageReaction {
	v, err := dmrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dmrc *DiscordMessageReactionCreate) Exec(ctx context.Context) error {
	_, err := dmrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmrc *DiscordMessageReactionCreate) ExecX(ctx context.Context) {
	if err := dmrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dmrc *DiscordMessageReactionCreate) defaults() {
	if _, ok := dmrc.mutation.CreateTime(); !ok {
		v := discordmessagereaction.DefaultCreateTime()
		dmrc.mutation.SetCreateTime(v)
	}
	if _, ok := dmrc.mutation.UpdateTime(); !ok {
		v := discordmessagereaction.DefaultUpdateTime()
		dmrc.mutation.SetUpdateTime(v)
	}
	if _, ok := dmrc.mutation.Removed(); !ok {
		v := discordmessagereaction.DefaultRemoved
		dmrc.mutation.SetRemoved(v)
	}
	if _, ok := dmrc.mutation.ID(); !ok {
		v := discordmessagereaction.DefaultID()
		dmrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dmrc *DiscordMessageReactionCreate) check() error {
	if _, ok := dmrc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "DiscordMessageReaction.create_time"`)}
	}
	if _, ok := dmrc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "DiscordMessageReaction.update_time"`)}
	}
	if _, ok := dmrc.mutation.EmojiAPIName(); !ok {
		return &ValidationError{Name: "emoji_api_name", err: errors.New(`ent: missing required field "DiscordMessageReaction.emoji_api_name"`)}
	}
	if _, ok := dmrc.mutation.Removed(); !ok {
		return &ValidationError{Name: "removed", err: errors.New(`ent: missing required field "DiscordMessageReaction.removed"`)}
	}
	if _, ok := dmrc.mutation.Raw(); !ok {
		return &ValidationError{Name: "raw", err: errors.New(`ent: missing required field "DiscordMessageReaction.raw"`)}
	}
	return nil
}

func (dmrc *DiscordMessageReactionCreate) sqlSave(ctx context.Context) (*DiscordMessageReaction, error) {
	if err := dmrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dmrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dmrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dmrc.mutation.id = &_node.ID
	dmrc.mutation.done = true
	return _node, nil
}

func (dmrc *DiscordMessageReactionCreate) createSpec() (*DiscordMessageReaction, *sqlgraph.CreateSpec) {
	var (
		_node = &DiscordMessageReaction{config: dmrc.config}
		_spec = sqlgraph.NewCreateSpec(discordmessagereaction.Table, sqlgraph.NewFieldSpec(discordmessagereaction.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = dmrc.conflict
	if id, ok := dmrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dmrc.mutation.CreateTime(); ok {
		_spec.SetField(discordmessagereaction.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := dmrc.mutation.UpdateTime(); ok {
		_spec.SetField(discordmessagereaction.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := dmrc.mutation.EmojiAPIName(); ok {
		_spec.SetField(discordmessagereaction.FieldEmojiAPIName, field.TypeString, value)
		_node.EmojiAPIName = value
	}
	if value, ok := dmrc.mutation.Removed(); ok {
		_spec.SetField(discordmessagereaction.FieldRemoved, field.TypeBool, value)
		_node.Removed = value
	}
	if value, ok := dmrc.mutation.Raw(); ok {
		_spec.SetField(discordmessagereaction.FieldRaw, field.TypeJSON, value)
		_node.Raw = value
	}
	if nodes := dmrc.mutation.DiscordMessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordmessagereaction.DiscordMessageTable,
			Columns: []string{discordmessagereaction.DiscordMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.discord_message_message_reactions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dmrc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordmessagereaction.AuthorTable,
			Columns: []string{discordmessagereaction.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discorduser.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.discord_user_message_reactions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DiscordMessageReaction.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DiscordMessageReactionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (dmrc *DiscordMessageReactionCreate) OnConflict(opts ...sql.ConflictOption) *DiscordMessageReactionUpsertOne {
	dmrc.conflict = opts
	return &DiscordMessageReactionUpsertOne{
		create: dmrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DiscordMessageReaction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dmrc *DiscordMessageReactionCreate) OnConflictColumns(columns ...string) *DiscordMessageReactionUpsertOne {
	dmrc.conflict = append(dmrc.conflict, sql.ConflictColumns(columns...))
	return &DiscordMessageReactionUpsertOne{
		create: dmrc,
	}
}

type (
	// DiscordMessageReactionUpsertOne is the builder for "upsert"-ing
	//  one DiscordMessageReaction node.
	DiscordMessageReactionUpsertOne struct {
		create *DiscordMessageReactionCreate
	}

	// DiscordMessageReactionUpsert is the "OnConflict" setter.
	DiscordMessageReactionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *DiscordMessageReactionUpsert) SetUpdateTime(v time.Time) *DiscordMessageReactionUpsert {
	u.Set(discordmessagereaction.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DiscordMessageReactionUpsert) UpdateUpdateTime() *DiscordMessageReactionUpsert {
	u.SetExcluded(discordmessagereaction.FieldUpdateTime)
	return u
}

// SetEmojiAPIName sets the "emoji_api_name" field.
func (u *DiscordMessageReactionUpsert) SetEmojiAPIName(v string) *DiscordMessageReactionUpsert {
	u.Set(discordmessagereaction.FieldEmojiAPIName, v)
	return u
}

// UpdateEmojiAPIName sets the "emoji_api_name" field to the value that was provided on create.
func (u *DiscordMessageReactionUpsert) UpdateEmojiAPIName() *DiscordMessageReactionUpsert {
	u.SetExcluded(discordmessagereaction.FieldEmojiAPIName)
	return u
}

// SetRemoved sets the "removed" field.
func (u *DiscordMessageReactionUpsert) SetRemoved(v bool) *DiscordMessageReactionUpsert {
	u.Set(discordmessagereaction.FieldRemoved, v)
	return u
}

// UpdateRemoved sets the "removed" field to the value that was provided on create.
func (u *DiscordMessageReactionUpsert) UpdateRemoved() *DiscordMessageReactionUpsert {
	u.SetExcluded(discordmessagereaction.FieldRemoved)
	return u
}

// SetRaw sets the "raw" field.
func (u *DiscordMessageReactionUpsert) SetRaw(v discordgo.MessageReaction) *DiscordMessageReactionUpsert {
	u.Set(discordmessagereaction.FieldRaw, v)
	return u
}

// UpdateRaw sets the "raw" field to the value that was provided on create.
func (u *DiscordMessageReactionUpsert) UpdateRaw() *DiscordMessageReactionUpsert {
	u.SetExcluded(discordmessagereaction.FieldRaw)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DiscordMessageReaction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(discordmessagereaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DiscordMessageReactionUpsertOne) UpdateNewValues() *DiscordMessageReactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(discordmessagereaction.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(discordmessagereaction.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DiscordMessageReaction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DiscordMessageReactionUpsertOne) Ignore() *DiscordMessageReactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DiscordMessageReactionUpsertOne) DoNothing() *DiscordMessageReactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DiscordMessageReactionCreate.OnConflict
// documentation for more info.
func (u *DiscordMessageReactionUpsertOne) Update(set func(*DiscordMessageReactionUpsert)) *DiscordMessageReactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DiscordMessageReactionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *DiscordMessageReactionUpsertOne) SetUpdateTime(v time.Time) *DiscordMessageReactionUpsertOne {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DiscordMessageReactionUpsertOne) UpdateUpdateTime() *DiscordMessageReactionUpsertOne {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetEmojiAPIName sets the "emoji_api_name" field.
func (u *DiscordMessageReactionUpsertOne) SetEmojiAPIName(v string) *DiscordMessageReactionUpsertOne {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.SetEmojiAPIName(v)
	})
}

// UpdateEmojiAPIName sets the "emoji_api_name" field to the value that was provided on create.
func (u *DiscordMessageReactionUpsertOne) UpdateEmojiAPIName() *DiscordMessageReactionUpsertOne {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.UpdateEmojiAPIName()
	})
}

// SetRemoved sets the "removed" field.
func (u *DiscordMessageReactionUpsertOne) SetRemoved(v bool) *DiscordMessageReactionUpsertOne {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.SetRemoved(v)
	})
}

// UpdateRemoved sets the "removed" field to the value that was provided on create.
func (u *DiscordMessageReactionUpsertOne) UpdateRemoved() *DiscordMessageReactionUpsertOne {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.UpdateRemoved()
	})
}

// SetRaw sets the "raw" field.
func (u *DiscordMessageReactionUpsertOne) SetRaw(v discordgo.MessageReaction) *DiscordMessageReactionUpsertOne {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.SetRaw(v)
	})
}

// UpdateRaw sets the "raw" field to the value that was provided on create.
func (u *DiscordMessageReactionUpsertOne) UpdateRaw() *DiscordMessageReactionUpsertOne {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.UpdateRaw()
	})
}

// Exec executes the query.
func (u *DiscordMessageReactionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DiscordMessageReactionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DiscordMessageReactionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DiscordMessageReactionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DiscordMessageReactionUpsertOne.ID is not supported by MySQL driver. Use DiscordMessageReactionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DiscordMessageReactionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DiscordMessageReactionCreateBulk is the builder for creating many DiscordMessageReaction entities in bulk.
type DiscordMessageReactionCreateBulk struct {
	config
	err      error
	builders []*DiscordMessageReactionCreate
	conflict []sql.ConflictOption
}

// Save creates the DiscordMessageReaction entities in the database.
func (dmrcb *DiscordMessageReactionCreateBulk) Save(ctx context.Context) ([]*DiscordMessageReaction, error) {
	if dmrcb.err != nil {
		return nil, dmrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dmrcb.builders))
	nodes := make([]*DiscordMessageReaction, len(dmrcb.builders))
	mutators := make([]Mutator, len(dmrcb.builders))
	for i := range dmrcb.builders {
		func(i int, root context.Context) {
			builder := dmrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DiscordMessageReactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dmrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dmrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dmrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dmrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dmrcb *DiscordMessageReactionCreateBulk) SaveX(ctx context.Context) []*DiscordMessageReaction {
	v, err := dmrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dmrcb *DiscordMessageReactionCreateBulk) Exec(ctx context.Context) error {
	_, err := dmrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmrcb *DiscordMessageReactionCreateBulk) ExecX(ctx context.Context) {
	if err := dmrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DiscordMessageReaction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DiscordMessageReactionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (dmrcb *DiscordMessageReactionCreateBulk) OnConflict(opts ...sql.ConflictOption) *DiscordMessageReactionUpsertBulk {
	dmrcb.conflict = opts
	return &DiscordMessageReactionUpsertBulk{
		create: dmrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DiscordMessageReaction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dmrcb *DiscordMessageReactionCreateBulk) OnConflictColumns(columns ...string) *DiscordMessageReactionUpsertBulk {
	dmrcb.conflict = append(dmrcb.conflict, sql.ConflictColumns(columns...))
	return &DiscordMessageReactionUpsertBulk{
		create: dmrcb,
	}
}

// DiscordMessageReactionUpsertBulk is the builder for "upsert"-ing
// a bulk of DiscordMessageReaction nodes.
type DiscordMessageReactionUpsertBulk struct {
	create *DiscordMessageReactionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DiscordMessageReaction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(discordmessagereaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DiscordMessageReactionUpsertBulk) UpdateNewValues() *DiscordMessageReactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(discordmessagereaction.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(discordmessagereaction.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DiscordMessageReaction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DiscordMessageReactionUpsertBulk) Ignore() *DiscordMessageReactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DiscordMessageReactionUpsertBulk) DoNothing() *DiscordMessageReactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DiscordMessageReactionCreateBulk.OnConflict
// documentation for more info.
func (u *DiscordMessageReactionUpsertBulk) Update(set func(*DiscordMessageReactionUpsert)) *DiscordMessageReactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DiscordMessageReactionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *DiscordMessageReactionUpsertBulk) SetUpdateTime(v time.Time) *DiscordMessageReactionUpsertBulk {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DiscordMessageReactionUpsertBulk) UpdateUpdateTime() *DiscordMessageReactionUpsertBulk {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetEmojiAPIName sets the "emoji_api_name" field.
func (u *DiscordMessageReactionUpsertBulk) SetEmojiAPIName(v string) *DiscordMessageReactionUpsertBulk {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.SetEmojiAPIName(v)
	})
}

// UpdateEmojiAPIName sets the "emoji_api_name" field to the value that was provided on create.
func (u *DiscordMessageReactionUpsertBulk) UpdateEmojiAPIName() *DiscordMessageReactionUpsertBulk {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.UpdateEmojiAPIName()
	})
}

// SetRemoved sets the "removed" field.
func (u *DiscordMessageReactionUpsertBulk) SetRemoved(v bool) *DiscordMessageReactionUpsertBulk {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.SetRemoved(v)
	})
}

// UpdateRemoved sets the "removed" field to the value that was provided on create.
func (u *DiscordMessageReactionUpsertBulk) UpdateRemoved() *DiscordMessageReactionUpsertBulk {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.UpdateRemoved()
	})
}

// SetRaw sets the "raw" field.
func (u *DiscordMessageReactionUpsertBulk) SetRaw(v discordgo.MessageReaction) *DiscordMessageReactionUpsertBulk {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.SetRaw(v)
	})
}

// UpdateRaw sets the "raw" field to the value that was provided on create.
func (u *DiscordMessageReactionUpsertBulk) UpdateRaw() *DiscordMessageReactionUpsertBulk {
	return u.Update(func(s *DiscordMessageReactionUpsert) {
		s.UpdateRaw()
	})
}

// Exec executes the query.
func (u *DiscordMessageReactionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DiscordMessageReactionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DiscordMessageReactionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DiscordMessageReactionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
