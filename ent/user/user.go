// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBloopyId holds the string denoting the bloopyid field in the database.
	FieldBloopyId = "bloopy_id"
	// FieldDiscordid holds the string denoting the discordid field in the database.
	FieldDiscordid = "discordid"
	// FieldPlexid holds the string denoting the plexid field in the database.
	FieldPlexid = "plexid"
	// FieldBloopnetid holds the string denoting the bloopnetid field in the database.
	FieldBloopnetid = "bloopnetid"
	// FieldAuthentikpkid holds the string denoting the authentikpkid field in the database.
	FieldAuthentikpkid = "authentikpkid"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// EdgeMediaRequest holds the string denoting the mediarequest edge name in mutations.
	EdgeMediaRequest = "mediaRequest"
	// Table holds the table name of the user in the database.
	Table = "users"
	// GroupsTable is the table that holds the groups relation/edge. The primary key declared below.
	GroupsTable = "group_users"
	// GroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupsInverseTable = "groups"
	// MediaRequestTable is the table that holds the mediaRequest relation/edge.
	MediaRequestTable = "media_requests"
	// MediaRequestInverseTable is the table name for the MediaRequest entity.
	// It exists in this package in order to avoid circular dependency with the "mediarequest" package.
	MediaRequestInverseTable = "media_requests"
	// MediaRequestColumn is the table column denoting the mediaRequest relation/edge.
	MediaRequestColumn = "user_media_request"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldBloopyId,
	FieldDiscordid,
	FieldPlexid,
	FieldBloopnetid,
	FieldAuthentikpkid,
}

var (
	// GroupsPrimaryKey and GroupsColumn2 are the table columns denoting the
	// primary key for the groups relation (M2M).
	GroupsPrimaryKey = []string{"group_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDiscordid holds the default value on creation for the "discordid" field.
	DefaultDiscordid string
	// DefaultPlexid holds the default value on creation for the "Plexid" field.
	DefaultPlexid string
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBloopyId orders the results by the bloopyId field.
func ByBloopyId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBloopyId, opts...).ToFunc()
}

// ByDiscordid orders the results by the discordid field.
func ByDiscordid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscordid, opts...).ToFunc()
}

// ByPlexid orders the results by the Plexid field.
func ByPlexid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlexid, opts...).ToFunc()
}

// ByBloopnetid orders the results by the bloopnetid field.
func ByBloopnetid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBloopnetid, opts...).ToFunc()
}

// ByAuthentikpkid orders the results by the authentikpkid field.
func ByAuthentikpkid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthentikpkid, opts...).ToFunc()
}

// ByGroupsCount orders the results by groups count.
func ByGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupsStep(), opts...)
	}
}

// ByGroups orders the results by groups terms.
func ByGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMediaRequestCount orders the results by mediaRequest count.
func ByMediaRequestCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMediaRequestStep(), opts...)
	}
}

// ByMediaRequest orders the results by mediaRequest terms.
func ByMediaRequest(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMediaRequestStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, GroupsTable, GroupsPrimaryKey...),
	)
}
func newMediaRequestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MediaRequestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MediaRequestTable, MediaRequestColumn),
	)
}
