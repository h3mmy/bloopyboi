// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bwmarrin/discordgo"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/discordmessage"
	"github.com/h3mmy/bloopyboi/ent/discordmessagereaction"
	"github.com/h3mmy/bloopyboi/ent/discorduser"
)

// DiscordMessageReaction is the model entity for the DiscordMessageReaction schema.
type DiscordMessageReaction struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// EmojiAPIName holds the value of the "emoji_api_name" field.
	EmojiAPIName string `json:"emoji_api_name,omitempty"`
	// Removed holds the value of the "removed" field.
	Removed bool `json:"removed,omitempty"`
	// Raw holds the value of the "raw" field.
	Raw discordgo.MessageReaction `json:"raw,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiscordMessageReactionQuery when eager-loading is set.
	Edges                             DiscordMessageReactionEdges `json:"edges"`
	discord_message_message_reactions *uuid.UUID
	discord_user_message_reactions    *uuid.UUID
	selectValues                      sql.SelectValues
}

// DiscordMessageReactionEdges holds the relations/edges for other nodes in the graph.
type DiscordMessageReactionEdges struct {
	// DiscordMessage holds the value of the discord_message edge.
	DiscordMessage *DiscordMessage `json:"discord_message,omitempty"`
	// Author holds the value of the author edge.
	Author *DiscordUser `json:"author,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DiscordMessageOrErr returns the DiscordMessage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscordMessageReactionEdges) DiscordMessageOrErr() (*DiscordMessage, error) {
	if e.DiscordMessage != nil {
		return e.DiscordMessage, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: discordmessage.Label}
	}
	return nil, &NotLoadedError{edge: "discord_message"}
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscordMessageReactionEdges) AuthorOrErr() (*DiscordUser, error) {
	if e.Author != nil {
		return e.Author, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: discorduser.Label}
	}
	return nil, &NotLoadedError{edge: "author"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DiscordMessageReaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case discordmessagereaction.FieldRaw:
			values[i] = new([]byte)
		case discordmessagereaction.FieldRemoved:
			values[i] = new(sql.NullBool)
		case discordmessagereaction.FieldEmojiAPIName:
			values[i] = new(sql.NullString)
		case discordmessagereaction.FieldCreateTime, discordmessagereaction.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case discordmessagereaction.FieldID:
			values[i] = new(uuid.UUID)
		case discordmessagereaction.ForeignKeys[0]: // discord_message_message_reactions
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case discordmessagereaction.ForeignKeys[1]: // discord_user_message_reactions
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DiscordMessageReaction fields.
func (dmr *DiscordMessageReaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discordmessagereaction.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dmr.ID = *value
			}
		case discordmessagereaction.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				dmr.CreateTime = value.Time
			}
		case discordmessagereaction.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				dmr.UpdateTime = value.Time
			}
		case discordmessagereaction.FieldEmojiAPIName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field emoji_api_name", values[i])
			} else if value.Valid {
				dmr.EmojiAPIName = value.String
			}
		case discordmessagereaction.FieldRemoved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field removed", values[i])
			} else if value.Valid {
				dmr.Removed = value.Bool
			}
		case discordmessagereaction.FieldRaw:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field raw", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dmr.Raw); err != nil {
					return fmt.Errorf("unmarshal field raw: %w", err)
				}
			}
		case discordmessagereaction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field discord_message_message_reactions", values[i])
			} else if value.Valid {
				dmr.discord_message_message_reactions = new(uuid.UUID)
				*dmr.discord_message_message_reactions = *value.S.(*uuid.UUID)
			}
		case discordmessagereaction.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field discord_user_message_reactions", values[i])
			} else if value.Valid {
				dmr.discord_user_message_reactions = new(uuid.UUID)
				*dmr.discord_user_message_reactions = *value.S.(*uuid.UUID)
			}
		default:
			dmr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DiscordMessageReaction.
// This includes values selected through modifiers, order, etc.
func (dmr *DiscordMessageReaction) Value(name string) (ent.Value, error) {
	return dmr.selectValues.Get(name)
}

// QueryDiscordMessage queries the "discord_message" edge of the DiscordMessageReaction entity.
func (dmr *DiscordMessageReaction) QueryDiscordMessage() *DiscordMessageQuery {
	return NewDiscordMessageReactionClient(dmr.config).QueryDiscordMessage(dmr)
}

// QueryAuthor queries the "author" edge of the DiscordMessageReaction entity.
func (dmr *DiscordMessageReaction) QueryAuthor() *DiscordUserQuery {
	return NewDiscordMessageReactionClient(dmr.config).QueryAuthor(dmr)
}

// Update returns a builder for updating this DiscordMessageReaction.
// Note that you need to call DiscordMessageReaction.Unwrap() before calling this method if this DiscordMessageReaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (dmr *DiscordMessageReaction) Update() *DiscordMessageReactionUpdateOne {
	return NewDiscordMessageReactionClient(dmr.config).UpdateOne(dmr)
}

// Unwrap unwraps the DiscordMessageReaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dmr *DiscordMessageReaction) Unwrap() *DiscordMessageReaction {
	_tx, ok := dmr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DiscordMessageReaction is not a transactional entity")
	}
	dmr.config.driver = _tx.drv
	return dmr
}

// String implements the fmt.Stringer.
func (dmr *DiscordMessageReaction) String() string {
	var builder strings.Builder
	builder.WriteString("DiscordMessageReaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dmr.ID))
	builder.WriteString("create_time=")
	builder.WriteString(dmr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(dmr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("emoji_api_name=")
	builder.WriteString(dmr.EmojiAPIName)
	builder.WriteString(", ")
	builder.WriteString("removed=")
	builder.WriteString(fmt.Sprintf("%v", dmr.Removed))
	builder.WriteString(", ")
	builder.WriteString("raw=")
	builder.WriteString(fmt.Sprintf("%v", dmr.Raw))
	builder.WriteByte(')')
	return builder.String()
}

// DiscordMessageReactions is a parsable slice of DiscordMessageReaction.
type DiscordMessageReactions []*DiscordMessageReaction
