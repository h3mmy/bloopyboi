// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/discordchannel"
	"github.com/h3mmy/bloopyboi/internal/discord"
)

// DiscordChannel is the model entity for the DiscordChannel schema.
type DiscordChannel struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Discordid holds the value of the "discordid" field.
	Discordid string `json:"discordid,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type discord.ChannelType `json:"type,omitempty"`
	// Nsfw holds the value of the "nsfw" field.
	Nsfw bool `json:"nsfw,omitempty"`
	// channel flags combined as a bitfield
	Flags int `json:"flags,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiscordChannelQuery when eager-loading is set.
	Edges        DiscordChannelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DiscordChannelEdges holds the relations/edges for other nodes in the graph.
type DiscordChannelEdges struct {
	// DiscordGuild holds the value of the discord_guild edge.
	DiscordGuild []*DiscordGuild `json:"discord_guild,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*DiscordMessage `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes       [2]bool
	namedDiscordGuild map[string][]*DiscordGuild
	namedMessages     map[string][]*DiscordMessage
}

// DiscordGuildOrErr returns the DiscordGuild value or an error if the edge
// was not loaded in eager-loading.
func (e DiscordChannelEdges) DiscordGuildOrErr() ([]*DiscordGuild, error) {
	if e.loadedTypes[0] {
		return e.DiscordGuild, nil
	}
	return nil, &NotLoadedError{edge: "discord_guild"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e DiscordChannelEdges) MessagesOrErr() ([]*DiscordMessage, error) {
	if e.loadedTypes[1] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DiscordChannel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case discordchannel.FieldNsfw:
			values[i] = new(sql.NullBool)
		case discordchannel.FieldType, discordchannel.FieldFlags:
			values[i] = new(sql.NullInt64)
		case discordchannel.FieldDiscordid, discordchannel.FieldName:
			values[i] = new(sql.NullString)
		case discordchannel.FieldCreateTime, discordchannel.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case discordchannel.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DiscordChannel fields.
func (dc *DiscordChannel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discordchannel.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dc.ID = *value
			}
		case discordchannel.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				dc.CreateTime = value.Time
			}
		case discordchannel.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				dc.UpdateTime = value.Time
			}
		case discordchannel.FieldDiscordid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discordid", values[i])
			} else if value.Valid {
				dc.Discordid = value.String
			}
		case discordchannel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dc.Name = value.String
			}
		case discordchannel.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				dc.Type = discord.ChannelType(value.Int64)
			}
		case discordchannel.FieldNsfw:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field nsfw", values[i])
			} else if value.Valid {
				dc.Nsfw = value.Bool
			}
		case discordchannel.FieldFlags:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field flags", values[i])
			} else if value.Valid {
				dc.Flags = int(value.Int64)
			}
		default:
			dc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DiscordChannel.
// This includes values selected through modifiers, order, etc.
func (dc *DiscordChannel) Value(name string) (ent.Value, error) {
	return dc.selectValues.Get(name)
}

// QueryDiscordGuild queries the "discord_guild" edge of the DiscordChannel entity.
func (dc *DiscordChannel) QueryDiscordGuild() *DiscordGuildQuery {
	return NewDiscordChannelClient(dc.config).QueryDiscordGuild(dc)
}

// QueryMessages queries the "messages" edge of the DiscordChannel entity.
func (dc *DiscordChannel) QueryMessages() *DiscordMessageQuery {
	return NewDiscordChannelClient(dc.config).QueryMessages(dc)
}

// Update returns a builder for updating this DiscordChannel.
// Note that you need to call DiscordChannel.Unwrap() before calling this method if this DiscordChannel
// was returned from a transaction, and the transaction was committed or rolled back.
func (dc *DiscordChannel) Update() *DiscordChannelUpdateOne {
	return NewDiscordChannelClient(dc.config).UpdateOne(dc)
}

// Unwrap unwraps the DiscordChannel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dc *DiscordChannel) Unwrap() *DiscordChannel {
	_tx, ok := dc.config.driver.(*txDriver)
	if !ok {
		panic("ent: DiscordChannel is not a transactional entity")
	}
	dc.config.driver = _tx.drv
	return dc
}

// String implements the fmt.Stringer.
func (dc *DiscordChannel) String() string {
	var builder strings.Builder
	builder.WriteString("DiscordChannel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dc.ID))
	builder.WriteString("create_time=")
	builder.WriteString(dc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(dc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("discordid=")
	builder.WriteString(dc.Discordid)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(dc.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", dc.Type))
	builder.WriteString(", ")
	builder.WriteString("nsfw=")
	builder.WriteString(fmt.Sprintf("%v", dc.Nsfw))
	builder.WriteString(", ")
	builder.WriteString("flags=")
	builder.WriteString(fmt.Sprintf("%v", dc.Flags))
	builder.WriteByte(')')
	return builder.String()
}

// NamedDiscordGuild returns the DiscordGuild named value or an error if the edge was not
// loaded in eager-loading with this name.
func (dc *DiscordChannel) NamedDiscordGuild(name string) ([]*DiscordGuild, error) {
	if dc.Edges.namedDiscordGuild == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := dc.Edges.namedDiscordGuild[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (dc *DiscordChannel) appendNamedDiscordGuild(name string, edges ...*DiscordGuild) {
	if dc.Edges.namedDiscordGuild == nil {
		dc.Edges.namedDiscordGuild = make(map[string][]*DiscordGuild)
	}
	if len(edges) == 0 {
		dc.Edges.namedDiscordGuild[name] = []*DiscordGuild{}
	} else {
		dc.Edges.namedDiscordGuild[name] = append(dc.Edges.namedDiscordGuild[name], edges...)
	}
}

// NamedMessages returns the Messages named value or an error if the edge was not
// loaded in eager-loading with this name.
func (dc *DiscordChannel) NamedMessages(name string) ([]*DiscordMessage, error) {
	if dc.Edges.namedMessages == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := dc.Edges.namedMessages[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (dc *DiscordChannel) appendNamedMessages(name string, edges ...*DiscordMessage) {
	if dc.Edges.namedMessages == nil {
		dc.Edges.namedMessages = make(map[string][]*DiscordMessage)
	}
	if len(edges) == 0 {
		dc.Edges.namedMessages[name] = []*DiscordMessage{}
	} else {
		dc.Edges.namedMessages[name] = append(dc.Edges.namedMessages[name], edges...)
	}
}

// DiscordChannels is a parsable slice of DiscordChannel.
type DiscordChannels []*DiscordChannel
