// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/discordchannel"
	"github.com/h3mmy/bloopyboi/ent/discordguild"
	"github.com/h3mmy/bloopyboi/ent/discordmessage"
	"github.com/h3mmy/bloopyboi/ent/predicate"
)

// DiscordChannelQuery is the builder for querying DiscordChannel entities.
type DiscordChannelQuery struct {
	config
	ctx                   *QueryContext
	order                 []discordchannel.OrderOption
	inters                []Interceptor
	predicates            []predicate.DiscordChannel
	withDiscordGuild      *DiscordGuildQuery
	withMessages          *DiscordMessageQuery
	modifiers             []func(*sql.Selector)
	withNamedDiscordGuild map[string]*DiscordGuildQuery
	withNamedMessages     map[string]*DiscordMessageQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DiscordChannelQuery builder.
func (dcq *DiscordChannelQuery) Where(ps ...predicate.DiscordChannel) *DiscordChannelQuery {
	dcq.predicates = append(dcq.predicates, ps...)
	return dcq
}

// Limit the number of records to be returned by this query.
func (dcq *DiscordChannelQuery) Limit(limit int) *DiscordChannelQuery {
	dcq.ctx.Limit = &limit
	return dcq
}

// Offset to start from.
func (dcq *DiscordChannelQuery) Offset(offset int) *DiscordChannelQuery {
	dcq.ctx.Offset = &offset
	return dcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dcq *DiscordChannelQuery) Unique(unique bool) *DiscordChannelQuery {
	dcq.ctx.Unique = &unique
	return dcq
}

// Order specifies how the records should be ordered.
func (dcq *DiscordChannelQuery) Order(o ...discordchannel.OrderOption) *DiscordChannelQuery {
	dcq.order = append(dcq.order, o...)
	return dcq
}

// QueryDiscordGuild chains the current query on the "discord_guild" edge.
func (dcq *DiscordChannelQuery) QueryDiscordGuild() *DiscordGuildQuery {
	query := (&DiscordGuildClient{config: dcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discordchannel.Table, discordchannel.FieldID, selector),
			sqlgraph.To(discordguild.Table, discordguild.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, discordchannel.DiscordGuildTable, discordchannel.DiscordGuildPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMessages chains the current query on the "messages" edge.
func (dcq *DiscordChannelQuery) QueryMessages() *DiscordMessageQuery {
	query := (&DiscordMessageClient{config: dcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discordchannel.Table, discordchannel.FieldID, selector),
			sqlgraph.To(discordmessage.Table, discordmessage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, discordchannel.MessagesTable, discordchannel.MessagesColumn),
		)
		fromU = sqlgraph.SetNeighbors(dcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DiscordChannel entity from the query.
// Returns a *NotFoundError when no DiscordChannel was found.
func (dcq *DiscordChannelQuery) First(ctx context.Context) (*DiscordChannel, error) {
	nodes, err := dcq.Limit(1).All(setContextOp(ctx, dcq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{discordchannel.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dcq *DiscordChannelQuery) FirstX(ctx context.Context) *DiscordChannel {
	node, err := dcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DiscordChannel ID from the query.
// Returns a *NotFoundError when no DiscordChannel ID was found.
func (dcq *DiscordChannelQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dcq.Limit(1).IDs(setContextOp(ctx, dcq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{discordchannel.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dcq *DiscordChannelQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := dcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DiscordChannel entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DiscordChannel entity is found.
// Returns a *NotFoundError when no DiscordChannel entities are found.
func (dcq *DiscordChannelQuery) Only(ctx context.Context) (*DiscordChannel, error) {
	nodes, err := dcq.Limit(2).All(setContextOp(ctx, dcq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{discordchannel.Label}
	default:
		return nil, &NotSingularError{discordchannel.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dcq *DiscordChannelQuery) OnlyX(ctx context.Context) *DiscordChannel {
	node, err := dcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DiscordChannel ID in the query.
// Returns a *NotSingularError when more than one DiscordChannel ID is found.
// Returns a *NotFoundError when no entities are found.
func (dcq *DiscordChannelQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dcq.Limit(2).IDs(setContextOp(ctx, dcq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{discordchannel.Label}
	default:
		err = &NotSingularError{discordchannel.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dcq *DiscordChannelQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := dcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DiscordChannels.
func (dcq *DiscordChannelQuery) All(ctx context.Context) ([]*DiscordChannel, error) {
	ctx = setContextOp(ctx, dcq.ctx, "All")
	if err := dcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DiscordChannel, *DiscordChannelQuery]()
	return withInterceptors[[]*DiscordChannel](ctx, dcq, qr, dcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dcq *DiscordChannelQuery) AllX(ctx context.Context) []*DiscordChannel {
	nodes, err := dcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DiscordChannel IDs.
func (dcq *DiscordChannelQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if dcq.ctx.Unique == nil && dcq.path != nil {
		dcq.Unique(true)
	}
	ctx = setContextOp(ctx, dcq.ctx, "IDs")
	if err = dcq.Select(discordchannel.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dcq *DiscordChannelQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := dcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dcq *DiscordChannelQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dcq.ctx, "Count")
	if err := dcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dcq, querierCount[*DiscordChannelQuery](), dcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dcq *DiscordChannelQuery) CountX(ctx context.Context) int {
	count, err := dcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dcq *DiscordChannelQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dcq.ctx, "Exist")
	switch _, err := dcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dcq *DiscordChannelQuery) ExistX(ctx context.Context) bool {
	exist, err := dcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DiscordChannelQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dcq *DiscordChannelQuery) Clone() *DiscordChannelQuery {
	if dcq == nil {
		return nil
	}
	return &DiscordChannelQuery{
		config:           dcq.config,
		ctx:              dcq.ctx.Clone(),
		order:            append([]discordchannel.OrderOption{}, dcq.order...),
		inters:           append([]Interceptor{}, dcq.inters...),
		predicates:       append([]predicate.DiscordChannel{}, dcq.predicates...),
		withDiscordGuild: dcq.withDiscordGuild.Clone(),
		withMessages:     dcq.withMessages.Clone(),
		// clone intermediate query.
		sql:  dcq.sql.Clone(),
		path: dcq.path,
	}
}

// WithDiscordGuild tells the query-builder to eager-load the nodes that are connected to
// the "discord_guild" edge. The optional arguments are used to configure the query builder of the edge.
func (dcq *DiscordChannelQuery) WithDiscordGuild(opts ...func(*DiscordGuildQuery)) *DiscordChannelQuery {
	query := (&DiscordGuildClient{config: dcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dcq.withDiscordGuild = query
	return dcq
}

// WithMessages tells the query-builder to eager-load the nodes that are connected to
// the "messages" edge. The optional arguments are used to configure the query builder of the edge.
func (dcq *DiscordChannelQuery) WithMessages(opts ...func(*DiscordMessageQuery)) *DiscordChannelQuery {
	query := (&DiscordMessageClient{config: dcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dcq.withMessages = query
	return dcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DiscordChannel.Query().
//		GroupBy(discordchannel.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dcq *DiscordChannelQuery) GroupBy(field string, fields ...string) *DiscordChannelGroupBy {
	dcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DiscordChannelGroupBy{build: dcq}
	grbuild.flds = &dcq.ctx.Fields
	grbuild.label = discordchannel.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.DiscordChannel.Query().
//		Select(discordchannel.FieldCreateTime).
//		Scan(ctx, &v)
func (dcq *DiscordChannelQuery) Select(fields ...string) *DiscordChannelSelect {
	dcq.ctx.Fields = append(dcq.ctx.Fields, fields...)
	sbuild := &DiscordChannelSelect{DiscordChannelQuery: dcq}
	sbuild.label = discordchannel.Label
	sbuild.flds, sbuild.scan = &dcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DiscordChannelSelect configured with the given aggregations.
func (dcq *DiscordChannelQuery) Aggregate(fns ...AggregateFunc) *DiscordChannelSelect {
	return dcq.Select().Aggregate(fns...)
}

func (dcq *DiscordChannelQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dcq); err != nil {
				return err
			}
		}
	}
	for _, f := range dcq.ctx.Fields {
		if !discordchannel.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dcq.path != nil {
		prev, err := dcq.path(ctx)
		if err != nil {
			return err
		}
		dcq.sql = prev
	}
	return nil
}

func (dcq *DiscordChannelQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DiscordChannel, error) {
	var (
		nodes       = []*DiscordChannel{}
		_spec       = dcq.querySpec()
		loadedTypes = [2]bool{
			dcq.withDiscordGuild != nil,
			dcq.withMessages != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DiscordChannel).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DiscordChannel{config: dcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(dcq.modifiers) > 0 {
		_spec.Modifiers = dcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dcq.withDiscordGuild; query != nil {
		if err := dcq.loadDiscordGuild(ctx, query, nodes,
			func(n *DiscordChannel) { n.Edges.DiscordGuild = []*DiscordGuild{} },
			func(n *DiscordChannel, e *DiscordGuild) { n.Edges.DiscordGuild = append(n.Edges.DiscordGuild, e) }); err != nil {
			return nil, err
		}
	}
	if query := dcq.withMessages; query != nil {
		if err := dcq.loadMessages(ctx, query, nodes,
			func(n *DiscordChannel) { n.Edges.Messages = []*DiscordMessage{} },
			func(n *DiscordChannel, e *DiscordMessage) { n.Edges.Messages = append(n.Edges.Messages, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range dcq.withNamedDiscordGuild {
		if err := dcq.loadDiscordGuild(ctx, query, nodes,
			func(n *DiscordChannel) { n.appendNamedDiscordGuild(name) },
			func(n *DiscordChannel, e *DiscordGuild) { n.appendNamedDiscordGuild(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range dcq.withNamedMessages {
		if err := dcq.loadMessages(ctx, query, nodes,
			func(n *DiscordChannel) { n.appendNamedMessages(name) },
			func(n *DiscordChannel, e *DiscordMessage) { n.appendNamedMessages(name, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dcq *DiscordChannelQuery) loadDiscordGuild(ctx context.Context, query *DiscordGuildQuery, nodes []*DiscordChannel, init func(*DiscordChannel), assign func(*DiscordChannel, *DiscordGuild)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*DiscordChannel)
	nids := make(map[uuid.UUID]map[*DiscordChannel]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(discordchannel.DiscordGuildTable)
		s.Join(joinT).On(s.C(discordguild.FieldID), joinT.C(discordchannel.DiscordGuildPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(discordchannel.DiscordGuildPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(discordchannel.DiscordGuildPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*DiscordChannel]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DiscordGuild](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "discord_guild" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dcq *DiscordChannelQuery) loadMessages(ctx context.Context, query *DiscordMessageQuery, nodes []*DiscordChannel, init func(*DiscordChannel), assign func(*DiscordChannel, *DiscordMessage)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*DiscordChannel)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DiscordMessage(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(discordchannel.MessagesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.discord_channel_messages
		if fk == nil {
			return fmt.Errorf(`foreign-key "discord_channel_messages" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "discord_channel_messages" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (dcq *DiscordChannelQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dcq.querySpec()
	if len(dcq.modifiers) > 0 {
		_spec.Modifiers = dcq.modifiers
	}
	_spec.Node.Columns = dcq.ctx.Fields
	if len(dcq.ctx.Fields) > 0 {
		_spec.Unique = dcq.ctx.Unique != nil && *dcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dcq.driver, _spec)
}

func (dcq *DiscordChannelQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(discordchannel.Table, discordchannel.Columns, sqlgraph.NewFieldSpec(discordchannel.FieldID, field.TypeUUID))
	_spec.From = dcq.sql
	if unique := dcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dcq.path != nil {
		_spec.Unique = true
	}
	if fields := dcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discordchannel.FieldID)
		for i := range fields {
			if fields[i] != discordchannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dcq *DiscordChannelQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dcq.driver.Dialect())
	t1 := builder.Table(discordchannel.Table)
	columns := dcq.ctx.Fields
	if len(columns) == 0 {
		columns = discordchannel.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dcq.sql != nil {
		selector = dcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dcq.ctx.Unique != nil && *dcq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range dcq.modifiers {
		m(selector)
	}
	for _, p := range dcq.predicates {
		p(selector)
	}
	for _, p := range dcq.order {
		p(selector)
	}
	if offset := dcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (dcq *DiscordChannelQuery) ForUpdate(opts ...sql.LockOption) *DiscordChannelQuery {
	if dcq.driver.Dialect() == dialect.Postgres {
		dcq.Unique(false)
	}
	dcq.modifiers = append(dcq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return dcq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (dcq *DiscordChannelQuery) ForShare(opts ...sql.LockOption) *DiscordChannelQuery {
	if dcq.driver.Dialect() == dialect.Postgres {
		dcq.Unique(false)
	}
	dcq.modifiers = append(dcq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return dcq
}

// WithNamedDiscordGuild tells the query-builder to eager-load the nodes that are connected to the "discord_guild"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (dcq *DiscordChannelQuery) WithNamedDiscordGuild(name string, opts ...func(*DiscordGuildQuery)) *DiscordChannelQuery {
	query := (&DiscordGuildClient{config: dcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if dcq.withNamedDiscordGuild == nil {
		dcq.withNamedDiscordGuild = make(map[string]*DiscordGuildQuery)
	}
	dcq.withNamedDiscordGuild[name] = query
	return dcq
}

// WithNamedMessages tells the query-builder to eager-load the nodes that are connected to the "messages"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (dcq *DiscordChannelQuery) WithNamedMessages(name string, opts ...func(*DiscordMessageQuery)) *DiscordChannelQuery {
	query := (&DiscordMessageClient{config: dcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if dcq.withNamedMessages == nil {
		dcq.withNamedMessages = make(map[string]*DiscordMessageQuery)
	}
	dcq.withNamedMessages[name] = query
	return dcq
}

// DiscordChannelGroupBy is the group-by builder for DiscordChannel entities.
type DiscordChannelGroupBy struct {
	selector
	build *DiscordChannelQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dcgb *DiscordChannelGroupBy) Aggregate(fns ...AggregateFunc) *DiscordChannelGroupBy {
	dcgb.fns = append(dcgb.fns, fns...)
	return dcgb
}

// Scan applies the selector query and scans the result into the given value.
func (dcgb *DiscordChannelGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dcgb.build.ctx, "GroupBy")
	if err := dcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DiscordChannelQuery, *DiscordChannelGroupBy](ctx, dcgb.build, dcgb, dcgb.build.inters, v)
}

func (dcgb *DiscordChannelGroupBy) sqlScan(ctx context.Context, root *DiscordChannelQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dcgb.fns))
	for _, fn := range dcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dcgb.flds)+len(dcgb.fns))
		for _, f := range *dcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DiscordChannelSelect is the builder for selecting fields of DiscordChannel entities.
type DiscordChannelSelect struct {
	*DiscordChannelQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dcs *DiscordChannelSelect) Aggregate(fns ...AggregateFunc) *DiscordChannelSelect {
	dcs.fns = append(dcs.fns, fns...)
	return dcs
}

// Scan applies the selector query and scans the result into the given value.
func (dcs *DiscordChannelSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dcs.ctx, "Select")
	if err := dcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DiscordChannelQuery, *DiscordChannelSelect](ctx, dcs.DiscordChannelQuery, dcs, dcs.inters, v)
}

func (dcs *DiscordChannelSelect) sqlScan(ctx context.Context, root *DiscordChannelQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dcs.fns))
	for _, fn := range dcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
