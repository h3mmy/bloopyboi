// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/book"
	"github.com/h3mmy/bloopyboi/ent/discorduser"
	"github.com/h3mmy/bloopyboi/ent/mediarequest"
	"github.com/h3mmy/bloopyboi/ent/predicate"
)

// MediaRequestUpdate is the builder for updating MediaRequest entities.
type MediaRequestUpdate struct {
	config
	hooks    []Hook
	mutation *MediaRequestMutation
}

// Where appends a list predicates to the MediaRequestUpdate builder.
func (mru *MediaRequestUpdate) Where(ps ...predicate.MediaRequest) *MediaRequestUpdate {
	mru.mutation.Where(ps...)
	return mru
}

// SetUpdateTime sets the "update_time" field.
func (mru *MediaRequestUpdate) SetUpdateTime(t time.Time) *MediaRequestUpdate {
	mru.mutation.SetUpdateTime(t)
	return mru
}

// SetStatus sets the "status" field.
func (mru *MediaRequestUpdate) SetStatus(s string) *MediaRequestUpdate {
	mru.mutation.SetStatus(s)
	return mru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mru *MediaRequestUpdate) SetNillableStatus(s *string) *MediaRequestUpdate {
	if s != nil {
		mru.SetStatus(*s)
	}
	return mru
}

// SetPriority sets the "priority" field.
func (mru *MediaRequestUpdate) SetPriority(i int) *MediaRequestUpdate {
	mru.mutation.ResetPriority()
	mru.mutation.SetPriority(i)
	return mru
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (mru *MediaRequestUpdate) SetNillablePriority(i *int) *MediaRequestUpdate {
	if i != nil {
		mru.SetPriority(*i)
	}
	return mru
}

// AddPriority adds i to the "priority" field.
func (mru *MediaRequestUpdate) AddPriority(i int) *MediaRequestUpdate {
	mru.mutation.AddPriority(i)
	return mru
}

// SetDiscordUserID sets the "discord_user" edge to the DiscordUser entity by ID.
func (mru *MediaRequestUpdate) SetDiscordUserID(id uuid.UUID) *MediaRequestUpdate {
	mru.mutation.SetDiscordUserID(id)
	return mru
}

// SetNillableDiscordUserID sets the "discord_user" edge to the DiscordUser entity by ID if the given value is not nil.
func (mru *MediaRequestUpdate) SetNillableDiscordUserID(id *uuid.UUID) *MediaRequestUpdate {
	if id != nil {
		mru = mru.SetDiscordUserID(*id)
	}
	return mru
}

// SetDiscordUser sets the "discord_user" edge to the DiscordUser entity.
func (mru *MediaRequestUpdate) SetDiscordUser(d *DiscordUser) *MediaRequestUpdate {
	return mru.SetDiscordUserID(d.ID)
}

// AddBookIDs adds the "book" edge to the Book entity by IDs.
func (mru *MediaRequestUpdate) AddBookIDs(ids ...uuid.UUID) *MediaRequestUpdate {
	mru.mutation.AddBookIDs(ids...)
	return mru
}

// AddBook adds the "book" edges to the Book entity.
func (mru *MediaRequestUpdate) AddBook(b ...*Book) *MediaRequestUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mru.AddBookIDs(ids...)
}

// Mutation returns the MediaRequestMutation object of the builder.
func (mru *MediaRequestUpdate) Mutation() *MediaRequestMutation {
	return mru.mutation
}

// ClearDiscordUser clears the "discord_user" edge to the DiscordUser entity.
func (mru *MediaRequestUpdate) ClearDiscordUser() *MediaRequestUpdate {
	mru.mutation.ClearDiscordUser()
	return mru
}

// ClearBook clears all "book" edges to the Book entity.
func (mru *MediaRequestUpdate) ClearBook() *MediaRequestUpdate {
	mru.mutation.ClearBook()
	return mru
}

// RemoveBookIDs removes the "book" edge to Book entities by IDs.
func (mru *MediaRequestUpdate) RemoveBookIDs(ids ...uuid.UUID) *MediaRequestUpdate {
	mru.mutation.RemoveBookIDs(ids...)
	return mru
}

// RemoveBook removes "book" edges to Book entities.
func (mru *MediaRequestUpdate) RemoveBook(b ...*Book) *MediaRequestUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mru.RemoveBookIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mru *MediaRequestUpdate) Save(ctx context.Context) (int, error) {
	mru.defaults()
	return withHooks(ctx, mru.sqlSave, mru.mutation, mru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mru *MediaRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := mru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mru *MediaRequestUpdate) Exec(ctx context.Context) error {
	_, err := mru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mru *MediaRequestUpdate) ExecX(ctx context.Context) {
	if err := mru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mru *MediaRequestUpdate) defaults() {
	if _, ok := mru.mutation.UpdateTime(); !ok {
		v := mediarequest.UpdateDefaultUpdateTime()
		mru.mutation.SetUpdateTime(v)
	}
}

func (mru *MediaRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(mediarequest.Table, mediarequest.Columns, sqlgraph.NewFieldSpec(mediarequest.FieldID, field.TypeUUID))
	if ps := mru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mru.mutation.UpdateTime(); ok {
		_spec.SetField(mediarequest.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := mru.mutation.Status(); ok {
		_spec.SetField(mediarequest.FieldStatus, field.TypeString, value)
	}
	if value, ok := mru.mutation.Priority(); ok {
		_spec.SetField(mediarequest.FieldPriority, field.TypeInt, value)
	}
	if value, ok := mru.mutation.AddedPriority(); ok {
		_spec.AddField(mediarequest.FieldPriority, field.TypeInt, value)
	}
	if mru.mutation.DiscordUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mediarequest.DiscordUserTable,
			Columns: []string{mediarequest.DiscordUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discorduser.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mru.mutation.DiscordUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mediarequest.DiscordUserTable,
			Columns: []string{mediarequest.DiscordUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discorduser.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mru.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   mediarequest.BookTable,
			Columns: []string{mediarequest.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mru.mutation.RemovedBookIDs(); len(nodes) > 0 && !mru.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   mediarequest.BookTable,
			Columns: []string{mediarequest.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mru.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   mediarequest.BookTable,
			Columns: []string{mediarequest.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mediarequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mru.mutation.done = true
	return n, nil
}

// MediaRequestUpdateOne is the builder for updating a single MediaRequest entity.
type MediaRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MediaRequestMutation
}

// SetUpdateTime sets the "update_time" field.
func (mruo *MediaRequestUpdateOne) SetUpdateTime(t time.Time) *MediaRequestUpdateOne {
	mruo.mutation.SetUpdateTime(t)
	return mruo
}

// SetStatus sets the "status" field.
func (mruo *MediaRequestUpdateOne) SetStatus(s string) *MediaRequestUpdateOne {
	mruo.mutation.SetStatus(s)
	return mruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mruo *MediaRequestUpdateOne) SetNillableStatus(s *string) *MediaRequestUpdateOne {
	if s != nil {
		mruo.SetStatus(*s)
	}
	return mruo
}

// SetPriority sets the "priority" field.
func (mruo *MediaRequestUpdateOne) SetPriority(i int) *MediaRequestUpdateOne {
	mruo.mutation.ResetPriority()
	mruo.mutation.SetPriority(i)
	return mruo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (mruo *MediaRequestUpdateOne) SetNillablePriority(i *int) *MediaRequestUpdateOne {
	if i != nil {
		mruo.SetPriority(*i)
	}
	return mruo
}

// AddPriority adds i to the "priority" field.
func (mruo *MediaRequestUpdateOne) AddPriority(i int) *MediaRequestUpdateOne {
	mruo.mutation.AddPriority(i)
	return mruo
}

// SetDiscordUserID sets the "discord_user" edge to the DiscordUser entity by ID.
func (mruo *MediaRequestUpdateOne) SetDiscordUserID(id uuid.UUID) *MediaRequestUpdateOne {
	mruo.mutation.SetDiscordUserID(id)
	return mruo
}

// SetNillableDiscordUserID sets the "discord_user" edge to the DiscordUser entity by ID if the given value is not nil.
func (mruo *MediaRequestUpdateOne) SetNillableDiscordUserID(id *uuid.UUID) *MediaRequestUpdateOne {
	if id != nil {
		mruo = mruo.SetDiscordUserID(*id)
	}
	return mruo
}

// SetDiscordUser sets the "discord_user" edge to the DiscordUser entity.
func (mruo *MediaRequestUpdateOne) SetDiscordUser(d *DiscordUser) *MediaRequestUpdateOne {
	return mruo.SetDiscordUserID(d.ID)
}

// AddBookIDs adds the "book" edge to the Book entity by IDs.
func (mruo *MediaRequestUpdateOne) AddBookIDs(ids ...uuid.UUID) *MediaRequestUpdateOne {
	mruo.mutation.AddBookIDs(ids...)
	return mruo
}

// AddBook adds the "book" edges to the Book entity.
func (mruo *MediaRequestUpdateOne) AddBook(b ...*Book) *MediaRequestUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mruo.AddBookIDs(ids...)
}

// Mutation returns the MediaRequestMutation object of the builder.
func (mruo *MediaRequestUpdateOne) Mutation() *MediaRequestMutation {
	return mruo.mutation
}

// ClearDiscordUser clears the "discord_user" edge to the DiscordUser entity.
func (mruo *MediaRequestUpdateOne) ClearDiscordUser() *MediaRequestUpdateOne {
	mruo.mutation.ClearDiscordUser()
	return mruo
}

// ClearBook clears all "book" edges to the Book entity.
func (mruo *MediaRequestUpdateOne) ClearBook() *MediaRequestUpdateOne {
	mruo.mutation.ClearBook()
	return mruo
}

// RemoveBookIDs removes the "book" edge to Book entities by IDs.
func (mruo *MediaRequestUpdateOne) RemoveBookIDs(ids ...uuid.UUID) *MediaRequestUpdateOne {
	mruo.mutation.RemoveBookIDs(ids...)
	return mruo
}

// RemoveBook removes "book" edges to Book entities.
func (mruo *MediaRequestUpdateOne) RemoveBook(b ...*Book) *MediaRequestUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mruo.RemoveBookIDs(ids...)
}

// Where appends a list predicates to the MediaRequestUpdate builder.
func (mruo *MediaRequestUpdateOne) Where(ps ...predicate.MediaRequest) *MediaRequestUpdateOne {
	mruo.mutation.Where(ps...)
	return mruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mruo *MediaRequestUpdateOne) Select(field string, fields ...string) *MediaRequestUpdateOne {
	mruo.fields = append([]string{field}, fields...)
	return mruo
}

// Save executes the query and returns the updated MediaRequest entity.
func (mruo *MediaRequestUpdateOne) Save(ctx context.Context) (*MediaRequest, error) {
	mruo.defaults()
	return withHooks(ctx, mruo.sqlSave, mruo.mutation, mruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mruo *MediaRequestUpdateOne) SaveX(ctx context.Context) *MediaRequest {
	node, err := mruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mruo *MediaRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := mruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mruo *MediaRequestUpdateOne) ExecX(ctx context.Context) {
	if err := mruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mruo *MediaRequestUpdateOne) defaults() {
	if _, ok := mruo.mutation.UpdateTime(); !ok {
		v := mediarequest.UpdateDefaultUpdateTime()
		mruo.mutation.SetUpdateTime(v)
	}
}

func (mruo *MediaRequestUpdateOne) sqlSave(ctx context.Context) (_node *MediaRequest, err error) {
	_spec := sqlgraph.NewUpdateSpec(mediarequest.Table, mediarequest.Columns, sqlgraph.NewFieldSpec(mediarequest.FieldID, field.TypeUUID))
	id, ok := mruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MediaRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mediarequest.FieldID)
		for _, f := range fields {
			if !mediarequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mediarequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mruo.mutation.UpdateTime(); ok {
		_spec.SetField(mediarequest.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := mruo.mutation.Status(); ok {
		_spec.SetField(mediarequest.FieldStatus, field.TypeString, value)
	}
	if value, ok := mruo.mutation.Priority(); ok {
		_spec.SetField(mediarequest.FieldPriority, field.TypeInt, value)
	}
	if value, ok := mruo.mutation.AddedPriority(); ok {
		_spec.AddField(mediarequest.FieldPriority, field.TypeInt, value)
	}
	if mruo.mutation.DiscordUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mediarequest.DiscordUserTable,
			Columns: []string{mediarequest.DiscordUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discorduser.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mruo.mutation.DiscordUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mediarequest.DiscordUserTable,
			Columns: []string{mediarequest.DiscordUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discorduser.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mruo.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   mediarequest.BookTable,
			Columns: []string{mediarequest.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mruo.mutation.RemovedBookIDs(); len(nodes) > 0 && !mruo.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   mediarequest.BookTable,
			Columns: []string{mediarequest.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mruo.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   mediarequest.BookTable,
			Columns: []string{mediarequest.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MediaRequest{config: mruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mediarequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mruo.mutation.done = true
	return _node, nil
}
