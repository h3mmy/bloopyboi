// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BooksColumns holds the columns for the "books" table.
	BooksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "goodreads_id", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "google_volume_id", Type: field.TypeString, Unique: true},
		{Name: "isbn_10", Type: field.TypeString, Nullable: true},
		{Name: "isbn_13", Type: field.TypeString, Nullable: true},
		{Name: "publisher", Type: field.TypeString, Nullable: true},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
	}
	// BooksTable holds the schema information for the "books" table.
	BooksTable = &schema.Table{
		Name:       "books",
		Columns:    BooksColumns,
		PrimaryKey: []*schema.Column{BooksColumns[0]},
	}
	// BookAuthorsColumns holds the columns for the "book_authors" table.
	BookAuthorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "full_name", Type: field.TypeString, Unique: true},
	}
	// BookAuthorsTable holds the schema information for the "book_authors" table.
	BookAuthorsTable = &schema.Table{
		Name:       "book_authors",
		Columns:    BookAuthorsColumns,
		PrimaryKey: []*schema.Column{BookAuthorsColumns[0]},
	}
	// DiscordChannelsColumns holds the columns for the "discord_channels" table.
	DiscordChannelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "discordid", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeInt},
		{Name: "nsfw", Type: field.TypeBool, Default: false},
		{Name: "flags", Type: field.TypeInt, Nullable: true},
	}
	// DiscordChannelsTable holds the schema information for the "discord_channels" table.
	DiscordChannelsTable = &schema.Table{
		Name:       "discord_channels",
		Columns:    DiscordChannelsColumns,
		PrimaryKey: []*schema.Column{DiscordChannelsColumns[0]},
	}
	// DiscordGuildsColumns holds the columns for the "discord_guilds" table.
	DiscordGuildsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "discordid", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "rules_channel_id", Type: field.TypeString, Nullable: true},
		{Name: "public_updates_channel_id", Type: field.TypeString, Nullable: true},
		{Name: "nsfw_level", Type: field.TypeInt, Nullable: true},
	}
	// DiscordGuildsTable holds the schema information for the "discord_guilds" table.
	DiscordGuildsTable = &schema.Table{
		Name:       "discord_guilds",
		Columns:    DiscordGuildsColumns,
		PrimaryKey: []*schema.Column{DiscordGuildsColumns[0]},
	}
	// DiscordMessagesColumns holds the columns for the "discord_messages" table.
	DiscordMessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "discordid", Type: field.TypeString, Unique: true},
		{Name: "content", Type: field.TypeString, Nullable: true},
		{Name: "raw", Type: field.TypeJSON},
		{Name: "discord_channel_messages", Type: field.TypeUUID, Nullable: true},
		{Name: "discord_guild_discord_messages", Type: field.TypeUUID, Nullable: true},
		{Name: "discord_user_discord_messages", Type: field.TypeUUID, Nullable: true},
	}
	// DiscordMessagesTable holds the schema information for the "discord_messages" table.
	DiscordMessagesTable = &schema.Table{
		Name:       "discord_messages",
		Columns:    DiscordMessagesColumns,
		PrimaryKey: []*schema.Column{DiscordMessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "discord_messages_discord_channels_messages",
				Columns:    []*schema.Column{DiscordMessagesColumns[6]},
				RefColumns: []*schema.Column{DiscordChannelsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "discord_messages_discord_guilds_discord_messages",
				Columns:    []*schema.Column{DiscordMessagesColumns[7]},
				RefColumns: []*schema.Column{DiscordGuildsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "discord_messages_discord_users_discord_messages",
				Columns:    []*schema.Column{DiscordMessagesColumns[8]},
				RefColumns: []*schema.Column{DiscordUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DiscordMessageReactionsColumns holds the columns for the "discord_message_reactions" table.
	DiscordMessageReactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "emoji_api_name", Type: field.TypeString},
		{Name: "removed", Type: field.TypeBool, Default: false},
		{Name: "raw", Type: field.TypeJSON},
		{Name: "discord_message_message_reactions", Type: field.TypeUUID},
		{Name: "discord_user_message_reactions", Type: field.TypeUUID},
	}
	// DiscordMessageReactionsTable holds the schema information for the "discord_message_reactions" table.
	DiscordMessageReactionsTable = &schema.Table{
		Name:       "discord_message_reactions",
		Columns:    DiscordMessageReactionsColumns,
		PrimaryKey: []*schema.Column{DiscordMessageReactionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "discord_message_reactions_discord_messages_message_reactions",
				Columns:    []*schema.Column{DiscordMessageReactionsColumns[6]},
				RefColumns: []*schema.Column{DiscordMessagesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "discord_message_reactions_discord_users_message_reactions",
				Columns:    []*schema.Column{DiscordMessageReactionsColumns[7]},
				RefColumns: []*schema.Column{DiscordUsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DiscordUsersColumns holds the columns for the "discord_users" table.
	DiscordUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "discordid", Type: field.TypeString, Unique: true},
		{Name: "username", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "discriminator", Type: field.TypeString, Nullable: true},
	}
	// DiscordUsersTable holds the schema information for the "discord_users" table.
	DiscordUsersTable = &schema.Table{
		Name:       "discord_users",
		Columns:    DiscordUsersColumns,
		PrimaryKey: []*schema.Column{DiscordUsersColumns[0]},
	}
	// MediaRequestsColumns holds the columns for the "media_requests" table.
	MediaRequestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"requested", "approved", "success", "rejected", "cancelled", "error"}},
		{Name: "priority", Type: field.TypeInt, Default: 50},
		{Name: "book_media_request", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// MediaRequestsTable holds the schema information for the "media_requests" table.
	MediaRequestsTable = &schema.Table{
		Name:       "media_requests",
		Columns:    MediaRequestsColumns,
		PrimaryKey: []*schema.Column{MediaRequestsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "media_requests_books_media_request",
				Columns:    []*schema.Column{MediaRequestsColumns[5]},
				RefColumns: []*schema.Column{BooksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// BookAuthorBooksColumns holds the columns for the "book_author_books" table.
	BookAuthorBooksColumns = []*schema.Column{
		{Name: "book_author_id", Type: field.TypeUUID},
		{Name: "book_id", Type: field.TypeUUID},
	}
	// BookAuthorBooksTable holds the schema information for the "book_author_books" table.
	BookAuthorBooksTable = &schema.Table{
		Name:       "book_author_books",
		Columns:    BookAuthorBooksColumns,
		PrimaryKey: []*schema.Column{BookAuthorBooksColumns[0], BookAuthorBooksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "book_author_books_book_author_id",
				Columns:    []*schema.Column{BookAuthorBooksColumns[0]},
				RefColumns: []*schema.Column{BookAuthorsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "book_author_books_book_id",
				Columns:    []*schema.Column{BookAuthorBooksColumns[1]},
				RefColumns: []*schema.Column{BooksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DiscordGuildMembersColumns holds the columns for the "discord_guild_members" table.
	DiscordGuildMembersColumns = []*schema.Column{
		{Name: "discord_guild_id", Type: field.TypeUUID},
		{Name: "discord_user_id", Type: field.TypeUUID},
	}
	// DiscordGuildMembersTable holds the schema information for the "discord_guild_members" table.
	DiscordGuildMembersTable = &schema.Table{
		Name:       "discord_guild_members",
		Columns:    DiscordGuildMembersColumns,
		PrimaryKey: []*schema.Column{DiscordGuildMembersColumns[0], DiscordGuildMembersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "discord_guild_members_discord_guild_id",
				Columns:    []*schema.Column{DiscordGuildMembersColumns[0]},
				RefColumns: []*schema.Column{DiscordGuildsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "discord_guild_members_discord_user_id",
				Columns:    []*schema.Column{DiscordGuildMembersColumns[1]},
				RefColumns: []*schema.Column{DiscordUsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DiscordGuildGuildChannelsColumns holds the columns for the "discord_guild_guild_channels" table.
	DiscordGuildGuildChannelsColumns = []*schema.Column{
		{Name: "discord_guild_id", Type: field.TypeUUID},
		{Name: "discord_channel_id", Type: field.TypeUUID},
	}
	// DiscordGuildGuildChannelsTable holds the schema information for the "discord_guild_guild_channels" table.
	DiscordGuildGuildChannelsTable = &schema.Table{
		Name:       "discord_guild_guild_channels",
		Columns:    DiscordGuildGuildChannelsColumns,
		PrimaryKey: []*schema.Column{DiscordGuildGuildChannelsColumns[0], DiscordGuildGuildChannelsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "discord_guild_guild_channels_discord_guild_id",
				Columns:    []*schema.Column{DiscordGuildGuildChannelsColumns[0]},
				RefColumns: []*schema.Column{DiscordGuildsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "discord_guild_guild_channels_discord_channel_id",
				Columns:    []*schema.Column{DiscordGuildGuildChannelsColumns[1]},
				RefColumns: []*schema.Column{DiscordChannelsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DiscordUserMediaRequestsColumns holds the columns for the "discord_user_media_requests" table.
	DiscordUserMediaRequestsColumns = []*schema.Column{
		{Name: "discord_user_id", Type: field.TypeUUID},
		{Name: "media_request_id", Type: field.TypeUUID},
	}
	// DiscordUserMediaRequestsTable holds the schema information for the "discord_user_media_requests" table.
	DiscordUserMediaRequestsTable = &schema.Table{
		Name:       "discord_user_media_requests",
		Columns:    DiscordUserMediaRequestsColumns,
		PrimaryKey: []*schema.Column{DiscordUserMediaRequestsColumns[0], DiscordUserMediaRequestsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "discord_user_media_requests_discord_user_id",
				Columns:    []*schema.Column{DiscordUserMediaRequestsColumns[0]},
				RefColumns: []*schema.Column{DiscordUsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "discord_user_media_requests_media_request_id",
				Columns:    []*schema.Column{DiscordUserMediaRequestsColumns[1]},
				RefColumns: []*schema.Column{MediaRequestsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BooksTable,
		BookAuthorsTable,
		DiscordChannelsTable,
		DiscordGuildsTable,
		DiscordMessagesTable,
		DiscordMessageReactionsTable,
		DiscordUsersTable,
		MediaRequestsTable,
		BookAuthorBooksTable,
		DiscordGuildMembersTable,
		DiscordGuildGuildChannelsTable,
		DiscordUserMediaRequestsTable,
	}
)

func init() {
	DiscordMessagesTable.ForeignKeys[0].RefTable = DiscordChannelsTable
	DiscordMessagesTable.ForeignKeys[1].RefTable = DiscordGuildsTable
	DiscordMessagesTable.ForeignKeys[2].RefTable = DiscordUsersTable
	DiscordMessageReactionsTable.ForeignKeys[0].RefTable = DiscordMessagesTable
	DiscordMessageReactionsTable.ForeignKeys[1].RefTable = DiscordUsersTable
	MediaRequestsTable.ForeignKeys[0].RefTable = BooksTable
	BookAuthorBooksTable.ForeignKeys[0].RefTable = BookAuthorsTable
	BookAuthorBooksTable.ForeignKeys[1].RefTable = BooksTable
	DiscordGuildMembersTable.ForeignKeys[0].RefTable = DiscordGuildsTable
	DiscordGuildMembersTable.ForeignKeys[1].RefTable = DiscordUsersTable
	DiscordGuildGuildChannelsTable.ForeignKeys[0].RefTable = DiscordGuildsTable
	DiscordGuildGuildChannelsTable.ForeignKeys[1].RefTable = DiscordChannelsTable
	DiscordUserMediaRequestsTable.ForeignKeys[0].RefTable = DiscordUsersTable
	DiscordUserMediaRequestsTable.ForeignKeys[1].RefTable = MediaRequestsTable
}
