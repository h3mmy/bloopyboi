// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BooksColumns holds the columns for the "books" table.
	BooksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "goodreads_id", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "google_volume_id", Type: field.TypeString, Unique: true},
		{Name: "isbn_10", Type: field.TypeString, Nullable: true},
		{Name: "isbn_13", Type: field.TypeString, Nullable: true},
		{Name: "publisher", Type: field.TypeString, Nullable: true},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
		{Name: "book_media_request", Type: field.TypeUUID, Nullable: true},
	}
	// BooksTable holds the schema information for the "books" table.
	BooksTable = &schema.Table{
		Name:       "books",
		Columns:    BooksColumns,
		PrimaryKey: []*schema.Column{BooksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "books_media_requests_media_request",
				Columns:    []*schema.Column{BooksColumns[9]},
				RefColumns: []*schema.Column{MediaRequestsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// BookAuthorsColumns holds the columns for the "book_authors" table.
	BookAuthorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "full_name", Type: field.TypeString, Unique: true},
	}
	// BookAuthorsTable holds the schema information for the "book_authors" table.
	BookAuthorsTable = &schema.Table{
		Name:       "book_authors",
		Columns:    BookAuthorsColumns,
		PrimaryKey: []*schema.Column{BookAuthorsColumns[0]},
	}
	// DiscordMessagesColumns holds the columns for the "discord_messages" table.
	DiscordMessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "raw", Type: field.TypeJSON},
	}
	// DiscordMessagesTable holds the schema information for the "discord_messages" table.
	DiscordMessagesTable = &schema.Table{
		Name:       "discord_messages",
		Columns:    DiscordMessagesColumns,
		PrimaryKey: []*schema.Column{DiscordMessagesColumns[0]},
	}
	// DiscordUsersColumns holds the columns for the "discord_users" table.
	DiscordUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "discordid", Type: field.TypeString, Unique: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "discriminator", Type: field.TypeString, Nullable: true},
	}
	// DiscordUsersTable holds the schema information for the "discord_users" table.
	DiscordUsersTable = &schema.Table{
		Name:       "discord_users",
		Columns:    DiscordUsersColumns,
		PrimaryKey: []*schema.Column{DiscordUsersColumns[0]},
	}
	// MediaRequestsColumns holds the columns for the "media_requests" table.
	MediaRequestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "status", Type: field.TypeString},
		{Name: "priority", Type: field.TypeInt, Default: 50},
		{Name: "discord_user_media_requests", Type: field.TypeUUID, Nullable: true},
	}
	// MediaRequestsTable holds the schema information for the "media_requests" table.
	MediaRequestsTable = &schema.Table{
		Name:       "media_requests",
		Columns:    MediaRequestsColumns,
		PrimaryKey: []*schema.Column{MediaRequestsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "media_requests_discord_users_media_requests",
				Columns:    []*schema.Column{MediaRequestsColumns[5]},
				RefColumns: []*schema.Column{DiscordUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// BookAuthorBooksColumns holds the columns for the "book_author_books" table.
	BookAuthorBooksColumns = []*schema.Column{
		{Name: "book_author_id", Type: field.TypeUUID},
		{Name: "book_id", Type: field.TypeUUID},
	}
	// BookAuthorBooksTable holds the schema information for the "book_author_books" table.
	BookAuthorBooksTable = &schema.Table{
		Name:       "book_author_books",
		Columns:    BookAuthorBooksColumns,
		PrimaryKey: []*schema.Column{BookAuthorBooksColumns[0], BookAuthorBooksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "book_author_books_book_author_id",
				Columns:    []*schema.Column{BookAuthorBooksColumns[0]},
				RefColumns: []*schema.Column{BookAuthorsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "book_author_books_book_id",
				Columns:    []*schema.Column{BookAuthorBooksColumns[1]},
				RefColumns: []*schema.Column{BooksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DiscordUserDiscordMessagesColumns holds the columns for the "discord_user_discord_messages" table.
	DiscordUserDiscordMessagesColumns = []*schema.Column{
		{Name: "discord_user_id", Type: field.TypeUUID},
		{Name: "discord_message_id", Type: field.TypeString},
	}
	// DiscordUserDiscordMessagesTable holds the schema information for the "discord_user_discord_messages" table.
	DiscordUserDiscordMessagesTable = &schema.Table{
		Name:       "discord_user_discord_messages",
		Columns:    DiscordUserDiscordMessagesColumns,
		PrimaryKey: []*schema.Column{DiscordUserDiscordMessagesColumns[0], DiscordUserDiscordMessagesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "discord_user_discord_messages_discord_user_id",
				Columns:    []*schema.Column{DiscordUserDiscordMessagesColumns[0]},
				RefColumns: []*schema.Column{DiscordUsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "discord_user_discord_messages_discord_message_id",
				Columns:    []*schema.Column{DiscordUserDiscordMessagesColumns[1]},
				RefColumns: []*schema.Column{DiscordMessagesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BooksTable,
		BookAuthorsTable,
		DiscordMessagesTable,
		DiscordUsersTable,
		MediaRequestsTable,
		BookAuthorBooksTable,
		DiscordUserDiscordMessagesTable,
	}
)

func init() {
	BooksTable.ForeignKeys[0].RefTable = MediaRequestsTable
	MediaRequestsTable.ForeignKeys[0].RefTable = DiscordUsersTable
	BookAuthorBooksTable.ForeignKeys[0].RefTable = BookAuthorsTable
	BookAuthorBooksTable.ForeignKeys[1].RefTable = BooksTable
	DiscordUserDiscordMessagesTable.ForeignKeys[0].RefTable = DiscordUsersTable
	DiscordUserDiscordMessagesTable.ForeignKeys[1].RefTable = DiscordMessagesTable
}
