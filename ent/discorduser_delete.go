// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/h3mmy/bloopyboi/ent/discorduser"
	"github.com/h3mmy/bloopyboi/ent/predicate"
)

// DiscordUserDelete is the builder for deleting a DiscordUser entity.
type DiscordUserDelete struct {
	config
	hooks    []Hook
	mutation *DiscordUserMutation
}

// Where appends a list predicates to the DiscordUserDelete builder.
func (dud *DiscordUserDelete) Where(ps ...predicate.DiscordUser) *DiscordUserDelete {
	dud.mutation.Where(ps...)
	return dud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dud *DiscordUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dud.sqlExec, dud.mutation, dud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dud *DiscordUserDelete) ExecX(ctx context.Context) int {
	n, err := dud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dud *DiscordUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(discorduser.Table, sqlgraph.NewFieldSpec(discorduser.FieldID, field.TypeUUID))
	if ps := dud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dud.mutation.done = true
	return affected, err
}

// DiscordUserDeleteOne is the builder for deleting a single DiscordUser entity.
type DiscordUserDeleteOne struct {
	dud *DiscordUserDelete
}

// Where appends a list predicates to the DiscordUserDelete builder.
func (dudo *DiscordUserDeleteOne) Where(ps ...predicate.DiscordUser) *DiscordUserDeleteOne {
	dudo.dud.mutation.Where(ps...)
	return dudo
}

// Exec executes the deletion query.
func (dudo *DiscordUserDeleteOne) Exec(ctx context.Context) error {
	n, err := dudo.dud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{discorduser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dudo *DiscordUserDeleteOne) ExecX(ctx context.Context) {
	if err := dudo.Exec(ctx); err != nil {
		panic(err)
	}
}
