// Code generated by ent, DO NOT EDIT.

package discordguild

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the discordguild type in the database.
	Label = "discord_guild"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDiscordid holds the string denoting the discordid field in the database.
	FieldDiscordid = "discordid"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldRulesChannelID holds the string denoting the rules_channel_id field in the database.
	FieldRulesChannelID = "rules_channel_id"
	// FieldPublicUpdatesChannelID holds the string denoting the public_updates_channel_id field in the database.
	FieldPublicUpdatesChannelID = "public_updates_channel_id"
	// FieldNsfwLevel holds the string denoting the nsfw_level field in the database.
	FieldNsfwLevel = "nsfw_level"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// EdgeDiscordMessages holds the string denoting the discord_messages edge name in mutations.
	EdgeDiscordMessages = "discord_messages"
	// Table holds the table name of the discordguild in the database.
	Table = "discord_guilds"
	// MembersTable is the table that holds the members relation/edge. The primary key declared below.
	MembersTable = "discord_guild_members"
	// MembersInverseTable is the table name for the DiscordUser entity.
	// It exists in this package in order to avoid circular dependency with the "discorduser" package.
	MembersInverseTable = "discord_users"
	// DiscordMessagesTable is the table that holds the discord_messages relation/edge.
	DiscordMessagesTable = "discord_messages"
	// DiscordMessagesInverseTable is the table name for the DiscordMessage entity.
	// It exists in this package in order to avoid circular dependency with the "discordmessage" package.
	DiscordMessagesInverseTable = "discord_messages"
	// DiscordMessagesColumn is the table column denoting the discord_messages relation/edge.
	DiscordMessagesColumn = "discord_guild_discord_messages"
)

// Columns holds all SQL columns for discordguild fields.
var Columns = []string{
	FieldID,
	FieldDiscordid,
	FieldName,
	FieldDescription,
	FieldRulesChannelID,
	FieldPublicUpdatesChannelID,
	FieldNsfwLevel,
}

var (
	// MembersPrimaryKey and MembersColumn2 are the table columns denoting the
	// primary key for the members relation (M2M).
	MembersPrimaryKey = []string{"discord_guild_id", "discord_user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the DiscordGuild queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDiscordid orders the results by the discordid field.
func ByDiscordid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscordid, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByRulesChannelID orders the results by the rules_channel_id field.
func ByRulesChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRulesChannelID, opts...).ToFunc()
}

// ByPublicUpdatesChannelID orders the results by the public_updates_channel_id field.
func ByPublicUpdatesChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicUpdatesChannelID, opts...).ToFunc()
}

// ByNsfwLevel orders the results by the nsfw_level field.
func ByNsfwLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNsfwLevel, opts...).ToFunc()
}

// ByMembersCount orders the results by members count.
func ByMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembersStep(), opts...)
	}
}

// ByMembers orders the results by members terms.
func ByMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDiscordMessagesCount orders the results by discord_messages count.
func ByDiscordMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDiscordMessagesStep(), opts...)
	}
}

// ByDiscordMessages orders the results by discord_messages terms.
func ByDiscordMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDiscordMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, MembersTable, MembersPrimaryKey...),
	)
}
func newDiscordMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DiscordMessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DiscordMessagesTable, DiscordMessagesColumn),
	)
}
