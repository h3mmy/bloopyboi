// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/discordmessage"
	"github.com/h3mmy/bloopyboi/ent/discordmessagereaction"
	"github.com/h3mmy/bloopyboi/ent/discorduser"
	"github.com/h3mmy/bloopyboi/ent/predicate"
)

// DiscordMessageReactionQuery is the builder for querying DiscordMessageReaction entities.
type DiscordMessageReactionQuery struct {
	config
	ctx                *QueryContext
	order              []discordmessagereaction.OrderOption
	inters             []Interceptor
	predicates         []predicate.DiscordMessageReaction
	withDiscordMessage *DiscordMessageQuery
	withAuthor         *DiscordUserQuery
	withFKs            bool
	modifiers          []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DiscordMessageReactionQuery builder.
func (dmrq *DiscordMessageReactionQuery) Where(ps ...predicate.DiscordMessageReaction) *DiscordMessageReactionQuery {
	dmrq.predicates = append(dmrq.predicates, ps...)
	return dmrq
}

// Limit the number of records to be returned by this query.
func (dmrq *DiscordMessageReactionQuery) Limit(limit int) *DiscordMessageReactionQuery {
	dmrq.ctx.Limit = &limit
	return dmrq
}

// Offset to start from.
func (dmrq *DiscordMessageReactionQuery) Offset(offset int) *DiscordMessageReactionQuery {
	dmrq.ctx.Offset = &offset
	return dmrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dmrq *DiscordMessageReactionQuery) Unique(unique bool) *DiscordMessageReactionQuery {
	dmrq.ctx.Unique = &unique
	return dmrq
}

// Order specifies how the records should be ordered.
func (dmrq *DiscordMessageReactionQuery) Order(o ...discordmessagereaction.OrderOption) *DiscordMessageReactionQuery {
	dmrq.order = append(dmrq.order, o...)
	return dmrq
}

// QueryDiscordMessage chains the current query on the "discord_message" edge.
func (dmrq *DiscordMessageReactionQuery) QueryDiscordMessage() *DiscordMessageQuery {
	query := (&DiscordMessageClient{config: dmrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dmrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dmrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discordmessagereaction.Table, discordmessagereaction.FieldID, selector),
			sqlgraph.To(discordmessage.Table, discordmessage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, discordmessagereaction.DiscordMessageTable, discordmessagereaction.DiscordMessageColumn),
		)
		fromU = sqlgraph.SetNeighbors(dmrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAuthor chains the current query on the "author" edge.
func (dmrq *DiscordMessageReactionQuery) QueryAuthor() *DiscordUserQuery {
	query := (&DiscordUserClient{config: dmrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dmrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dmrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discordmessagereaction.Table, discordmessagereaction.FieldID, selector),
			sqlgraph.To(discorduser.Table, discorduser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, discordmessagereaction.AuthorTable, discordmessagereaction.AuthorColumn),
		)
		fromU = sqlgraph.SetNeighbors(dmrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DiscordMessageReaction entity from the query.
// Returns a *NotFoundError when no DiscordMessageReaction was found.
func (dmrq *DiscordMessageReactionQuery) First(ctx context.Context) (*DiscordMessageReaction, error) {
	nodes, err := dmrq.Limit(1).All(setContextOp(ctx, dmrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{discordmessagereaction.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dmrq *DiscordMessageReactionQuery) FirstX(ctx context.Context) *DiscordMessageReaction {
	node, err := dmrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DiscordMessageReaction ID from the query.
// Returns a *NotFoundError when no DiscordMessageReaction ID was found.
func (dmrq *DiscordMessageReactionQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dmrq.Limit(1).IDs(setContextOp(ctx, dmrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{discordmessagereaction.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dmrq *DiscordMessageReactionQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := dmrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DiscordMessageReaction entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DiscordMessageReaction entity is found.
// Returns a *NotFoundError when no DiscordMessageReaction entities are found.
func (dmrq *DiscordMessageReactionQuery) Only(ctx context.Context) (*DiscordMessageReaction, error) {
	nodes, err := dmrq.Limit(2).All(setContextOp(ctx, dmrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{discordmessagereaction.Label}
	default:
		return nil, &NotSingularError{discordmessagereaction.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dmrq *DiscordMessageReactionQuery) OnlyX(ctx context.Context) *DiscordMessageReaction {
	node, err := dmrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DiscordMessageReaction ID in the query.
// Returns a *NotSingularError when more than one DiscordMessageReaction ID is found.
// Returns a *NotFoundError when no entities are found.
func (dmrq *DiscordMessageReactionQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dmrq.Limit(2).IDs(setContextOp(ctx, dmrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{discordmessagereaction.Label}
	default:
		err = &NotSingularError{discordmessagereaction.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dmrq *DiscordMessageReactionQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := dmrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DiscordMessageReactions.
func (dmrq *DiscordMessageReactionQuery) All(ctx context.Context) ([]*DiscordMessageReaction, error) {
	ctx = setContextOp(ctx, dmrq.ctx, "All")
	if err := dmrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DiscordMessageReaction, *DiscordMessageReactionQuery]()
	return withInterceptors[[]*DiscordMessageReaction](ctx, dmrq, qr, dmrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dmrq *DiscordMessageReactionQuery) AllX(ctx context.Context) []*DiscordMessageReaction {
	nodes, err := dmrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DiscordMessageReaction IDs.
func (dmrq *DiscordMessageReactionQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if dmrq.ctx.Unique == nil && dmrq.path != nil {
		dmrq.Unique(true)
	}
	ctx = setContextOp(ctx, dmrq.ctx, "IDs")
	if err = dmrq.Select(discordmessagereaction.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dmrq *DiscordMessageReactionQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := dmrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dmrq *DiscordMessageReactionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dmrq.ctx, "Count")
	if err := dmrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dmrq, querierCount[*DiscordMessageReactionQuery](), dmrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dmrq *DiscordMessageReactionQuery) CountX(ctx context.Context) int {
	count, err := dmrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dmrq *DiscordMessageReactionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dmrq.ctx, "Exist")
	switch _, err := dmrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dmrq *DiscordMessageReactionQuery) ExistX(ctx context.Context) bool {
	exist, err := dmrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DiscordMessageReactionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dmrq *DiscordMessageReactionQuery) Clone() *DiscordMessageReactionQuery {
	if dmrq == nil {
		return nil
	}
	return &DiscordMessageReactionQuery{
		config:             dmrq.config,
		ctx:                dmrq.ctx.Clone(),
		order:              append([]discordmessagereaction.OrderOption{}, dmrq.order...),
		inters:             append([]Interceptor{}, dmrq.inters...),
		predicates:         append([]predicate.DiscordMessageReaction{}, dmrq.predicates...),
		withDiscordMessage: dmrq.withDiscordMessage.Clone(),
		withAuthor:         dmrq.withAuthor.Clone(),
		// clone intermediate query.
		sql:  dmrq.sql.Clone(),
		path: dmrq.path,
	}
}

// WithDiscordMessage tells the query-builder to eager-load the nodes that are connected to
// the "discord_message" edge. The optional arguments are used to configure the query builder of the edge.
func (dmrq *DiscordMessageReactionQuery) WithDiscordMessage(opts ...func(*DiscordMessageQuery)) *DiscordMessageReactionQuery {
	query := (&DiscordMessageClient{config: dmrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dmrq.withDiscordMessage = query
	return dmrq
}

// WithAuthor tells the query-builder to eager-load the nodes that are connected to
// the "author" edge. The optional arguments are used to configure the query builder of the edge.
func (dmrq *DiscordMessageReactionQuery) WithAuthor(opts ...func(*DiscordUserQuery)) *DiscordMessageReactionQuery {
	query := (&DiscordUserClient{config: dmrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dmrq.withAuthor = query
	return dmrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DiscordMessageReaction.Query().
//		GroupBy(discordmessagereaction.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dmrq *DiscordMessageReactionQuery) GroupBy(field string, fields ...string) *DiscordMessageReactionGroupBy {
	dmrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DiscordMessageReactionGroupBy{build: dmrq}
	grbuild.flds = &dmrq.ctx.Fields
	grbuild.label = discordmessagereaction.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.DiscordMessageReaction.Query().
//		Select(discordmessagereaction.FieldCreateTime).
//		Scan(ctx, &v)
func (dmrq *DiscordMessageReactionQuery) Select(fields ...string) *DiscordMessageReactionSelect {
	dmrq.ctx.Fields = append(dmrq.ctx.Fields, fields...)
	sbuild := &DiscordMessageReactionSelect{DiscordMessageReactionQuery: dmrq}
	sbuild.label = discordmessagereaction.Label
	sbuild.flds, sbuild.scan = &dmrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DiscordMessageReactionSelect configured with the given aggregations.
func (dmrq *DiscordMessageReactionQuery) Aggregate(fns ...AggregateFunc) *DiscordMessageReactionSelect {
	return dmrq.Select().Aggregate(fns...)
}

func (dmrq *DiscordMessageReactionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dmrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dmrq); err != nil {
				return err
			}
		}
	}
	for _, f := range dmrq.ctx.Fields {
		if !discordmessagereaction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dmrq.path != nil {
		prev, err := dmrq.path(ctx)
		if err != nil {
			return err
		}
		dmrq.sql = prev
	}
	return nil
}

func (dmrq *DiscordMessageReactionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DiscordMessageReaction, error) {
	var (
		nodes       = []*DiscordMessageReaction{}
		withFKs     = dmrq.withFKs
		_spec       = dmrq.querySpec()
		loadedTypes = [2]bool{
			dmrq.withDiscordMessage != nil,
			dmrq.withAuthor != nil,
		}
	)
	if dmrq.withDiscordMessage != nil || dmrq.withAuthor != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, discordmessagereaction.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DiscordMessageReaction).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DiscordMessageReaction{config: dmrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(dmrq.modifiers) > 0 {
		_spec.Modifiers = dmrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dmrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dmrq.withDiscordMessage; query != nil {
		if err := dmrq.loadDiscordMessage(ctx, query, nodes, nil,
			func(n *DiscordMessageReaction, e *DiscordMessage) { n.Edges.DiscordMessage = e }); err != nil {
			return nil, err
		}
	}
	if query := dmrq.withAuthor; query != nil {
		if err := dmrq.loadAuthor(ctx, query, nodes, nil,
			func(n *DiscordMessageReaction, e *DiscordUser) { n.Edges.Author = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dmrq *DiscordMessageReactionQuery) loadDiscordMessage(ctx context.Context, query *DiscordMessageQuery, nodes []*DiscordMessageReaction, init func(*DiscordMessageReaction), assign func(*DiscordMessageReaction, *DiscordMessage)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*DiscordMessageReaction)
	for i := range nodes {
		if nodes[i].discord_message_message_reactions == nil {
			continue
		}
		fk := *nodes[i].discord_message_message_reactions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(discordmessage.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "discord_message_message_reactions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dmrq *DiscordMessageReactionQuery) loadAuthor(ctx context.Context, query *DiscordUserQuery, nodes []*DiscordMessageReaction, init func(*DiscordMessageReaction), assign func(*DiscordMessageReaction, *DiscordUser)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*DiscordMessageReaction)
	for i := range nodes {
		if nodes[i].discord_user_message_reactions == nil {
			continue
		}
		fk := *nodes[i].discord_user_message_reactions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(discorduser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "discord_user_message_reactions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (dmrq *DiscordMessageReactionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dmrq.querySpec()
	if len(dmrq.modifiers) > 0 {
		_spec.Modifiers = dmrq.modifiers
	}
	_spec.Node.Columns = dmrq.ctx.Fields
	if len(dmrq.ctx.Fields) > 0 {
		_spec.Unique = dmrq.ctx.Unique != nil && *dmrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dmrq.driver, _spec)
}

func (dmrq *DiscordMessageReactionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(discordmessagereaction.Table, discordmessagereaction.Columns, sqlgraph.NewFieldSpec(discordmessagereaction.FieldID, field.TypeUUID))
	_spec.From = dmrq.sql
	if unique := dmrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dmrq.path != nil {
		_spec.Unique = true
	}
	if fields := dmrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discordmessagereaction.FieldID)
		for i := range fields {
			if fields[i] != discordmessagereaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dmrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dmrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dmrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dmrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dmrq *DiscordMessageReactionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dmrq.driver.Dialect())
	t1 := builder.Table(discordmessagereaction.Table)
	columns := dmrq.ctx.Fields
	if len(columns) == 0 {
		columns = discordmessagereaction.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dmrq.sql != nil {
		selector = dmrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dmrq.ctx.Unique != nil && *dmrq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range dmrq.modifiers {
		m(selector)
	}
	for _, p := range dmrq.predicates {
		p(selector)
	}
	for _, p := range dmrq.order {
		p(selector)
	}
	if offset := dmrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dmrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (dmrq *DiscordMessageReactionQuery) ForUpdate(opts ...sql.LockOption) *DiscordMessageReactionQuery {
	if dmrq.driver.Dialect() == dialect.Postgres {
		dmrq.Unique(false)
	}
	dmrq.modifiers = append(dmrq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return dmrq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (dmrq *DiscordMessageReactionQuery) ForShare(opts ...sql.LockOption) *DiscordMessageReactionQuery {
	if dmrq.driver.Dialect() == dialect.Postgres {
		dmrq.Unique(false)
	}
	dmrq.modifiers = append(dmrq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return dmrq
}

// DiscordMessageReactionGroupBy is the group-by builder for DiscordMessageReaction entities.
type DiscordMessageReactionGroupBy struct {
	selector
	build *DiscordMessageReactionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dmrgb *DiscordMessageReactionGroupBy) Aggregate(fns ...AggregateFunc) *DiscordMessageReactionGroupBy {
	dmrgb.fns = append(dmrgb.fns, fns...)
	return dmrgb
}

// Scan applies the selector query and scans the result into the given value.
func (dmrgb *DiscordMessageReactionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dmrgb.build.ctx, "GroupBy")
	if err := dmrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DiscordMessageReactionQuery, *DiscordMessageReactionGroupBy](ctx, dmrgb.build, dmrgb, dmrgb.build.inters, v)
}

func (dmrgb *DiscordMessageReactionGroupBy) sqlScan(ctx context.Context, root *DiscordMessageReactionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dmrgb.fns))
	for _, fn := range dmrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dmrgb.flds)+len(dmrgb.fns))
		for _, f := range *dmrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dmrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dmrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DiscordMessageReactionSelect is the builder for selecting fields of DiscordMessageReaction entities.
type DiscordMessageReactionSelect struct {
	*DiscordMessageReactionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dmrs *DiscordMessageReactionSelect) Aggregate(fns ...AggregateFunc) *DiscordMessageReactionSelect {
	dmrs.fns = append(dmrs.fns, fns...)
	return dmrs
}

// Scan applies the selector query and scans the result into the given value.
func (dmrs *DiscordMessageReactionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dmrs.ctx, "Select")
	if err := dmrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DiscordMessageReactionQuery, *DiscordMessageReactionSelect](ctx, dmrs.DiscordMessageReactionQuery, dmrs, dmrs.inters, v)
}

func (dmrs *DiscordMessageReactionSelect) sqlScan(ctx context.Context, root *DiscordMessageReactionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dmrs.fns))
	for _, fn := range dmrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dmrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dmrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
