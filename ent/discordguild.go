// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/discordguild"
)

// DiscordGuild is the model entity for the DiscordGuild schema.
type DiscordGuild struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Discordid holds the value of the "discordid" field.
	Discordid string `json:"discordid,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// RulesChannelID holds the value of the "rules_channel_id" field.
	RulesChannelID string `json:"rules_channel_id,omitempty"`
	// PublicUpdatesChannelID holds the value of the "public_updates_channel_id" field.
	PublicUpdatesChannelID string `json:"public_updates_channel_id,omitempty"`
	// NsfwLevel holds the value of the "nsfw_level" field.
	NsfwLevel int `json:"nsfw_level,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiscordGuildQuery when eager-loading is set.
	Edges        DiscordGuildEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DiscordGuildEdges holds the relations/edges for other nodes in the graph.
type DiscordGuildEdges struct {
	// Members holds the value of the members edge.
	Members []*DiscordUser `json:"members,omitempty"`
	// DiscordMessages holds the value of the discord_messages edge.
	DiscordMessages []*DiscordMessage `json:"discord_messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes          [2]bool
	namedMembers         map[string][]*DiscordUser
	namedDiscordMessages map[string][]*DiscordMessage
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e DiscordGuildEdges) MembersOrErr() ([]*DiscordUser, error) {
	if e.loadedTypes[0] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// DiscordMessagesOrErr returns the DiscordMessages value or an error if the edge
// was not loaded in eager-loading.
func (e DiscordGuildEdges) DiscordMessagesOrErr() ([]*DiscordMessage, error) {
	if e.loadedTypes[1] {
		return e.DiscordMessages, nil
	}
	return nil, &NotLoadedError{edge: "discord_messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DiscordGuild) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case discordguild.FieldNsfwLevel:
			values[i] = new(sql.NullInt64)
		case discordguild.FieldDiscordid, discordguild.FieldName, discordguild.FieldDescription, discordguild.FieldRulesChannelID, discordguild.FieldPublicUpdatesChannelID:
			values[i] = new(sql.NullString)
		case discordguild.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DiscordGuild fields.
func (dg *DiscordGuild) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discordguild.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dg.ID = *value
			}
		case discordguild.FieldDiscordid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discordid", values[i])
			} else if value.Valid {
				dg.Discordid = value.String
			}
		case discordguild.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dg.Name = value.String
			}
		case discordguild.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				dg.Description = value.String
			}
		case discordguild.FieldRulesChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rules_channel_id", values[i])
			} else if value.Valid {
				dg.RulesChannelID = value.String
			}
		case discordguild.FieldPublicUpdatesChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_updates_channel_id", values[i])
			} else if value.Valid {
				dg.PublicUpdatesChannelID = value.String
			}
		case discordguild.FieldNsfwLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nsfw_level", values[i])
			} else if value.Valid {
				dg.NsfwLevel = int(value.Int64)
			}
		default:
			dg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DiscordGuild.
// This includes values selected through modifiers, order, etc.
func (dg *DiscordGuild) Value(name string) (ent.Value, error) {
	return dg.selectValues.Get(name)
}

// QueryMembers queries the "members" edge of the DiscordGuild entity.
func (dg *DiscordGuild) QueryMembers() *DiscordUserQuery {
	return NewDiscordGuildClient(dg.config).QueryMembers(dg)
}

// QueryDiscordMessages queries the "discord_messages" edge of the DiscordGuild entity.
func (dg *DiscordGuild) QueryDiscordMessages() *DiscordMessageQuery {
	return NewDiscordGuildClient(dg.config).QueryDiscordMessages(dg)
}

// Update returns a builder for updating this DiscordGuild.
// Note that you need to call DiscordGuild.Unwrap() before calling this method if this DiscordGuild
// was returned from a transaction, and the transaction was committed or rolled back.
func (dg *DiscordGuild) Update() *DiscordGuildUpdateOne {
	return NewDiscordGuildClient(dg.config).UpdateOne(dg)
}

// Unwrap unwraps the DiscordGuild entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dg *DiscordGuild) Unwrap() *DiscordGuild {
	_tx, ok := dg.config.driver.(*txDriver)
	if !ok {
		panic("ent: DiscordGuild is not a transactional entity")
	}
	dg.config.driver = _tx.drv
	return dg
}

// String implements the fmt.Stringer.
func (dg *DiscordGuild) String() string {
	var builder strings.Builder
	builder.WriteString("DiscordGuild(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dg.ID))
	builder.WriteString("discordid=")
	builder.WriteString(dg.Discordid)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(dg.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(dg.Description)
	builder.WriteString(", ")
	builder.WriteString("rules_channel_id=")
	builder.WriteString(dg.RulesChannelID)
	builder.WriteString(", ")
	builder.WriteString("public_updates_channel_id=")
	builder.WriteString(dg.PublicUpdatesChannelID)
	builder.WriteString(", ")
	builder.WriteString("nsfw_level=")
	builder.WriteString(fmt.Sprintf("%v", dg.NsfwLevel))
	builder.WriteByte(')')
	return builder.String()
}

// NamedMembers returns the Members named value or an error if the edge was not
// loaded in eager-loading with this name.
func (dg *DiscordGuild) NamedMembers(name string) ([]*DiscordUser, error) {
	if dg.Edges.namedMembers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := dg.Edges.namedMembers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (dg *DiscordGuild) appendNamedMembers(name string, edges ...*DiscordUser) {
	if dg.Edges.namedMembers == nil {
		dg.Edges.namedMembers = make(map[string][]*DiscordUser)
	}
	if len(edges) == 0 {
		dg.Edges.namedMembers[name] = []*DiscordUser{}
	} else {
		dg.Edges.namedMembers[name] = append(dg.Edges.namedMembers[name], edges...)
	}
}

// NamedDiscordMessages returns the DiscordMessages named value or an error if the edge was not
// loaded in eager-loading with this name.
func (dg *DiscordGuild) NamedDiscordMessages(name string) ([]*DiscordMessage, error) {
	if dg.Edges.namedDiscordMessages == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := dg.Edges.namedDiscordMessages[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (dg *DiscordGuild) appendNamedDiscordMessages(name string, edges ...*DiscordMessage) {
	if dg.Edges.namedDiscordMessages == nil {
		dg.Edges.namedDiscordMessages = make(map[string][]*DiscordMessage)
	}
	if len(edges) == 0 {
		dg.Edges.namedDiscordMessages[name] = []*DiscordMessage{}
	} else {
		dg.Edges.namedDiscordMessages[name] = append(dg.Edges.namedDiscordMessages[name], edges...)
	}
}

// DiscordGuilds is a parsable slice of DiscordGuild.
type DiscordGuilds []*DiscordGuild
