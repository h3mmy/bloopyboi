// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/h3mmy/bloopyboi/ent/book"
	"github.com/h3mmy/bloopyboi/ent/bookauthor"
	"github.com/h3mmy/bloopyboi/ent/discordmessage"
	"github.com/h3mmy/bloopyboi/ent/discorduser"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Book is the client for interacting with the Book builders.
	Book *BookClient
	// BookAuthor is the client for interacting with the BookAuthor builders.
	BookAuthor *BookAuthorClient
	// DiscordMessage is the client for interacting with the DiscordMessage builders.
	DiscordMessage *DiscordMessageClient
	// DiscordUser is the client for interacting with the DiscordUser builders.
	DiscordUser *DiscordUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Book = NewBookClient(c.config)
	c.BookAuthor = NewBookAuthorClient(c.config)
	c.DiscordMessage = NewDiscordMessageClient(c.config)
	c.DiscordUser = NewDiscordUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Book:           NewBookClient(cfg),
		BookAuthor:     NewBookAuthorClient(cfg),
		DiscordMessage: NewDiscordMessageClient(cfg),
		DiscordUser:    NewDiscordUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Book:           NewBookClient(cfg),
		BookAuthor:     NewBookAuthorClient(cfg),
		DiscordMessage: NewDiscordMessageClient(cfg),
		DiscordUser:    NewDiscordUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Book.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Book.Use(hooks...)
	c.BookAuthor.Use(hooks...)
	c.DiscordMessage.Use(hooks...)
	c.DiscordUser.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Book.Intercept(interceptors...)
	c.BookAuthor.Intercept(interceptors...)
	c.DiscordMessage.Intercept(interceptors...)
	c.DiscordUser.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BookMutation:
		return c.Book.mutate(ctx, m)
	case *BookAuthorMutation:
		return c.BookAuthor.mutate(ctx, m)
	case *DiscordMessageMutation:
		return c.DiscordMessage.mutate(ctx, m)
	case *DiscordUserMutation:
		return c.DiscordUser.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BookClient is a client for the Book schema.
type BookClient struct {
	config
}

// NewBookClient returns a client for the Book from the given config.
func NewBookClient(c config) *BookClient {
	return &BookClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `book.Hooks(f(g(h())))`.
func (c *BookClient) Use(hooks ...Hook) {
	c.hooks.Book = append(c.hooks.Book, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `book.Intercept(f(g(h())))`.
func (c *BookClient) Intercept(interceptors ...Interceptor) {
	c.inters.Book = append(c.inters.Book, interceptors...)
}

// Create returns a builder for creating a Book entity.
func (c *BookClient) Create() *BookCreate {
	mutation := newBookMutation(c.config, OpCreate)
	return &BookCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Book entities.
func (c *BookClient) CreateBulk(builders ...*BookCreate) *BookCreateBulk {
	return &BookCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Book.
func (c *BookClient) Update() *BookUpdate {
	mutation := newBookMutation(c.config, OpUpdate)
	return &BookUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BookClient) UpdateOne(b *Book) *BookUpdateOne {
	mutation := newBookMutation(c.config, OpUpdateOne, withBook(b))
	return &BookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BookClient) UpdateOneID(id uuid.UUID) *BookUpdateOne {
	mutation := newBookMutation(c.config, OpUpdateOne, withBookID(id))
	return &BookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Book.
func (c *BookClient) Delete() *BookDelete {
	mutation := newBookMutation(c.config, OpDelete)
	return &BookDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BookClient) DeleteOne(b *Book) *BookDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BookClient) DeleteOneID(id uuid.UUID) *BookDeleteOne {
	builder := c.Delete().Where(book.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BookDeleteOne{builder}
}

// Query returns a query builder for Book.
func (c *BookClient) Query() *BookQuery {
	return &BookQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBook},
		inters: c.Interceptors(),
	}
}

// Get returns a Book entity by its id.
func (c *BookClient) Get(ctx context.Context, id uuid.UUID) (*Book, error) {
	return c.Query().Where(book.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BookClient) GetX(ctx context.Context, id uuid.UUID) *Book {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBookAuthor queries the book_author edge of a Book.
func (c *BookClient) QueryBookAuthor(b *Book) *BookAuthorQuery {
	query := (&BookAuthorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(book.Table, book.FieldID, id),
			sqlgraph.To(bookauthor.Table, bookauthor.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, book.BookAuthorTable, book.BookAuthorPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BookClient) Hooks() []Hook {
	return c.hooks.Book
}

// Interceptors returns the client interceptors.
func (c *BookClient) Interceptors() []Interceptor {
	return c.inters.Book
}

func (c *BookClient) mutate(ctx context.Context, m *BookMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BookCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BookUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BookDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Book mutation op: %q", m.Op())
	}
}

// BookAuthorClient is a client for the BookAuthor schema.
type BookAuthorClient struct {
	config
}

// NewBookAuthorClient returns a client for the BookAuthor from the given config.
func NewBookAuthorClient(c config) *BookAuthorClient {
	return &BookAuthorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bookauthor.Hooks(f(g(h())))`.
func (c *BookAuthorClient) Use(hooks ...Hook) {
	c.hooks.BookAuthor = append(c.hooks.BookAuthor, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bookauthor.Intercept(f(g(h())))`.
func (c *BookAuthorClient) Intercept(interceptors ...Interceptor) {
	c.inters.BookAuthor = append(c.inters.BookAuthor, interceptors...)
}

// Create returns a builder for creating a BookAuthor entity.
func (c *BookAuthorClient) Create() *BookAuthorCreate {
	mutation := newBookAuthorMutation(c.config, OpCreate)
	return &BookAuthorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BookAuthor entities.
func (c *BookAuthorClient) CreateBulk(builders ...*BookAuthorCreate) *BookAuthorCreateBulk {
	return &BookAuthorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BookAuthor.
func (c *BookAuthorClient) Update() *BookAuthorUpdate {
	mutation := newBookAuthorMutation(c.config, OpUpdate)
	return &BookAuthorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BookAuthorClient) UpdateOne(ba *BookAuthor) *BookAuthorUpdateOne {
	mutation := newBookAuthorMutation(c.config, OpUpdateOne, withBookAuthor(ba))
	return &BookAuthorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BookAuthorClient) UpdateOneID(id uuid.UUID) *BookAuthorUpdateOne {
	mutation := newBookAuthorMutation(c.config, OpUpdateOne, withBookAuthorID(id))
	return &BookAuthorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BookAuthor.
func (c *BookAuthorClient) Delete() *BookAuthorDelete {
	mutation := newBookAuthorMutation(c.config, OpDelete)
	return &BookAuthorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BookAuthorClient) DeleteOne(ba *BookAuthor) *BookAuthorDeleteOne {
	return c.DeleteOneID(ba.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BookAuthorClient) DeleteOneID(id uuid.UUID) *BookAuthorDeleteOne {
	builder := c.Delete().Where(bookauthor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BookAuthorDeleteOne{builder}
}

// Query returns a query builder for BookAuthor.
func (c *BookAuthorClient) Query() *BookAuthorQuery {
	return &BookAuthorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBookAuthor},
		inters: c.Interceptors(),
	}
}

// Get returns a BookAuthor entity by its id.
func (c *BookAuthorClient) Get(ctx context.Context, id uuid.UUID) (*BookAuthor, error) {
	return c.Query().Where(bookauthor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BookAuthorClient) GetX(ctx context.Context, id uuid.UUID) *BookAuthor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBooks queries the books edge of a BookAuthor.
func (c *BookAuthorClient) QueryBooks(ba *BookAuthor) *BookQuery {
	query := (&BookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ba.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bookauthor.Table, bookauthor.FieldID, id),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, bookauthor.BooksTable, bookauthor.BooksPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ba.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BookAuthorClient) Hooks() []Hook {
	return c.hooks.BookAuthor
}

// Interceptors returns the client interceptors.
func (c *BookAuthorClient) Interceptors() []Interceptor {
	return c.inters.BookAuthor
}

func (c *BookAuthorClient) mutate(ctx context.Context, m *BookAuthorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BookAuthorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BookAuthorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BookAuthorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BookAuthorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BookAuthor mutation op: %q", m.Op())
	}
}

// DiscordMessageClient is a client for the DiscordMessage schema.
type DiscordMessageClient struct {
	config
}

// NewDiscordMessageClient returns a client for the DiscordMessage from the given config.
func NewDiscordMessageClient(c config) *DiscordMessageClient {
	return &DiscordMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `discordmessage.Hooks(f(g(h())))`.
func (c *DiscordMessageClient) Use(hooks ...Hook) {
	c.hooks.DiscordMessage = append(c.hooks.DiscordMessage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `discordmessage.Intercept(f(g(h())))`.
func (c *DiscordMessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.DiscordMessage = append(c.inters.DiscordMessage, interceptors...)
}

// Create returns a builder for creating a DiscordMessage entity.
func (c *DiscordMessageClient) Create() *DiscordMessageCreate {
	mutation := newDiscordMessageMutation(c.config, OpCreate)
	return &DiscordMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DiscordMessage entities.
func (c *DiscordMessageClient) CreateBulk(builders ...*DiscordMessageCreate) *DiscordMessageCreateBulk {
	return &DiscordMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DiscordMessage.
func (c *DiscordMessageClient) Update() *DiscordMessageUpdate {
	mutation := newDiscordMessageMutation(c.config, OpUpdate)
	return &DiscordMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiscordMessageClient) UpdateOne(dm *DiscordMessage) *DiscordMessageUpdateOne {
	mutation := newDiscordMessageMutation(c.config, OpUpdateOne, withDiscordMessage(dm))
	return &DiscordMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiscordMessageClient) UpdateOneID(id string) *DiscordMessageUpdateOne {
	mutation := newDiscordMessageMutation(c.config, OpUpdateOne, withDiscordMessageID(id))
	return &DiscordMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DiscordMessage.
func (c *DiscordMessageClient) Delete() *DiscordMessageDelete {
	mutation := newDiscordMessageMutation(c.config, OpDelete)
	return &DiscordMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DiscordMessageClient) DeleteOne(dm *DiscordMessage) *DiscordMessageDeleteOne {
	return c.DeleteOneID(dm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DiscordMessageClient) DeleteOneID(id string) *DiscordMessageDeleteOne {
	builder := c.Delete().Where(discordmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiscordMessageDeleteOne{builder}
}

// Query returns a query builder for DiscordMessage.
func (c *DiscordMessageClient) Query() *DiscordMessageQuery {
	return &DiscordMessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDiscordMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a DiscordMessage entity by its id.
func (c *DiscordMessageClient) Get(ctx context.Context, id string) (*DiscordMessage, error) {
	return c.Query().Where(discordmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiscordMessageClient) GetX(ctx context.Context, id string) *DiscordMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a DiscordMessage.
func (c *DiscordMessageClient) QueryAuthor(dm *DiscordMessage) *DiscordUserQuery {
	query := (&DiscordUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discordmessage.Table, discordmessage.FieldID, id),
			sqlgraph.To(discorduser.Table, discorduser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, discordmessage.AuthorTable, discordmessage.AuthorPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiscordMessageClient) Hooks() []Hook {
	return c.hooks.DiscordMessage
}

// Interceptors returns the client interceptors.
func (c *DiscordMessageClient) Interceptors() []Interceptor {
	return c.inters.DiscordMessage
}

func (c *DiscordMessageClient) mutate(ctx context.Context, m *DiscordMessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DiscordMessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DiscordMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DiscordMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DiscordMessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DiscordMessage mutation op: %q", m.Op())
	}
}

// DiscordUserClient is a client for the DiscordUser schema.
type DiscordUserClient struct {
	config
}

// NewDiscordUserClient returns a client for the DiscordUser from the given config.
func NewDiscordUserClient(c config) *DiscordUserClient {
	return &DiscordUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `discorduser.Hooks(f(g(h())))`.
func (c *DiscordUserClient) Use(hooks ...Hook) {
	c.hooks.DiscordUser = append(c.hooks.DiscordUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `discorduser.Intercept(f(g(h())))`.
func (c *DiscordUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.DiscordUser = append(c.inters.DiscordUser, interceptors...)
}

// Create returns a builder for creating a DiscordUser entity.
func (c *DiscordUserClient) Create() *DiscordUserCreate {
	mutation := newDiscordUserMutation(c.config, OpCreate)
	return &DiscordUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DiscordUser entities.
func (c *DiscordUserClient) CreateBulk(builders ...*DiscordUserCreate) *DiscordUserCreateBulk {
	return &DiscordUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DiscordUser.
func (c *DiscordUserClient) Update() *DiscordUserUpdate {
	mutation := newDiscordUserMutation(c.config, OpUpdate)
	return &DiscordUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiscordUserClient) UpdateOne(du *DiscordUser) *DiscordUserUpdateOne {
	mutation := newDiscordUserMutation(c.config, OpUpdateOne, withDiscordUser(du))
	return &DiscordUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiscordUserClient) UpdateOneID(id uuid.UUID) *DiscordUserUpdateOne {
	mutation := newDiscordUserMutation(c.config, OpUpdateOne, withDiscordUserID(id))
	return &DiscordUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DiscordUser.
func (c *DiscordUserClient) Delete() *DiscordUserDelete {
	mutation := newDiscordUserMutation(c.config, OpDelete)
	return &DiscordUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DiscordUserClient) DeleteOne(du *DiscordUser) *DiscordUserDeleteOne {
	return c.DeleteOneID(du.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DiscordUserClient) DeleteOneID(id uuid.UUID) *DiscordUserDeleteOne {
	builder := c.Delete().Where(discorduser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiscordUserDeleteOne{builder}
}

// Query returns a query builder for DiscordUser.
func (c *DiscordUserClient) Query() *DiscordUserQuery {
	return &DiscordUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDiscordUser},
		inters: c.Interceptors(),
	}
}

// Get returns a DiscordUser entity by its id.
func (c *DiscordUserClient) Get(ctx context.Context, id uuid.UUID) (*DiscordUser, error) {
	return c.Query().Where(discorduser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiscordUserClient) GetX(ctx context.Context, id uuid.UUID) *DiscordUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDiscordMessages queries the discord_messages edge of a DiscordUser.
func (c *DiscordUserClient) QueryDiscordMessages(du *DiscordUser) *DiscordMessageQuery {
	query := (&DiscordMessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := du.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discorduser.Table, discorduser.FieldID, id),
			sqlgraph.To(discordmessage.Table, discordmessage.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, discorduser.DiscordMessagesTable, discorduser.DiscordMessagesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(du.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiscordUserClient) Hooks() []Hook {
	return c.hooks.DiscordUser
}

// Interceptors returns the client interceptors.
func (c *DiscordUserClient) Interceptors() []Interceptor {
	return c.inters.DiscordUser
}

func (c *DiscordUserClient) mutate(ctx context.Context, m *DiscordUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DiscordUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DiscordUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DiscordUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DiscordUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DiscordUser mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Book, BookAuthor, DiscordMessage, DiscordUser []ent.Hook
	}
	inters struct {
		Book, BookAuthor, DiscordMessage, DiscordUser []ent.Interceptor
	}
)
