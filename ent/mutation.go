// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bwmarrin/discordgo"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/book"
	"github.com/h3mmy/bloopyboi/ent/bookauthor"
	"github.com/h3mmy/bloopyboi/ent/discordmessage"
	"github.com/h3mmy/bloopyboi/ent/discorduser"
	"github.com/h3mmy/bloopyboi/ent/mediarequest"
	"github.com/h3mmy/bloopyboi/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBook           = "Book"
	TypeBookAuthor     = "BookAuthor"
	TypeDiscordMessage = "DiscordMessage"
	TypeDiscordUser    = "DiscordUser"
	TypeMediaRequest   = "MediaRequest"
)

// BookMutation represents an operation that mutates the Book nodes in the graph.
type BookMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	title                *string
	description          *string
	goodreads_id         *string
	google_volume_id     *string
	isbn_10              *string
	isbn_13              *string
	publisher            *string
	image_url            *string
	clearedFields        map[string]struct{}
	book_author          map[uuid.UUID]struct{}
	removedbook_author   map[uuid.UUID]struct{}
	clearedbook_author   bool
	media_request        map[uuid.UUID]struct{}
	removedmedia_request map[uuid.UUID]struct{}
	clearedmedia_request bool
	done                 bool
	oldValue             func(context.Context) (*Book, error)
	predicates           []predicate.Book
}

var _ ent.Mutation = (*BookMutation)(nil)

// bookOption allows management of the mutation configuration using functional options.
type bookOption func(*BookMutation)

// newBookMutation creates new mutation for the Book entity.
func newBookMutation(c config, op Op, opts ...bookOption) *BookMutation {
	m := &BookMutation{
		config:        c,
		op:            op,
		typ:           TypeBook,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBookID sets the ID field of the mutation.
func withBookID(id uuid.UUID) bookOption {
	return func(m *BookMutation) {
		var (
			err   error
			once  sync.Once
			value *Book
		)
		m.oldValue = func(ctx context.Context) (*Book, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Book.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBook sets the old Book of the mutation.
func withBook(node *Book) bookOption {
	return func(m *BookMutation) {
		m.oldValue = func(context.Context) (*Book, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BookMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BookMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Book entities.
func (m *BookMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BookMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BookMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Book.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *BookMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *BookMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Book entity.
// If the Book object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *BookMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *BookMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *BookMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Book entity.
// If the Book object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *BookMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[book.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *BookMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[book.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *BookMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, book.FieldDescription)
}

// SetGoodreadsID sets the "goodreads_id" field.
func (m *BookMutation) SetGoodreadsID(s string) {
	m.goodreads_id = &s
}

// GoodreadsID returns the value of the "goodreads_id" field in the mutation.
func (m *BookMutation) GoodreadsID() (r string, exists bool) {
	v := m.goodreads_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodreadsID returns the old "goodreads_id" field's value of the Book entity.
// If the Book object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookMutation) OldGoodreadsID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodreadsID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodreadsID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodreadsID: %w", err)
	}
	return oldValue.GoodreadsID, nil
}

// ClearGoodreadsID clears the value of the "goodreads_id" field.
func (m *BookMutation) ClearGoodreadsID() {
	m.goodreads_id = nil
	m.clearedFields[book.FieldGoodreadsID] = struct{}{}
}

// GoodreadsIDCleared returns if the "goodreads_id" field was cleared in this mutation.
func (m *BookMutation) GoodreadsIDCleared() bool {
	_, ok := m.clearedFields[book.FieldGoodreadsID]
	return ok
}

// ResetGoodreadsID resets all changes to the "goodreads_id" field.
func (m *BookMutation) ResetGoodreadsID() {
	m.goodreads_id = nil
	delete(m.clearedFields, book.FieldGoodreadsID)
}

// SetGoogleVolumeID sets the "google_volume_id" field.
func (m *BookMutation) SetGoogleVolumeID(s string) {
	m.google_volume_id = &s
}

// GoogleVolumeID returns the value of the "google_volume_id" field in the mutation.
func (m *BookMutation) GoogleVolumeID() (r string, exists bool) {
	v := m.google_volume_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoogleVolumeID returns the old "google_volume_id" field's value of the Book entity.
// If the Book object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookMutation) OldGoogleVolumeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoogleVolumeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoogleVolumeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoogleVolumeID: %w", err)
	}
	return oldValue.GoogleVolumeID, nil
}

// ResetGoogleVolumeID resets all changes to the "google_volume_id" field.
func (m *BookMutation) ResetGoogleVolumeID() {
	m.google_volume_id = nil
}

// SetIsbn10 sets the "isbn_10" field.
func (m *BookMutation) SetIsbn10(s string) {
	m.isbn_10 = &s
}

// Isbn10 returns the value of the "isbn_10" field in the mutation.
func (m *BookMutation) Isbn10() (r string, exists bool) {
	v := m.isbn_10
	if v == nil {
		return
	}
	return *v, true
}

// OldIsbn10 returns the old "isbn_10" field's value of the Book entity.
// If the Book object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookMutation) OldIsbn10(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsbn10 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsbn10 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsbn10: %w", err)
	}
	return oldValue.Isbn10, nil
}

// ClearIsbn10 clears the value of the "isbn_10" field.
func (m *BookMutation) ClearIsbn10() {
	m.isbn_10 = nil
	m.clearedFields[book.FieldIsbn10] = struct{}{}
}

// Isbn10Cleared returns if the "isbn_10" field was cleared in this mutation.
func (m *BookMutation) Isbn10Cleared() bool {
	_, ok := m.clearedFields[book.FieldIsbn10]
	return ok
}

// ResetIsbn10 resets all changes to the "isbn_10" field.
func (m *BookMutation) ResetIsbn10() {
	m.isbn_10 = nil
	delete(m.clearedFields, book.FieldIsbn10)
}

// SetIsbn13 sets the "isbn_13" field.
func (m *BookMutation) SetIsbn13(s string) {
	m.isbn_13 = &s
}

// Isbn13 returns the value of the "isbn_13" field in the mutation.
func (m *BookMutation) Isbn13() (r string, exists bool) {
	v := m.isbn_13
	if v == nil {
		return
	}
	return *v, true
}

// OldIsbn13 returns the old "isbn_13" field's value of the Book entity.
// If the Book object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookMutation) OldIsbn13(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsbn13 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsbn13 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsbn13: %w", err)
	}
	return oldValue.Isbn13, nil
}

// ClearIsbn13 clears the value of the "isbn_13" field.
func (m *BookMutation) ClearIsbn13() {
	m.isbn_13 = nil
	m.clearedFields[book.FieldIsbn13] = struct{}{}
}

// Isbn13Cleared returns if the "isbn_13" field was cleared in this mutation.
func (m *BookMutation) Isbn13Cleared() bool {
	_, ok := m.clearedFields[book.FieldIsbn13]
	return ok
}

// ResetIsbn13 resets all changes to the "isbn_13" field.
func (m *BookMutation) ResetIsbn13() {
	m.isbn_13 = nil
	delete(m.clearedFields, book.FieldIsbn13)
}

// SetPublisher sets the "publisher" field.
func (m *BookMutation) SetPublisher(s string) {
	m.publisher = &s
}

// Publisher returns the value of the "publisher" field in the mutation.
func (m *BookMutation) Publisher() (r string, exists bool) {
	v := m.publisher
	if v == nil {
		return
	}
	return *v, true
}

// OldPublisher returns the old "publisher" field's value of the Book entity.
// If the Book object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookMutation) OldPublisher(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublisher is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublisher requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublisher: %w", err)
	}
	return oldValue.Publisher, nil
}

// ClearPublisher clears the value of the "publisher" field.
func (m *BookMutation) ClearPublisher() {
	m.publisher = nil
	m.clearedFields[book.FieldPublisher] = struct{}{}
}

// PublisherCleared returns if the "publisher" field was cleared in this mutation.
func (m *BookMutation) PublisherCleared() bool {
	_, ok := m.clearedFields[book.FieldPublisher]
	return ok
}

// ResetPublisher resets all changes to the "publisher" field.
func (m *BookMutation) ResetPublisher() {
	m.publisher = nil
	delete(m.clearedFields, book.FieldPublisher)
}

// SetImageURL sets the "image_url" field.
func (m *BookMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *BookMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the Book entity.
// If the Book object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ClearImageURL clears the value of the "image_url" field.
func (m *BookMutation) ClearImageURL() {
	m.image_url = nil
	m.clearedFields[book.FieldImageURL] = struct{}{}
}

// ImageURLCleared returns if the "image_url" field was cleared in this mutation.
func (m *BookMutation) ImageURLCleared() bool {
	_, ok := m.clearedFields[book.FieldImageURL]
	return ok
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *BookMutation) ResetImageURL() {
	m.image_url = nil
	delete(m.clearedFields, book.FieldImageURL)
}

// AddBookAuthorIDs adds the "book_author" edge to the BookAuthor entity by ids.
func (m *BookMutation) AddBookAuthorIDs(ids ...uuid.UUID) {
	if m.book_author == nil {
		m.book_author = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.book_author[ids[i]] = struct{}{}
	}
}

// ClearBookAuthor clears the "book_author" edge to the BookAuthor entity.
func (m *BookMutation) ClearBookAuthor() {
	m.clearedbook_author = true
}

// BookAuthorCleared reports if the "book_author" edge to the BookAuthor entity was cleared.
func (m *BookMutation) BookAuthorCleared() bool {
	return m.clearedbook_author
}

// RemoveBookAuthorIDs removes the "book_author" edge to the BookAuthor entity by IDs.
func (m *BookMutation) RemoveBookAuthorIDs(ids ...uuid.UUID) {
	if m.removedbook_author == nil {
		m.removedbook_author = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.book_author, ids[i])
		m.removedbook_author[ids[i]] = struct{}{}
	}
}

// RemovedBookAuthor returns the removed IDs of the "book_author" edge to the BookAuthor entity.
func (m *BookMutation) RemovedBookAuthorIDs() (ids []uuid.UUID) {
	for id := range m.removedbook_author {
		ids = append(ids, id)
	}
	return
}

// BookAuthorIDs returns the "book_author" edge IDs in the mutation.
func (m *BookMutation) BookAuthorIDs() (ids []uuid.UUID) {
	for id := range m.book_author {
		ids = append(ids, id)
	}
	return
}

// ResetBookAuthor resets all changes to the "book_author" edge.
func (m *BookMutation) ResetBookAuthor() {
	m.book_author = nil
	m.clearedbook_author = false
	m.removedbook_author = nil
}

// AddMediaRequestIDs adds the "media_request" edge to the MediaRequest entity by ids.
func (m *BookMutation) AddMediaRequestIDs(ids ...uuid.UUID) {
	if m.media_request == nil {
		m.media_request = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.media_request[ids[i]] = struct{}{}
	}
}

// ClearMediaRequest clears the "media_request" edge to the MediaRequest entity.
func (m *BookMutation) ClearMediaRequest() {
	m.clearedmedia_request = true
}

// MediaRequestCleared reports if the "media_request" edge to the MediaRequest entity was cleared.
func (m *BookMutation) MediaRequestCleared() bool {
	return m.clearedmedia_request
}

// RemoveMediaRequestIDs removes the "media_request" edge to the MediaRequest entity by IDs.
func (m *BookMutation) RemoveMediaRequestIDs(ids ...uuid.UUID) {
	if m.removedmedia_request == nil {
		m.removedmedia_request = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.media_request, ids[i])
		m.removedmedia_request[ids[i]] = struct{}{}
	}
}

// RemovedMediaRequest returns the removed IDs of the "media_request" edge to the MediaRequest entity.
func (m *BookMutation) RemovedMediaRequestIDs() (ids []uuid.UUID) {
	for id := range m.removedmedia_request {
		ids = append(ids, id)
	}
	return
}

// MediaRequestIDs returns the "media_request" edge IDs in the mutation.
func (m *BookMutation) MediaRequestIDs() (ids []uuid.UUID) {
	for id := range m.media_request {
		ids = append(ids, id)
	}
	return
}

// ResetMediaRequest resets all changes to the "media_request" edge.
func (m *BookMutation) ResetMediaRequest() {
	m.media_request = nil
	m.clearedmedia_request = false
	m.removedmedia_request = nil
}

// Where appends a list predicates to the BookMutation builder.
func (m *BookMutation) Where(ps ...predicate.Book) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BookMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BookMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Book, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BookMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BookMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Book).
func (m *BookMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BookMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.title != nil {
		fields = append(fields, book.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, book.FieldDescription)
	}
	if m.goodreads_id != nil {
		fields = append(fields, book.FieldGoodreadsID)
	}
	if m.google_volume_id != nil {
		fields = append(fields, book.FieldGoogleVolumeID)
	}
	if m.isbn_10 != nil {
		fields = append(fields, book.FieldIsbn10)
	}
	if m.isbn_13 != nil {
		fields = append(fields, book.FieldIsbn13)
	}
	if m.publisher != nil {
		fields = append(fields, book.FieldPublisher)
	}
	if m.image_url != nil {
		fields = append(fields, book.FieldImageURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BookMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case book.FieldTitle:
		return m.Title()
	case book.FieldDescription:
		return m.Description()
	case book.FieldGoodreadsID:
		return m.GoodreadsID()
	case book.FieldGoogleVolumeID:
		return m.GoogleVolumeID()
	case book.FieldIsbn10:
		return m.Isbn10()
	case book.FieldIsbn13:
		return m.Isbn13()
	case book.FieldPublisher:
		return m.Publisher()
	case book.FieldImageURL:
		return m.ImageURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BookMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case book.FieldTitle:
		return m.OldTitle(ctx)
	case book.FieldDescription:
		return m.OldDescription(ctx)
	case book.FieldGoodreadsID:
		return m.OldGoodreadsID(ctx)
	case book.FieldGoogleVolumeID:
		return m.OldGoogleVolumeID(ctx)
	case book.FieldIsbn10:
		return m.OldIsbn10(ctx)
	case book.FieldIsbn13:
		return m.OldIsbn13(ctx)
	case book.FieldPublisher:
		return m.OldPublisher(ctx)
	case book.FieldImageURL:
		return m.OldImageURL(ctx)
	}
	return nil, fmt.Errorf("unknown Book field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookMutation) SetField(name string, value ent.Value) error {
	switch name {
	case book.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case book.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case book.FieldGoodreadsID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodreadsID(v)
		return nil
	case book.FieldGoogleVolumeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoogleVolumeID(v)
		return nil
	case book.FieldIsbn10:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsbn10(v)
		return nil
	case book.FieldIsbn13:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsbn13(v)
		return nil
	case book.FieldPublisher:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublisher(v)
		return nil
	case book.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	}
	return fmt.Errorf("unknown Book field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BookMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BookMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Book numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BookMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(book.FieldDescription) {
		fields = append(fields, book.FieldDescription)
	}
	if m.FieldCleared(book.FieldGoodreadsID) {
		fields = append(fields, book.FieldGoodreadsID)
	}
	if m.FieldCleared(book.FieldIsbn10) {
		fields = append(fields, book.FieldIsbn10)
	}
	if m.FieldCleared(book.FieldIsbn13) {
		fields = append(fields, book.FieldIsbn13)
	}
	if m.FieldCleared(book.FieldPublisher) {
		fields = append(fields, book.FieldPublisher)
	}
	if m.FieldCleared(book.FieldImageURL) {
		fields = append(fields, book.FieldImageURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BookMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BookMutation) ClearField(name string) error {
	switch name {
	case book.FieldDescription:
		m.ClearDescription()
		return nil
	case book.FieldGoodreadsID:
		m.ClearGoodreadsID()
		return nil
	case book.FieldIsbn10:
		m.ClearIsbn10()
		return nil
	case book.FieldIsbn13:
		m.ClearIsbn13()
		return nil
	case book.FieldPublisher:
		m.ClearPublisher()
		return nil
	case book.FieldImageURL:
		m.ClearImageURL()
		return nil
	}
	return fmt.Errorf("unknown Book nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BookMutation) ResetField(name string) error {
	switch name {
	case book.FieldTitle:
		m.ResetTitle()
		return nil
	case book.FieldDescription:
		m.ResetDescription()
		return nil
	case book.FieldGoodreadsID:
		m.ResetGoodreadsID()
		return nil
	case book.FieldGoogleVolumeID:
		m.ResetGoogleVolumeID()
		return nil
	case book.FieldIsbn10:
		m.ResetIsbn10()
		return nil
	case book.FieldIsbn13:
		m.ResetIsbn13()
		return nil
	case book.FieldPublisher:
		m.ResetPublisher()
		return nil
	case book.FieldImageURL:
		m.ResetImageURL()
		return nil
	}
	return fmt.Errorf("unknown Book field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BookMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.book_author != nil {
		edges = append(edges, book.EdgeBookAuthor)
	}
	if m.media_request != nil {
		edges = append(edges, book.EdgeMediaRequest)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BookMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case book.EdgeBookAuthor:
		ids := make([]ent.Value, 0, len(m.book_author))
		for id := range m.book_author {
			ids = append(ids, id)
		}
		return ids
	case book.EdgeMediaRequest:
		ids := make([]ent.Value, 0, len(m.media_request))
		for id := range m.media_request {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BookMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedbook_author != nil {
		edges = append(edges, book.EdgeBookAuthor)
	}
	if m.removedmedia_request != nil {
		edges = append(edges, book.EdgeMediaRequest)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BookMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case book.EdgeBookAuthor:
		ids := make([]ent.Value, 0, len(m.removedbook_author))
		for id := range m.removedbook_author {
			ids = append(ids, id)
		}
		return ids
	case book.EdgeMediaRequest:
		ids := make([]ent.Value, 0, len(m.removedmedia_request))
		for id := range m.removedmedia_request {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BookMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedbook_author {
		edges = append(edges, book.EdgeBookAuthor)
	}
	if m.clearedmedia_request {
		edges = append(edges, book.EdgeMediaRequest)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BookMutation) EdgeCleared(name string) bool {
	switch name {
	case book.EdgeBookAuthor:
		return m.clearedbook_author
	case book.EdgeMediaRequest:
		return m.clearedmedia_request
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BookMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Book unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BookMutation) ResetEdge(name string) error {
	switch name {
	case book.EdgeBookAuthor:
		m.ResetBookAuthor()
		return nil
	case book.EdgeMediaRequest:
		m.ResetMediaRequest()
		return nil
	}
	return fmt.Errorf("unknown Book edge %s", name)
}

// BookAuthorMutation represents an operation that mutates the BookAuthor nodes in the graph.
type BookAuthorMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	full_name     *string
	clearedFields map[string]struct{}
	books         map[uuid.UUID]struct{}
	removedbooks  map[uuid.UUID]struct{}
	clearedbooks  bool
	done          bool
	oldValue      func(context.Context) (*BookAuthor, error)
	predicates    []predicate.BookAuthor
}

var _ ent.Mutation = (*BookAuthorMutation)(nil)

// bookauthorOption allows management of the mutation configuration using functional options.
type bookauthorOption func(*BookAuthorMutation)

// newBookAuthorMutation creates new mutation for the BookAuthor entity.
func newBookAuthorMutation(c config, op Op, opts ...bookauthorOption) *BookAuthorMutation {
	m := &BookAuthorMutation{
		config:        c,
		op:            op,
		typ:           TypeBookAuthor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBookAuthorID sets the ID field of the mutation.
func withBookAuthorID(id uuid.UUID) bookauthorOption {
	return func(m *BookAuthorMutation) {
		var (
			err   error
			once  sync.Once
			value *BookAuthor
		)
		m.oldValue = func(ctx context.Context) (*BookAuthor, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BookAuthor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBookAuthor sets the old BookAuthor of the mutation.
func withBookAuthor(node *BookAuthor) bookauthorOption {
	return func(m *BookAuthorMutation) {
		m.oldValue = func(context.Context) (*BookAuthor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BookAuthorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BookAuthorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BookAuthor entities.
func (m *BookAuthorMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BookAuthorMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BookAuthorMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BookAuthor.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFullName sets the "full_name" field.
func (m *BookAuthorMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *BookAuthorMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the BookAuthor entity.
// If the BookAuthor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookAuthorMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *BookAuthorMutation) ResetFullName() {
	m.full_name = nil
}

// AddBookIDs adds the "books" edge to the Book entity by ids.
func (m *BookAuthorMutation) AddBookIDs(ids ...uuid.UUID) {
	if m.books == nil {
		m.books = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.books[ids[i]] = struct{}{}
	}
}

// ClearBooks clears the "books" edge to the Book entity.
func (m *BookAuthorMutation) ClearBooks() {
	m.clearedbooks = true
}

// BooksCleared reports if the "books" edge to the Book entity was cleared.
func (m *BookAuthorMutation) BooksCleared() bool {
	return m.clearedbooks
}

// RemoveBookIDs removes the "books" edge to the Book entity by IDs.
func (m *BookAuthorMutation) RemoveBookIDs(ids ...uuid.UUID) {
	if m.removedbooks == nil {
		m.removedbooks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.books, ids[i])
		m.removedbooks[ids[i]] = struct{}{}
	}
}

// RemovedBooks returns the removed IDs of the "books" edge to the Book entity.
func (m *BookAuthorMutation) RemovedBooksIDs() (ids []uuid.UUID) {
	for id := range m.removedbooks {
		ids = append(ids, id)
	}
	return
}

// BooksIDs returns the "books" edge IDs in the mutation.
func (m *BookAuthorMutation) BooksIDs() (ids []uuid.UUID) {
	for id := range m.books {
		ids = append(ids, id)
	}
	return
}

// ResetBooks resets all changes to the "books" edge.
func (m *BookAuthorMutation) ResetBooks() {
	m.books = nil
	m.clearedbooks = false
	m.removedbooks = nil
}

// Where appends a list predicates to the BookAuthorMutation builder.
func (m *BookAuthorMutation) Where(ps ...predicate.BookAuthor) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BookAuthorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BookAuthorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BookAuthor, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BookAuthorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BookAuthorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BookAuthor).
func (m *BookAuthorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BookAuthorMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.full_name != nil {
		fields = append(fields, bookauthor.FieldFullName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BookAuthorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bookauthor.FieldFullName:
		return m.FullName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BookAuthorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bookauthor.FieldFullName:
		return m.OldFullName(ctx)
	}
	return nil, fmt.Errorf("unknown BookAuthor field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookAuthorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bookauthor.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	}
	return fmt.Errorf("unknown BookAuthor field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BookAuthorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BookAuthorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookAuthorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BookAuthor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BookAuthorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BookAuthorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BookAuthorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BookAuthor nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BookAuthorMutation) ResetField(name string) error {
	switch name {
	case bookauthor.FieldFullName:
		m.ResetFullName()
		return nil
	}
	return fmt.Errorf("unknown BookAuthor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BookAuthorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.books != nil {
		edges = append(edges, bookauthor.EdgeBooks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BookAuthorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bookauthor.EdgeBooks:
		ids := make([]ent.Value, 0, len(m.books))
		for id := range m.books {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BookAuthorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedbooks != nil {
		edges = append(edges, bookauthor.EdgeBooks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BookAuthorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case bookauthor.EdgeBooks:
		ids := make([]ent.Value, 0, len(m.removedbooks))
		for id := range m.removedbooks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BookAuthorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedbooks {
		edges = append(edges, bookauthor.EdgeBooks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BookAuthorMutation) EdgeCleared(name string) bool {
	switch name {
	case bookauthor.EdgeBooks:
		return m.clearedbooks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BookAuthorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown BookAuthor unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BookAuthorMutation) ResetEdge(name string) error {
	switch name {
	case bookauthor.EdgeBooks:
		m.ResetBooks()
		return nil
	}
	return fmt.Errorf("unknown BookAuthor edge %s", name)
}

// DiscordMessageMutation represents an operation that mutates the DiscordMessage nodes in the graph.
type DiscordMessageMutation struct {
	config
	op            Op
	typ           string
	id            *string
	create_time   *time.Time
	update_time   *time.Time
	raw           *discordgo.Message
	clearedFields map[string]struct{}
	author        map[uuid.UUID]struct{}
	removedauthor map[uuid.UUID]struct{}
	clearedauthor bool
	done          bool
	oldValue      func(context.Context) (*DiscordMessage, error)
	predicates    []predicate.DiscordMessage
}

var _ ent.Mutation = (*DiscordMessageMutation)(nil)

// discordmessageOption allows management of the mutation configuration using functional options.
type discordmessageOption func(*DiscordMessageMutation)

// newDiscordMessageMutation creates new mutation for the DiscordMessage entity.
func newDiscordMessageMutation(c config, op Op, opts ...discordmessageOption) *DiscordMessageMutation {
	m := &DiscordMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeDiscordMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiscordMessageID sets the ID field of the mutation.
func withDiscordMessageID(id string) discordmessageOption {
	return func(m *DiscordMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *DiscordMessage
		)
		m.oldValue = func(ctx context.Context) (*DiscordMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DiscordMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiscordMessage sets the old DiscordMessage of the mutation.
func withDiscordMessage(node *DiscordMessage) discordmessageOption {
	return func(m *DiscordMessageMutation) {
		m.oldValue = func(context.Context) (*DiscordMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiscordMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiscordMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DiscordMessage entities.
func (m *DiscordMessageMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DiscordMessageMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DiscordMessageMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DiscordMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *DiscordMessageMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DiscordMessageMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the DiscordMessage entity.
// If the DiscordMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordMessageMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DiscordMessageMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *DiscordMessageMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *DiscordMessageMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the DiscordMessage entity.
// If the DiscordMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordMessageMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *DiscordMessageMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetRaw sets the "raw" field.
func (m *DiscordMessageMutation) SetRaw(d discordgo.Message) {
	m.raw = &d
}

// Raw returns the value of the "raw" field in the mutation.
func (m *DiscordMessageMutation) Raw() (r discordgo.Message, exists bool) {
	v := m.raw
	if v == nil {
		return
	}
	return *v, true
}

// OldRaw returns the old "raw" field's value of the DiscordMessage entity.
// If the DiscordMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordMessageMutation) OldRaw(ctx context.Context) (v discordgo.Message, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRaw is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRaw requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRaw: %w", err)
	}
	return oldValue.Raw, nil
}

// ResetRaw resets all changes to the "raw" field.
func (m *DiscordMessageMutation) ResetRaw() {
	m.raw = nil
}

// AddAuthorIDs adds the "author" edge to the DiscordUser entity by ids.
func (m *DiscordMessageMutation) AddAuthorIDs(ids ...uuid.UUID) {
	if m.author == nil {
		m.author = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.author[ids[i]] = struct{}{}
	}
}

// ClearAuthor clears the "author" edge to the DiscordUser entity.
func (m *DiscordMessageMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the DiscordUser entity was cleared.
func (m *DiscordMessageMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// RemoveAuthorIDs removes the "author" edge to the DiscordUser entity by IDs.
func (m *DiscordMessageMutation) RemoveAuthorIDs(ids ...uuid.UUID) {
	if m.removedauthor == nil {
		m.removedauthor = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.author, ids[i])
		m.removedauthor[ids[i]] = struct{}{}
	}
}

// RemovedAuthor returns the removed IDs of the "author" edge to the DiscordUser entity.
func (m *DiscordMessageMutation) RemovedAuthorIDs() (ids []uuid.UUID) {
	for id := range m.removedauthor {
		ids = append(ids, id)
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
func (m *DiscordMessageMutation) AuthorIDs() (ids []uuid.UUID) {
	for id := range m.author {
		ids = append(ids, id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *DiscordMessageMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
	m.removedauthor = nil
}

// Where appends a list predicates to the DiscordMessageMutation builder.
func (m *DiscordMessageMutation) Where(ps ...predicate.DiscordMessage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DiscordMessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DiscordMessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DiscordMessage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DiscordMessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DiscordMessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DiscordMessage).
func (m *DiscordMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DiscordMessageMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, discordmessage.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, discordmessage.FieldUpdateTime)
	}
	if m.raw != nil {
		fields = append(fields, discordmessage.FieldRaw)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DiscordMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case discordmessage.FieldCreateTime:
		return m.CreateTime()
	case discordmessage.FieldUpdateTime:
		return m.UpdateTime()
	case discordmessage.FieldRaw:
		return m.Raw()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DiscordMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case discordmessage.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case discordmessage.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case discordmessage.FieldRaw:
		return m.OldRaw(ctx)
	}
	return nil, fmt.Errorf("unknown DiscordMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscordMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case discordmessage.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case discordmessage.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case discordmessage.FieldRaw:
		v, ok := value.(discordgo.Message)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRaw(v)
		return nil
	}
	return fmt.Errorf("unknown DiscordMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DiscordMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DiscordMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscordMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DiscordMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DiscordMessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DiscordMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiscordMessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DiscordMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DiscordMessageMutation) ResetField(name string) error {
	switch name {
	case discordmessage.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case discordmessage.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case discordmessage.FieldRaw:
		m.ResetRaw()
		return nil
	}
	return fmt.Errorf("unknown DiscordMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DiscordMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.author != nil {
		edges = append(edges, discordmessage.EdgeAuthor)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DiscordMessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case discordmessage.EdgeAuthor:
		ids := make([]ent.Value, 0, len(m.author))
		for id := range m.author {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DiscordMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedauthor != nil {
		edges = append(edges, discordmessage.EdgeAuthor)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DiscordMessageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case discordmessage.EdgeAuthor:
		ids := make([]ent.Value, 0, len(m.removedauthor))
		for id := range m.removedauthor {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DiscordMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedauthor {
		edges = append(edges, discordmessage.EdgeAuthor)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DiscordMessageMutation) EdgeCleared(name string) bool {
	switch name {
	case discordmessage.EdgeAuthor:
		return m.clearedauthor
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DiscordMessageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown DiscordMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DiscordMessageMutation) ResetEdge(name string) error {
	switch name {
	case discordmessage.EdgeAuthor:
		m.ResetAuthor()
		return nil
	}
	return fmt.Errorf("unknown DiscordMessage edge %s", name)
}

// DiscordUserMutation represents an operation that mutates the DiscordUser nodes in the graph.
type DiscordUserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	discordid               *string
	username                *string
	email                   *string
	discriminator           *string
	clearedFields           map[string]struct{}
	discord_messages        map[string]struct{}
	removeddiscord_messages map[string]struct{}
	cleareddiscord_messages bool
	media_requests          map[uuid.UUID]struct{}
	removedmedia_requests   map[uuid.UUID]struct{}
	clearedmedia_requests   bool
	done                    bool
	oldValue                func(context.Context) (*DiscordUser, error)
	predicates              []predicate.DiscordUser
}

var _ ent.Mutation = (*DiscordUserMutation)(nil)

// discorduserOption allows management of the mutation configuration using functional options.
type discorduserOption func(*DiscordUserMutation)

// newDiscordUserMutation creates new mutation for the DiscordUser entity.
func newDiscordUserMutation(c config, op Op, opts ...discorduserOption) *DiscordUserMutation {
	m := &DiscordUserMutation{
		config:        c,
		op:            op,
		typ:           TypeDiscordUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiscordUserID sets the ID field of the mutation.
func withDiscordUserID(id uuid.UUID) discorduserOption {
	return func(m *DiscordUserMutation) {
		var (
			err   error
			once  sync.Once
			value *DiscordUser
		)
		m.oldValue = func(ctx context.Context) (*DiscordUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DiscordUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiscordUser sets the old DiscordUser of the mutation.
func withDiscordUser(node *DiscordUser) discorduserOption {
	return func(m *DiscordUserMutation) {
		m.oldValue = func(context.Context) (*DiscordUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiscordUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiscordUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DiscordUser entities.
func (m *DiscordUserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DiscordUserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DiscordUserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DiscordUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDiscordid sets the "discordid" field.
func (m *DiscordUserMutation) SetDiscordid(s string) {
	m.discordid = &s
}

// Discordid returns the value of the "discordid" field in the mutation.
func (m *DiscordUserMutation) Discordid() (r string, exists bool) {
	v := m.discordid
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscordid returns the old "discordid" field's value of the DiscordUser entity.
// If the DiscordUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordUserMutation) OldDiscordid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscordid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscordid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscordid: %w", err)
	}
	return oldValue.Discordid, nil
}

// ResetDiscordid resets all changes to the "discordid" field.
func (m *DiscordUserMutation) ResetDiscordid() {
	m.discordid = nil
}

// SetUsername sets the "username" field.
func (m *DiscordUserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *DiscordUserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the DiscordUser entity.
// If the DiscordUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordUserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *DiscordUserMutation) ResetUsername() {
	m.username = nil
}

// SetEmail sets the "email" field.
func (m *DiscordUserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *DiscordUserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the DiscordUser entity.
// If the DiscordUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordUserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *DiscordUserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[discorduser.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *DiscordUserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[discorduser.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *DiscordUserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, discorduser.FieldEmail)
}

// SetDiscriminator sets the "discriminator" field.
func (m *DiscordUserMutation) SetDiscriminator(s string) {
	m.discriminator = &s
}

// Discriminator returns the value of the "discriminator" field in the mutation.
func (m *DiscordUserMutation) Discriminator() (r string, exists bool) {
	v := m.discriminator
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscriminator returns the old "discriminator" field's value of the DiscordUser entity.
// If the DiscordUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordUserMutation) OldDiscriminator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscriminator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscriminator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscriminator: %w", err)
	}
	return oldValue.Discriminator, nil
}

// ClearDiscriminator clears the value of the "discriminator" field.
func (m *DiscordUserMutation) ClearDiscriminator() {
	m.discriminator = nil
	m.clearedFields[discorduser.FieldDiscriminator] = struct{}{}
}

// DiscriminatorCleared returns if the "discriminator" field was cleared in this mutation.
func (m *DiscordUserMutation) DiscriminatorCleared() bool {
	_, ok := m.clearedFields[discorduser.FieldDiscriminator]
	return ok
}

// ResetDiscriminator resets all changes to the "discriminator" field.
func (m *DiscordUserMutation) ResetDiscriminator() {
	m.discriminator = nil
	delete(m.clearedFields, discorduser.FieldDiscriminator)
}

// AddDiscordMessageIDs adds the "discord_messages" edge to the DiscordMessage entity by ids.
func (m *DiscordUserMutation) AddDiscordMessageIDs(ids ...string) {
	if m.discord_messages == nil {
		m.discord_messages = make(map[string]struct{})
	}
	for i := range ids {
		m.discord_messages[ids[i]] = struct{}{}
	}
}

// ClearDiscordMessages clears the "discord_messages" edge to the DiscordMessage entity.
func (m *DiscordUserMutation) ClearDiscordMessages() {
	m.cleareddiscord_messages = true
}

// DiscordMessagesCleared reports if the "discord_messages" edge to the DiscordMessage entity was cleared.
func (m *DiscordUserMutation) DiscordMessagesCleared() bool {
	return m.cleareddiscord_messages
}

// RemoveDiscordMessageIDs removes the "discord_messages" edge to the DiscordMessage entity by IDs.
func (m *DiscordUserMutation) RemoveDiscordMessageIDs(ids ...string) {
	if m.removeddiscord_messages == nil {
		m.removeddiscord_messages = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.discord_messages, ids[i])
		m.removeddiscord_messages[ids[i]] = struct{}{}
	}
}

// RemovedDiscordMessages returns the removed IDs of the "discord_messages" edge to the DiscordMessage entity.
func (m *DiscordUserMutation) RemovedDiscordMessagesIDs() (ids []string) {
	for id := range m.removeddiscord_messages {
		ids = append(ids, id)
	}
	return
}

// DiscordMessagesIDs returns the "discord_messages" edge IDs in the mutation.
func (m *DiscordUserMutation) DiscordMessagesIDs() (ids []string) {
	for id := range m.discord_messages {
		ids = append(ids, id)
	}
	return
}

// ResetDiscordMessages resets all changes to the "discord_messages" edge.
func (m *DiscordUserMutation) ResetDiscordMessages() {
	m.discord_messages = nil
	m.cleareddiscord_messages = false
	m.removeddiscord_messages = nil
}

// AddMediaRequestIDs adds the "media_requests" edge to the MediaRequest entity by ids.
func (m *DiscordUserMutation) AddMediaRequestIDs(ids ...uuid.UUID) {
	if m.media_requests == nil {
		m.media_requests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.media_requests[ids[i]] = struct{}{}
	}
}

// ClearMediaRequests clears the "media_requests" edge to the MediaRequest entity.
func (m *DiscordUserMutation) ClearMediaRequests() {
	m.clearedmedia_requests = true
}

// MediaRequestsCleared reports if the "media_requests" edge to the MediaRequest entity was cleared.
func (m *DiscordUserMutation) MediaRequestsCleared() bool {
	return m.clearedmedia_requests
}

// RemoveMediaRequestIDs removes the "media_requests" edge to the MediaRequest entity by IDs.
func (m *DiscordUserMutation) RemoveMediaRequestIDs(ids ...uuid.UUID) {
	if m.removedmedia_requests == nil {
		m.removedmedia_requests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.media_requests, ids[i])
		m.removedmedia_requests[ids[i]] = struct{}{}
	}
}

// RemovedMediaRequests returns the removed IDs of the "media_requests" edge to the MediaRequest entity.
func (m *DiscordUserMutation) RemovedMediaRequestsIDs() (ids []uuid.UUID) {
	for id := range m.removedmedia_requests {
		ids = append(ids, id)
	}
	return
}

// MediaRequestsIDs returns the "media_requests" edge IDs in the mutation.
func (m *DiscordUserMutation) MediaRequestsIDs() (ids []uuid.UUID) {
	for id := range m.media_requests {
		ids = append(ids, id)
	}
	return
}

// ResetMediaRequests resets all changes to the "media_requests" edge.
func (m *DiscordUserMutation) ResetMediaRequests() {
	m.media_requests = nil
	m.clearedmedia_requests = false
	m.removedmedia_requests = nil
}

// Where appends a list predicates to the DiscordUserMutation builder.
func (m *DiscordUserMutation) Where(ps ...predicate.DiscordUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DiscordUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DiscordUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DiscordUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DiscordUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DiscordUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DiscordUser).
func (m *DiscordUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DiscordUserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.discordid != nil {
		fields = append(fields, discorduser.FieldDiscordid)
	}
	if m.username != nil {
		fields = append(fields, discorduser.FieldUsername)
	}
	if m.email != nil {
		fields = append(fields, discorduser.FieldEmail)
	}
	if m.discriminator != nil {
		fields = append(fields, discorduser.FieldDiscriminator)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DiscordUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case discorduser.FieldDiscordid:
		return m.Discordid()
	case discorduser.FieldUsername:
		return m.Username()
	case discorduser.FieldEmail:
		return m.Email()
	case discorduser.FieldDiscriminator:
		return m.Discriminator()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DiscordUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case discorduser.FieldDiscordid:
		return m.OldDiscordid(ctx)
	case discorduser.FieldUsername:
		return m.OldUsername(ctx)
	case discorduser.FieldEmail:
		return m.OldEmail(ctx)
	case discorduser.FieldDiscriminator:
		return m.OldDiscriminator(ctx)
	}
	return nil, fmt.Errorf("unknown DiscordUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscordUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case discorduser.FieldDiscordid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscordid(v)
		return nil
	case discorduser.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case discorduser.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case discorduser.FieldDiscriminator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscriminator(v)
		return nil
	}
	return fmt.Errorf("unknown DiscordUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DiscordUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DiscordUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscordUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DiscordUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DiscordUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(discorduser.FieldEmail) {
		fields = append(fields, discorduser.FieldEmail)
	}
	if m.FieldCleared(discorduser.FieldDiscriminator) {
		fields = append(fields, discorduser.FieldDiscriminator)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DiscordUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiscordUserMutation) ClearField(name string) error {
	switch name {
	case discorduser.FieldEmail:
		m.ClearEmail()
		return nil
	case discorduser.FieldDiscriminator:
		m.ClearDiscriminator()
		return nil
	}
	return fmt.Errorf("unknown DiscordUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DiscordUserMutation) ResetField(name string) error {
	switch name {
	case discorduser.FieldDiscordid:
		m.ResetDiscordid()
		return nil
	case discorduser.FieldUsername:
		m.ResetUsername()
		return nil
	case discorduser.FieldEmail:
		m.ResetEmail()
		return nil
	case discorduser.FieldDiscriminator:
		m.ResetDiscriminator()
		return nil
	}
	return fmt.Errorf("unknown DiscordUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DiscordUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.discord_messages != nil {
		edges = append(edges, discorduser.EdgeDiscordMessages)
	}
	if m.media_requests != nil {
		edges = append(edges, discorduser.EdgeMediaRequests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DiscordUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case discorduser.EdgeDiscordMessages:
		ids := make([]ent.Value, 0, len(m.discord_messages))
		for id := range m.discord_messages {
			ids = append(ids, id)
		}
		return ids
	case discorduser.EdgeMediaRequests:
		ids := make([]ent.Value, 0, len(m.media_requests))
		for id := range m.media_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DiscordUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddiscord_messages != nil {
		edges = append(edges, discorduser.EdgeDiscordMessages)
	}
	if m.removedmedia_requests != nil {
		edges = append(edges, discorduser.EdgeMediaRequests)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DiscordUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case discorduser.EdgeDiscordMessages:
		ids := make([]ent.Value, 0, len(m.removeddiscord_messages))
		for id := range m.removeddiscord_messages {
			ids = append(ids, id)
		}
		return ids
	case discorduser.EdgeMediaRequests:
		ids := make([]ent.Value, 0, len(m.removedmedia_requests))
		for id := range m.removedmedia_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DiscordUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareddiscord_messages {
		edges = append(edges, discorduser.EdgeDiscordMessages)
	}
	if m.clearedmedia_requests {
		edges = append(edges, discorduser.EdgeMediaRequests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DiscordUserMutation) EdgeCleared(name string) bool {
	switch name {
	case discorduser.EdgeDiscordMessages:
		return m.cleareddiscord_messages
	case discorduser.EdgeMediaRequests:
		return m.clearedmedia_requests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DiscordUserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown DiscordUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DiscordUserMutation) ResetEdge(name string) error {
	switch name {
	case discorduser.EdgeDiscordMessages:
		m.ResetDiscordMessages()
		return nil
	case discorduser.EdgeMediaRequests:
		m.ResetMediaRequests()
		return nil
	}
	return fmt.Errorf("unknown DiscordUser edge %s", name)
}

// MediaRequestMutation represents an operation that mutates the MediaRequest nodes in the graph.
type MediaRequestMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	create_time         *time.Time
	update_time         *time.Time
	status              *string
	priority            *int
	addpriority         *int
	clearedFields       map[string]struct{}
	discord_user        *uuid.UUID
	cleareddiscord_user bool
	books               map[uuid.UUID]struct{}
	removedbooks        map[uuid.UUID]struct{}
	clearedbooks        bool
	done                bool
	oldValue            func(context.Context) (*MediaRequest, error)
	predicates          []predicate.MediaRequest
}

var _ ent.Mutation = (*MediaRequestMutation)(nil)

// mediarequestOption allows management of the mutation configuration using functional options.
type mediarequestOption func(*MediaRequestMutation)

// newMediaRequestMutation creates new mutation for the MediaRequest entity.
func newMediaRequestMutation(c config, op Op, opts ...mediarequestOption) *MediaRequestMutation {
	m := &MediaRequestMutation{
		config:        c,
		op:            op,
		typ:           TypeMediaRequest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMediaRequestID sets the ID field of the mutation.
func withMediaRequestID(id uuid.UUID) mediarequestOption {
	return func(m *MediaRequestMutation) {
		var (
			err   error
			once  sync.Once
			value *MediaRequest
		)
		m.oldValue = func(ctx context.Context) (*MediaRequest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MediaRequest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMediaRequest sets the old MediaRequest of the mutation.
func withMediaRequest(node *MediaRequest) mediarequestOption {
	return func(m *MediaRequestMutation) {
		m.oldValue = func(context.Context) (*MediaRequest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MediaRequestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MediaRequestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MediaRequest entities.
func (m *MediaRequestMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MediaRequestMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MediaRequestMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MediaRequest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *MediaRequestMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *MediaRequestMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the MediaRequest entity.
// If the MediaRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaRequestMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *MediaRequestMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *MediaRequestMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *MediaRequestMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the MediaRequest entity.
// If the MediaRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaRequestMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *MediaRequestMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetStatus sets the "status" field.
func (m *MediaRequestMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *MediaRequestMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the MediaRequest entity.
// If the MediaRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaRequestMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *MediaRequestMutation) ResetStatus() {
	m.status = nil
}

// SetPriority sets the "priority" field.
func (m *MediaRequestMutation) SetPriority(i int) {
	m.priority = &i
	m.addpriority = nil
}

// Priority returns the value of the "priority" field in the mutation.
func (m *MediaRequestMutation) Priority() (r int, exists bool) {
	v := m.priority
	if v == nil {
		return
	}
	return *v, true
}

// OldPriority returns the old "priority" field's value of the MediaRequest entity.
// If the MediaRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaRequestMutation) OldPriority(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriority: %w", err)
	}
	return oldValue.Priority, nil
}

// AddPriority adds i to the "priority" field.
func (m *MediaRequestMutation) AddPriority(i int) {
	if m.addpriority != nil {
		*m.addpriority += i
	} else {
		m.addpriority = &i
	}
}

// AddedPriority returns the value that was added to the "priority" field in this mutation.
func (m *MediaRequestMutation) AddedPriority() (r int, exists bool) {
	v := m.addpriority
	if v == nil {
		return
	}
	return *v, true
}

// ResetPriority resets all changes to the "priority" field.
func (m *MediaRequestMutation) ResetPriority() {
	m.priority = nil
	m.addpriority = nil
}

// SetDiscordUserID sets the "discord_user" edge to the DiscordUser entity by id.
func (m *MediaRequestMutation) SetDiscordUserID(id uuid.UUID) {
	m.discord_user = &id
}

// ClearDiscordUser clears the "discord_user" edge to the DiscordUser entity.
func (m *MediaRequestMutation) ClearDiscordUser() {
	m.cleareddiscord_user = true
}

// DiscordUserCleared reports if the "discord_user" edge to the DiscordUser entity was cleared.
func (m *MediaRequestMutation) DiscordUserCleared() bool {
	return m.cleareddiscord_user
}

// DiscordUserID returns the "discord_user" edge ID in the mutation.
func (m *MediaRequestMutation) DiscordUserID() (id uuid.UUID, exists bool) {
	if m.discord_user != nil {
		return *m.discord_user, true
	}
	return
}

// DiscordUserIDs returns the "discord_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DiscordUserID instead. It exists only for internal usage by the builders.
func (m *MediaRequestMutation) DiscordUserIDs() (ids []uuid.UUID) {
	if id := m.discord_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDiscordUser resets all changes to the "discord_user" edge.
func (m *MediaRequestMutation) ResetDiscordUser() {
	m.discord_user = nil
	m.cleareddiscord_user = false
}

// AddBookIDs adds the "books" edge to the Book entity by ids.
func (m *MediaRequestMutation) AddBookIDs(ids ...uuid.UUID) {
	if m.books == nil {
		m.books = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.books[ids[i]] = struct{}{}
	}
}

// ClearBooks clears the "books" edge to the Book entity.
func (m *MediaRequestMutation) ClearBooks() {
	m.clearedbooks = true
}

// BooksCleared reports if the "books" edge to the Book entity was cleared.
func (m *MediaRequestMutation) BooksCleared() bool {
	return m.clearedbooks
}

// RemoveBookIDs removes the "books" edge to the Book entity by IDs.
func (m *MediaRequestMutation) RemoveBookIDs(ids ...uuid.UUID) {
	if m.removedbooks == nil {
		m.removedbooks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.books, ids[i])
		m.removedbooks[ids[i]] = struct{}{}
	}
}

// RemovedBooks returns the removed IDs of the "books" edge to the Book entity.
func (m *MediaRequestMutation) RemovedBooksIDs() (ids []uuid.UUID) {
	for id := range m.removedbooks {
		ids = append(ids, id)
	}
	return
}

// BooksIDs returns the "books" edge IDs in the mutation.
func (m *MediaRequestMutation) BooksIDs() (ids []uuid.UUID) {
	for id := range m.books {
		ids = append(ids, id)
	}
	return
}

// ResetBooks resets all changes to the "books" edge.
func (m *MediaRequestMutation) ResetBooks() {
	m.books = nil
	m.clearedbooks = false
	m.removedbooks = nil
}

// Where appends a list predicates to the MediaRequestMutation builder.
func (m *MediaRequestMutation) Where(ps ...predicate.MediaRequest) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MediaRequestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MediaRequestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MediaRequest, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MediaRequestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MediaRequestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MediaRequest).
func (m *MediaRequestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MediaRequestMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, mediarequest.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, mediarequest.FieldUpdateTime)
	}
	if m.status != nil {
		fields = append(fields, mediarequest.FieldStatus)
	}
	if m.priority != nil {
		fields = append(fields, mediarequest.FieldPriority)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MediaRequestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mediarequest.FieldCreateTime:
		return m.CreateTime()
	case mediarequest.FieldUpdateTime:
		return m.UpdateTime()
	case mediarequest.FieldStatus:
		return m.Status()
	case mediarequest.FieldPriority:
		return m.Priority()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MediaRequestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mediarequest.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case mediarequest.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case mediarequest.FieldStatus:
		return m.OldStatus(ctx)
	case mediarequest.FieldPriority:
		return m.OldPriority(ctx)
	}
	return nil, fmt.Errorf("unknown MediaRequest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaRequestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mediarequest.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case mediarequest.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case mediarequest.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case mediarequest.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriority(v)
		return nil
	}
	return fmt.Errorf("unknown MediaRequest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MediaRequestMutation) AddedFields() []string {
	var fields []string
	if m.addpriority != nil {
		fields = append(fields, mediarequest.FieldPriority)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MediaRequestMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case mediarequest.FieldPriority:
		return m.AddedPriority()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaRequestMutation) AddField(name string, value ent.Value) error {
	switch name {
	case mediarequest.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPriority(v)
		return nil
	}
	return fmt.Errorf("unknown MediaRequest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MediaRequestMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MediaRequestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MediaRequestMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MediaRequest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MediaRequestMutation) ResetField(name string) error {
	switch name {
	case mediarequest.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case mediarequest.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case mediarequest.FieldStatus:
		m.ResetStatus()
		return nil
	case mediarequest.FieldPriority:
		m.ResetPriority()
		return nil
	}
	return fmt.Errorf("unknown MediaRequest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MediaRequestMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.discord_user != nil {
		edges = append(edges, mediarequest.EdgeDiscordUser)
	}
	if m.books != nil {
		edges = append(edges, mediarequest.EdgeBooks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MediaRequestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mediarequest.EdgeDiscordUser:
		if id := m.discord_user; id != nil {
			return []ent.Value{*id}
		}
	case mediarequest.EdgeBooks:
		ids := make([]ent.Value, 0, len(m.books))
		for id := range m.books {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MediaRequestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedbooks != nil {
		edges = append(edges, mediarequest.EdgeBooks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MediaRequestMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case mediarequest.EdgeBooks:
		ids := make([]ent.Value, 0, len(m.removedbooks))
		for id := range m.removedbooks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MediaRequestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareddiscord_user {
		edges = append(edges, mediarequest.EdgeDiscordUser)
	}
	if m.clearedbooks {
		edges = append(edges, mediarequest.EdgeBooks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MediaRequestMutation) EdgeCleared(name string) bool {
	switch name {
	case mediarequest.EdgeDiscordUser:
		return m.cleareddiscord_user
	case mediarequest.EdgeBooks:
		return m.clearedbooks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MediaRequestMutation) ClearEdge(name string) error {
	switch name {
	case mediarequest.EdgeDiscordUser:
		m.ClearDiscordUser()
		return nil
	}
	return fmt.Errorf("unknown MediaRequest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MediaRequestMutation) ResetEdge(name string) error {
	switch name {
	case mediarequest.EdgeDiscordUser:
		m.ResetDiscordUser()
		return nil
	case mediarequest.EdgeBooks:
		m.ResetBooks()
		return nil
	}
	return fmt.Errorf("unknown MediaRequest edge %s", name)
}
