// Code generated by ent, DO NOT EDIT.

package mediarequest

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the mediarequest type in the database.
	Label = "media_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldMediaType holds the string denoting the mediatype field in the database.
	FieldMediaType = "media_type"
	// FieldRequestId holds the string denoting the requestid field in the database.
	FieldRequestId = "request_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the mediarequest in the database.
	Table = "media_requests"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "media_requests"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_media_request"
)

// Columns holds all SQL columns for mediarequest fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldMediaType,
	FieldRequestId,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "media_requests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_media_request",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// MediaType defines the type for the "mediaType" enum field.
type MediaType string

// MediaType values.
const (
	MediaTypeMovie MediaType = "movie"
	MediaTypeTv    MediaType = "tv"
	MediaTypeBook  MediaType = "book"
	MediaTypeMusic MediaType = "music"
)

func (mt MediaType) String() string {
	return string(mt)
}

// MediaTypeValidator is a validator for the "mediaType" field enum values. It is called by the builders before save.
func MediaTypeValidator(mt MediaType) error {
	switch mt {
	case MediaTypeMovie, MediaTypeTv, MediaTypeBook, MediaTypeMusic:
		return nil
	default:
		return fmt.Errorf("mediarequest: invalid enum value for mediaType field: %q", mt)
	}
}

// OrderOption defines the ordering options for the MediaRequest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByMediaType orders the results by the mediaType field.
func ByMediaType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMediaType, opts...).ToFunc()
}

// ByRequestId orders the results by the requestId field.
func ByRequestId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestId, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
