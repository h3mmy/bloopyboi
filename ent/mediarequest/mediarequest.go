// Code generated by ent, DO NOT EDIT.

package mediarequest

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/internal/models"
)

const (
	// Label holds the string label denoting the mediarequest type in the database.
	Label = "media_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// EdgeDiscordUsers holds the string denoting the discord_users edge name in mutations.
	EdgeDiscordUsers = "discord_users"
	// EdgeBook holds the string denoting the book edge name in mutations.
	EdgeBook = "book"
	// Table holds the table name of the mediarequest in the database.
	Table = "media_requests"
	// DiscordUsersTable is the table that holds the discord_users relation/edge. The primary key declared below.
	DiscordUsersTable = "discord_user_media_requests"
	// DiscordUsersInverseTable is the table name for the DiscordUser entity.
	// It exists in this package in order to avoid circular dependency with the "discorduser" package.
	DiscordUsersInverseTable = "discord_users"
	// BookTable is the table that holds the book relation/edge.
	BookTable = "media_requests"
	// BookInverseTable is the table name for the Book entity.
	// It exists in this package in order to avoid circular dependency with the "book" package.
	BookInverseTable = "books"
	// BookColumn is the table column denoting the book relation/edge.
	BookColumn = "book_media_request"
)

// Columns holds all SQL columns for mediarequest fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStatus,
	FieldPriority,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "media_requests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"book_media_request",
}

var (
	// DiscordUsersPrimaryKey and DiscordUsersColumn2 are the table columns denoting the
	// primary key for the discord_users relation (M2M).
	DiscordUsersPrimaryKey = []string{"discord_user_id", "media_request_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultPriority holds the default value on creation for the "priority" field.
	DefaultPriority int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s models.MediaRequestStatus) error {
	switch s {
	case "requested", "approved", "success", "rejected", "cancelled", "error":
		return nil
	default:
		return fmt.Errorf("mediarequest: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the MediaRequest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByDiscordUsersCount orders the results by discord_users count.
func ByDiscordUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDiscordUsersStep(), opts...)
	}
}

// ByDiscordUsers orders the results by discord_users terms.
func ByDiscordUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDiscordUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBookField orders the results by book field.
func ByBookField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBookStep(), sql.OrderByField(field, opts...))
	}
}
func newDiscordUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DiscordUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DiscordUsersTable, DiscordUsersPrimaryKey...),
	)
}
func newBookStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BookInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, BookTable, BookColumn),
	)
}
