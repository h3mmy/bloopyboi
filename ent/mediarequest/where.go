// Code generated by ent, DO NOT EDIT.

package mediarequest

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/h3mmy/bloopyboi/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldLTE(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldEQ(FieldStatus, v))
}

// RequestId applies equality check predicate on the "requestId" field. It's identical to RequestIdEQ.
func RequestId(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldEQ(FieldRequestId, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldContainsFold(FieldStatus, v))
}

// MediaTypeEQ applies the EQ predicate on the "mediaType" field.
func MediaTypeEQ(v MediaType) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldEQ(FieldMediaType, v))
}

// MediaTypeNEQ applies the NEQ predicate on the "mediaType" field.
func MediaTypeNEQ(v MediaType) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldNEQ(FieldMediaType, v))
}

// MediaTypeIn applies the In predicate on the "mediaType" field.
func MediaTypeIn(vs ...MediaType) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldIn(FieldMediaType, vs...))
}

// MediaTypeNotIn applies the NotIn predicate on the "mediaType" field.
func MediaTypeNotIn(vs ...MediaType) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldNotIn(FieldMediaType, vs...))
}

// RequestIdEQ applies the EQ predicate on the "requestId" field.
func RequestIdEQ(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldEQ(FieldRequestId, v))
}

// RequestIdNEQ applies the NEQ predicate on the "requestId" field.
func RequestIdNEQ(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldNEQ(FieldRequestId, v))
}

// RequestIdIn applies the In predicate on the "requestId" field.
func RequestIdIn(vs ...string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldIn(FieldRequestId, vs...))
}

// RequestIdNotIn applies the NotIn predicate on the "requestId" field.
func RequestIdNotIn(vs ...string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldNotIn(FieldRequestId, vs...))
}

// RequestIdGT applies the GT predicate on the "requestId" field.
func RequestIdGT(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldGT(FieldRequestId, v))
}

// RequestIdGTE applies the GTE predicate on the "requestId" field.
func RequestIdGTE(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldGTE(FieldRequestId, v))
}

// RequestIdLT applies the LT predicate on the "requestId" field.
func RequestIdLT(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldLT(FieldRequestId, v))
}

// RequestIdLTE applies the LTE predicate on the "requestId" field.
func RequestIdLTE(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldLTE(FieldRequestId, v))
}

// RequestIdContains applies the Contains predicate on the "requestId" field.
func RequestIdContains(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldContains(FieldRequestId, v))
}

// RequestIdHasPrefix applies the HasPrefix predicate on the "requestId" field.
func RequestIdHasPrefix(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldHasPrefix(FieldRequestId, v))
}

// RequestIdHasSuffix applies the HasSuffix predicate on the "requestId" field.
func RequestIdHasSuffix(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldHasSuffix(FieldRequestId, v))
}

// RequestIdEqualFold applies the EqualFold predicate on the "requestId" field.
func RequestIdEqualFold(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldEqualFold(FieldRequestId, v))
}

// RequestIdContainsFold applies the ContainsFold predicate on the "requestId" field.
func RequestIdContainsFold(v string) predicate.MediaRequest {
	return predicate.MediaRequest(sql.FieldContainsFold(FieldRequestId, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.MediaRequest {
	return predicate.MediaRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.MediaRequest {
	return predicate.MediaRequest(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MediaRequest) predicate.MediaRequest {
	return predicate.MediaRequest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MediaRequest) predicate.MediaRequest {
	return predicate.MediaRequest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MediaRequest) predicate.MediaRequest {
	return predicate.MediaRequest(func(s *sql.Selector) {
		p(s.Not())
	})
}
