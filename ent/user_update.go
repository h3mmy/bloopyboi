// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/group"
	"github.com/h3mmy/bloopyboi/ent/mediarequest"
	"github.com/h3mmy/bloopyboi/ent/predicate"
	"github.com/h3mmy/bloopyboi/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetBloopyId sets the "bloopyId" field.
func (uu *UserUpdate) SetBloopyId(u uuid.UUID) *UserUpdate {
	uu.mutation.SetBloopyId(u)
	return uu
}

// SetDiscordid sets the "discordid" field.
func (uu *UserUpdate) SetDiscordid(s string) *UserUpdate {
	uu.mutation.SetDiscordid(s)
	return uu
}

// SetNillableDiscordid sets the "discordid" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDiscordid(s *string) *UserUpdate {
	if s != nil {
		uu.SetDiscordid(*s)
	}
	return uu
}

// SetPlexid sets the "Plexid" field.
func (uu *UserUpdate) SetPlexid(s string) *UserUpdate {
	uu.mutation.SetPlexid(s)
	return uu
}

// SetNillablePlexid sets the "Plexid" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePlexid(s *string) *UserUpdate {
	if s != nil {
		uu.SetPlexid(*s)
	}
	return uu
}

// SetBloopnetid sets the "bloopnetid" field.
func (uu *UserUpdate) SetBloopnetid(s string) *UserUpdate {
	uu.mutation.SetBloopnetid(s)
	return uu
}

// SetAuthentikpkid sets the "authentikpkid" field.
func (uu *UserUpdate) SetAuthentikpkid(s string) *UserUpdate {
	uu.mutation.SetAuthentikpkid(s)
	return uu
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (uu *UserUpdate) AddGroupIDs(ids ...int) *UserUpdate {
	uu.mutation.AddGroupIDs(ids...)
	return uu
}

// AddGroups adds the "groups" edges to the Group entity.
func (uu *UserUpdate) AddGroups(g ...*Group) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGroupIDs(ids...)
}

// AddMediaRequestIDs adds the "mediaRequest" edge to the MediaRequest entity by IDs.
func (uu *UserUpdate) AddMediaRequestIDs(ids ...int) *UserUpdate {
	uu.mutation.AddMediaRequestIDs(ids...)
	return uu
}

// AddMediaRequest adds the "mediaRequest" edges to the MediaRequest entity.
func (uu *UserUpdate) AddMediaRequest(m ...*MediaRequest) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddMediaRequestIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (uu *UserUpdate) ClearGroups() *UserUpdate {
	uu.mutation.ClearGroups()
	return uu
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (uu *UserUpdate) RemoveGroupIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveGroupIDs(ids...)
	return uu
}

// RemoveGroups removes "groups" edges to Group entities.
func (uu *UserUpdate) RemoveGroups(g ...*Group) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGroupIDs(ids...)
}

// ClearMediaRequest clears all "mediaRequest" edges to the MediaRequest entity.
func (uu *UserUpdate) ClearMediaRequest() *UserUpdate {
	uu.mutation.ClearMediaRequest()
	return uu
}

// RemoveMediaRequestIDs removes the "mediaRequest" edge to MediaRequest entities by IDs.
func (uu *UserUpdate) RemoveMediaRequestIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveMediaRequestIDs(ids...)
	return uu
}

// RemoveMediaRequest removes "mediaRequest" edges to MediaRequest entities.
func (uu *UserUpdate) RemoveMediaRequest(m ...*MediaRequest) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveMediaRequestIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.BloopyId(); ok {
		_spec.SetField(user.FieldBloopyId, field.TypeUUID, value)
	}
	if value, ok := uu.mutation.Discordid(); ok {
		_spec.SetField(user.FieldDiscordid, field.TypeString, value)
	}
	if value, ok := uu.mutation.Plexid(); ok {
		_spec.SetField(user.FieldPlexid, field.TypeString, value)
	}
	if value, ok := uu.mutation.Bloopnetid(); ok {
		_spec.SetField(user.FieldBloopnetid, field.TypeString, value)
	}
	if value, ok := uu.mutation.Authentikpkid(); ok {
		_spec.SetField(user.FieldAuthentikpkid, field.TypeString, value)
	}
	if uu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !uu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MediaRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MediaRequestTable,
			Columns: []string{user.MediaRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediarequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedMediaRequestIDs(); len(nodes) > 0 && !uu.mutation.MediaRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MediaRequestTable,
			Columns: []string{user.MediaRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediarequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MediaRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MediaRequestTable,
			Columns: []string{user.MediaRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediarequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetBloopyId sets the "bloopyId" field.
func (uuo *UserUpdateOne) SetBloopyId(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetBloopyId(u)
	return uuo
}

// SetDiscordid sets the "discordid" field.
func (uuo *UserUpdateOne) SetDiscordid(s string) *UserUpdateOne {
	uuo.mutation.SetDiscordid(s)
	return uuo
}

// SetNillableDiscordid sets the "discordid" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDiscordid(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDiscordid(*s)
	}
	return uuo
}

// SetPlexid sets the "Plexid" field.
func (uuo *UserUpdateOne) SetPlexid(s string) *UserUpdateOne {
	uuo.mutation.SetPlexid(s)
	return uuo
}

// SetNillablePlexid sets the "Plexid" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePlexid(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPlexid(*s)
	}
	return uuo
}

// SetBloopnetid sets the "bloopnetid" field.
func (uuo *UserUpdateOne) SetBloopnetid(s string) *UserUpdateOne {
	uuo.mutation.SetBloopnetid(s)
	return uuo
}

// SetAuthentikpkid sets the "authentikpkid" field.
func (uuo *UserUpdateOne) SetAuthentikpkid(s string) *UserUpdateOne {
	uuo.mutation.SetAuthentikpkid(s)
	return uuo
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (uuo *UserUpdateOne) AddGroupIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddGroupIDs(ids...)
	return uuo
}

// AddGroups adds the "groups" edges to the Group entity.
func (uuo *UserUpdateOne) AddGroups(g ...*Group) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGroupIDs(ids...)
}

// AddMediaRequestIDs adds the "mediaRequest" edge to the MediaRequest entity by IDs.
func (uuo *UserUpdateOne) AddMediaRequestIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddMediaRequestIDs(ids...)
	return uuo
}

// AddMediaRequest adds the "mediaRequest" edges to the MediaRequest entity.
func (uuo *UserUpdateOne) AddMediaRequest(m ...*MediaRequest) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddMediaRequestIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (uuo *UserUpdateOne) ClearGroups() *UserUpdateOne {
	uuo.mutation.ClearGroups()
	return uuo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (uuo *UserUpdateOne) RemoveGroupIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveGroupIDs(ids...)
	return uuo
}

// RemoveGroups removes "groups" edges to Group entities.
func (uuo *UserUpdateOne) RemoveGroups(g ...*Group) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGroupIDs(ids...)
}

// ClearMediaRequest clears all "mediaRequest" edges to the MediaRequest entity.
func (uuo *UserUpdateOne) ClearMediaRequest() *UserUpdateOne {
	uuo.mutation.ClearMediaRequest()
	return uuo
}

// RemoveMediaRequestIDs removes the "mediaRequest" edge to MediaRequest entities by IDs.
func (uuo *UserUpdateOne) RemoveMediaRequestIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveMediaRequestIDs(ids...)
	return uuo
}

// RemoveMediaRequest removes "mediaRequest" edges to MediaRequest entities.
func (uuo *UserUpdateOne) RemoveMediaRequest(m ...*MediaRequest) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveMediaRequestIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.BloopyId(); ok {
		_spec.SetField(user.FieldBloopyId, field.TypeUUID, value)
	}
	if value, ok := uuo.mutation.Discordid(); ok {
		_spec.SetField(user.FieldDiscordid, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Plexid(); ok {
		_spec.SetField(user.FieldPlexid, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Bloopnetid(); ok {
		_spec.SetField(user.FieldBloopnetid, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Authentikpkid(); ok {
		_spec.SetField(user.FieldAuthentikpkid, field.TypeString, value)
	}
	if uuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !uuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MediaRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MediaRequestTable,
			Columns: []string{user.MediaRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediarequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedMediaRequestIDs(); len(nodes) > 0 && !uuo.mutation.MediaRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MediaRequestTable,
			Columns: []string{user.MediaRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediarequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MediaRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MediaRequestTable,
			Columns: []string{user.MediaRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediarequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
