// Code generated by ent, DO NOT EDIT.

package discordmessage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldEQ(FieldUpdateTime, v))
}

// Discordid applies equality check predicate on the "discordid" field. It's identical to DiscordidEQ.
func Discordid(v string) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldEQ(FieldDiscordid, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldLTE(FieldUpdateTime, v))
}

// DiscordidEQ applies the EQ predicate on the "discordid" field.
func DiscordidEQ(v string) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldEQ(FieldDiscordid, v))
}

// DiscordidNEQ applies the NEQ predicate on the "discordid" field.
func DiscordidNEQ(v string) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldNEQ(FieldDiscordid, v))
}

// DiscordidIn applies the In predicate on the "discordid" field.
func DiscordidIn(vs ...string) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldIn(FieldDiscordid, vs...))
}

// DiscordidNotIn applies the NotIn predicate on the "discordid" field.
func DiscordidNotIn(vs ...string) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldNotIn(FieldDiscordid, vs...))
}

// DiscordidGT applies the GT predicate on the "discordid" field.
func DiscordidGT(v string) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldGT(FieldDiscordid, v))
}

// DiscordidGTE applies the GTE predicate on the "discordid" field.
func DiscordidGTE(v string) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldGTE(FieldDiscordid, v))
}

// DiscordidLT applies the LT predicate on the "discordid" field.
func DiscordidLT(v string) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldLT(FieldDiscordid, v))
}

// DiscordidLTE applies the LTE predicate on the "discordid" field.
func DiscordidLTE(v string) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldLTE(FieldDiscordid, v))
}

// DiscordidContains applies the Contains predicate on the "discordid" field.
func DiscordidContains(v string) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldContains(FieldDiscordid, v))
}

// DiscordidHasPrefix applies the HasPrefix predicate on the "discordid" field.
func DiscordidHasPrefix(v string) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldHasPrefix(FieldDiscordid, v))
}

// DiscordidHasSuffix applies the HasSuffix predicate on the "discordid" field.
func DiscordidHasSuffix(v string) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldHasSuffix(FieldDiscordid, v))
}

// DiscordidEqualFold applies the EqualFold predicate on the "discordid" field.
func DiscordidEqualFold(v string) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldEqualFold(FieldDiscordid, v))
}

// DiscordidContainsFold applies the ContainsFold predicate on the "discordid" field.
func DiscordidContainsFold(v string) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.FieldContainsFold(FieldDiscordid, v))
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.DiscordMessage {
	return predicate.DiscordMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.DiscordUser) predicate.DiscordMessage {
	return predicate.DiscordMessage(func(s *sql.Selector) {
		step := newAuthorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessageReactions applies the HasEdge predicate on the "message_reactions" edge.
func HasMessageReactions() predicate.DiscordMessage {
	return predicate.DiscordMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessageReactionsTable, MessageReactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessageReactionsWith applies the HasEdge predicate on the "message_reactions" edge with a given conditions (other predicates).
func HasMessageReactionsWith(preds ...predicate.DiscordMessageReaction) predicate.DiscordMessage {
	return predicate.DiscordMessage(func(s *sql.Selector) {
		step := newMessageReactionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGuild applies the HasEdge predicate on the "guild" edge.
func HasGuild() predicate.DiscordMessage {
	return predicate.DiscordMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GuildTable, GuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuildWith applies the HasEdge predicate on the "guild" edge with a given conditions (other predicates).
func HasGuildWith(preds ...predicate.DiscordGuild) predicate.DiscordMessage {
	return predicate.DiscordMessage(func(s *sql.Selector) {
		step := newGuildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DiscordMessage) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DiscordMessage) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DiscordMessage) predicate.DiscordMessage {
	return predicate.DiscordMessage(sql.NotPredicates(p))
}
