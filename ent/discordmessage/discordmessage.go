// Code generated by ent, DO NOT EDIT.

package discordmessage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the discordmessage type in the database.
	Label = "discord_message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldDiscordid holds the string denoting the discordid field in the database.
	FieldDiscordid = "discordid"
	// FieldRaw holds the string denoting the raw field in the database.
	FieldRaw = "raw"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeMessageReactions holds the string denoting the message_reactions edge name in mutations.
	EdgeMessageReactions = "message_reactions"
	// EdgeGuild holds the string denoting the guild edge name in mutations.
	EdgeGuild = "guild"
	// Table holds the table name of the discordmessage in the database.
	Table = "discord_messages"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "discord_messages"
	// AuthorInverseTable is the table name for the DiscordUser entity.
	// It exists in this package in order to avoid circular dependency with the "discorduser" package.
	AuthorInverseTable = "discord_users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "discord_user_discord_messages"
	// MessageReactionsTable is the table that holds the message_reactions relation/edge.
	MessageReactionsTable = "discord_message_reactions"
	// MessageReactionsInverseTable is the table name for the DiscordMessageReaction entity.
	// It exists in this package in order to avoid circular dependency with the "discordmessagereaction" package.
	MessageReactionsInverseTable = "discord_message_reactions"
	// MessageReactionsColumn is the table column denoting the message_reactions relation/edge.
	MessageReactionsColumn = "discord_message_message_reactions"
	// GuildTable is the table that holds the guild relation/edge.
	GuildTable = "discord_messages"
	// GuildInverseTable is the table name for the DiscordGuild entity.
	// It exists in this package in order to avoid circular dependency with the "discordguild" package.
	GuildInverseTable = "discord_guilds"
	// GuildColumn is the table column denoting the guild relation/edge.
	GuildColumn = "discord_guild_discord_messages"
)

// Columns holds all SQL columns for discordmessage fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldDiscordid,
	FieldRaw,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "discord_messages"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"discord_guild_discord_messages",
	"discord_user_discord_messages",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the DiscordMessage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByDiscordid orders the results by the discordid field.
func ByDiscordid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscordid, opts...).ToFunc()
}

// ByAuthorField orders the results by author field.
func ByAuthorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorStep(), sql.OrderByField(field, opts...))
	}
}

// ByMessageReactionsCount orders the results by message_reactions count.
func ByMessageReactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessageReactionsStep(), opts...)
	}
}

// ByMessageReactions orders the results by message_reactions terms.
func ByMessageReactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessageReactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGuildField orders the results by guild field.
func ByGuildField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGuildStep(), sql.OrderByField(field, opts...))
	}
}
func newAuthorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
	)
}
func newMessageReactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessageReactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MessageReactionsTable, MessageReactionsColumn),
	)
}
func newGuildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GuildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GuildTable, GuildColumn),
	)
}
