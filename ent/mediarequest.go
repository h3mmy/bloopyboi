// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/h3mmy/bloopyboi/ent/book"
	"github.com/h3mmy/bloopyboi/ent/mediarequest"
	"github.com/h3mmy/bloopyboi/internal/models"
)

// MediaRequest is the model entity for the MediaRequest schema.
type MediaRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Status holds the value of the "status" field.
	Status models.MediaRequestStatus `json:"status,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int `json:"priority,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MediaRequestQuery when eager-loading is set.
	Edges              MediaRequestEdges `json:"edges"`
	book_media_request *uuid.UUID
	selectValues       sql.SelectValues
}

// MediaRequestEdges holds the relations/edges for other nodes in the graph.
type MediaRequestEdges struct {
	// DiscordUsers holds the value of the discord_users edge.
	DiscordUsers []*DiscordUser `json:"discord_users,omitempty"`
	// Book holds the value of the book edge.
	Book *Book `json:"book,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes       [2]bool
	namedDiscordUsers map[string][]*DiscordUser
}

// DiscordUsersOrErr returns the DiscordUsers value or an error if the edge
// was not loaded in eager-loading.
func (e MediaRequestEdges) DiscordUsersOrErr() ([]*DiscordUser, error) {
	if e.loadedTypes[0] {
		return e.DiscordUsers, nil
	}
	return nil, &NotLoadedError{edge: "discord_users"}
}

// BookOrErr returns the Book value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaRequestEdges) BookOrErr() (*Book, error) {
	if e.Book != nil {
		return e.Book, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: book.Label}
	}
	return nil, &NotLoadedError{edge: "book"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MediaRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mediarequest.FieldPriority:
			values[i] = new(sql.NullInt64)
		case mediarequest.FieldStatus:
			values[i] = new(sql.NullString)
		case mediarequest.FieldCreateTime, mediarequest.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case mediarequest.FieldID:
			values[i] = new(uuid.UUID)
		case mediarequest.ForeignKeys[0]: // book_media_request
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MediaRequest fields.
func (mr *MediaRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mediarequest.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mr.ID = *value
			}
		case mediarequest.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				mr.CreateTime = value.Time
			}
		case mediarequest.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				mr.UpdateTime = value.Time
			}
		case mediarequest.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mr.Status = models.MediaRequestStatus(value.String)
			}
		case mediarequest.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				mr.Priority = int(value.Int64)
			}
		case mediarequest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field book_media_request", values[i])
			} else if value.Valid {
				mr.book_media_request = new(uuid.UUID)
				*mr.book_media_request = *value.S.(*uuid.UUID)
			}
		default:
			mr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MediaRequest.
// This includes values selected through modifiers, order, etc.
func (mr *MediaRequest) Value(name string) (ent.Value, error) {
	return mr.selectValues.Get(name)
}

// QueryDiscordUsers queries the "discord_users" edge of the MediaRequest entity.
func (mr *MediaRequest) QueryDiscordUsers() *DiscordUserQuery {
	return NewMediaRequestClient(mr.config).QueryDiscordUsers(mr)
}

// QueryBook queries the "book" edge of the MediaRequest entity.
func (mr *MediaRequest) QueryBook() *BookQuery {
	return NewMediaRequestClient(mr.config).QueryBook(mr)
}

// Update returns a builder for updating this MediaRequest.
// Note that you need to call MediaRequest.Unwrap() before calling this method if this MediaRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (mr *MediaRequest) Update() *MediaRequestUpdateOne {
	return NewMediaRequestClient(mr.config).UpdateOne(mr)
}

// Unwrap unwraps the MediaRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mr *MediaRequest) Unwrap() *MediaRequest {
	_tx, ok := mr.config.driver.(*txDriver)
	if !ok {
		panic("ent: MediaRequest is not a transactional entity")
	}
	mr.config.driver = _tx.drv
	return mr
}

// String implements the fmt.Stringer.
func (mr *MediaRequest) String() string {
	var builder strings.Builder
	builder.WriteString("MediaRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mr.ID))
	builder.WriteString("create_time=")
	builder.WriteString(mr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(mr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", mr.Status))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", mr.Priority))
	builder.WriteByte(')')
	return builder.String()
}

// NamedDiscordUsers returns the DiscordUsers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (mr *MediaRequest) NamedDiscordUsers(name string) ([]*DiscordUser, error) {
	if mr.Edges.namedDiscordUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := mr.Edges.namedDiscordUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (mr *MediaRequest) appendNamedDiscordUsers(name string, edges ...*DiscordUser) {
	if mr.Edges.namedDiscordUsers == nil {
		mr.Edges.namedDiscordUsers = make(map[string][]*DiscordUser)
	}
	if len(edges) == 0 {
		mr.Edges.namedDiscordUsers[name] = []*DiscordUser{}
	} else {
		mr.Edges.namedDiscordUsers[name] = append(mr.Edges.namedDiscordUsers[name], edges...)
	}
}

// MediaRequests is a parsable slice of MediaRequest.
type MediaRequests []*MediaRequest
